{"version":3,"sources":["App/assets/mockups.png","App/utilities/SearchResultUtilities.js","App/components/PlayerSearchResult.js","App/components/ClubSearchResult.js","App/components/SearchBar.js","App/components/LoadingSpinner.js","App/pages/Home.js","App/pages/Search.js","App/utilities/SliceUtilities.js","App/components/SliceOptions.js","App/components/Slice.js","App/components/GlossaryOverlay.js","App/components/CompareSearchOverlay.js","App/components/LoaderOverlay.js","App/pages/Stats.js","App/pages/Compare.js","App/pages/Error.js","App/components/ExplanationOverlay.js","App/pages/AdvancedSearch.js","App/App.js","index.js"],"names":["module","exports","leagueNames","getAllEntriesFromObject","object","allInfo","season","i","value","includes","filter","item","unshift","length","PlayerSearchResult","props","isMobile","clubs","positions","state","page","forComparison","comparisonCode","code","name","age","nationalities","countryCodes","link","this","flagSizeMultiplier","flagsDisplay","countryCode","push","basePath","country","format","pngSize","width","height","shiny","alt","to","tabIndex","className","join","Component","ClubSearchResult","SearchBar","_isMounted","_firstRequest","getSearchResults","query","signal","liveSearchEnabled","controller","AbortController","Promise","resolve","reject","fetch","method","headers","body","JSON","stringify","then","res","ok","json","Error","searchResults","catch","error","handleChange","event","setState","target","handleChangeLive","abort","liveResultsOpen","isLoading","updateLiveSearchResults","playerSearchResults","clubSearchResults","handleFocus","$","css","handleBlur","handleSubmit","preventDefault","history","handleSubmitLive","currentPlayerCode","e","containerID","displayHomeButton","undefined","playerCards","current","key","clubCards","id","style","display","color","onOutsideClick","onSubmit","type","placeholder","autoComplete","onChange","onFocus","withRouter","LoadingSpinner","Home","getDatabaseSize","databaseSize","Math","max","document","documentElement","clientHeight","window","innerHeight","addClass","toggleNavbar","responsiveNavbar","attr","removeClass","hideNavbar","title","recordPageViewGA","location","pathname","message","onClick","href","rel","toLocaleString","fontWeight","src","mockUps","backgroundColor","Search","searchByClub","processSearchResults","filteredPlayerSearchResults","filterByName","parse","input","normalize","replace","toUpperCase","filterValue","match","params","nextProps","nextContext","searchText","marginTop","cookies","Cookies","colorArrays","alignments","filterStats","stats","selectedCompetitions","playerCode","filteredStats","competition","stat","calculateStats","percentileEntries","percentileSeason","percentileArrays","template","padjTypes","pAdjTypes","selectedSeasons","percentileArrayOccurrences","statsPer90","percentiles","minutesOverNinety","touchesOverHundred","isFinite","calculatePercentileRank","statsKeys","Object","keys","array","occurrences","constructChartInput","statsByPosition","playerName","minutes","isForComparison","index","colors","verticalAlignments","horizontalAlignments","isSecondPlayer","p90_labels","someStats","threeDigitStats","precision","parseFloat","round","toFixed","truncate","percentile_labels","roundedStats","roundNumbers","chartInput","y","p90_label","percentile_label","ordinalSuffix","dataLabels","align","verticalAlign","Highcharts","Color","setOpacity","get","tooltipColor","borderColor","borderWidth","aNumber","j","k","ageRangesString","ageArray","rstart","rend","ranges","changeTemplate","codes","competitions","newTemplate","isOutfieldGK","outfieldGKStats","standardStats","isAnimated","changeSelectedCompetitions","entry","clickedSeason","clickedCompetition","clickedValues","split","isLastCompetition","counter","splice","indexOf","changePAdjTypes","clickedType","set","path","changeLabelType","labelType","toggleCreditsPosition","newPosition","creditsPosition","exportChart","a","showExportLoaderOverlay","renderForExport","values","names","on","setTimeout","node","getElementById","firstExport","domtoimage","toPng","bgcolor","blob","console","log","alert","saveAs","remove","toggleGlossaryOverlay","currentState","showGlossaryOverlay","toggleCompareSearchOverlay","showCompareSearchOverlay","focus","SliceOptions","constructCompetitionLabels","competitionsForms","competitionLabels","multipleClubs","marginBottom","currentCompetition","isIncluded","label","substring","checked","templateOpen","labelTypes","offensive","defensive","isGK","templateLabels","mobileTemplateLabels","position","mobileClassName","disabled","templatesForm","open","trigger","transitionTime","transitionCloseTime","mobileTemplatesForm","playerCompetitions","labelTypeForm","labelTypeLabels","pAdjTypeLabels","pAdjTypeForm","HighchartsMore","NoDataToDisplay","Slice","chartEvents","xAxisLabelDistance","isForExport","statsReference","fontSizes","subtitle","noData","xAxisLabels","dataLabelsOutline","tooltipHeader","tooltip","legend","credits","yAxisLabels","legendTitle","competitionDict","subtitles","load","element","onclick","tooltipPositioner","labelWidth","labelHeight","x","scrollHeight","point","plotX","plotY","creditsText","lastUpdated","chartOptions","useHTML","text","fontSize","margin","pane","startAngle","chart","fontFamily","animation","polar","marginLeft","marginRight","events","zoomType","panning","panKey","xAxis","categories","labels","zIndex","distance","padding","gridLineWidth","gridLineColor","gridZIndex","yAxis","visible","enabled","lineWidth","endOnTick","showFirstLabel","showLastLabel","min","tickPositions","series","plotOptions","duration","isAnimatedInitial","states","hover","textOutline","allowOverlap","z","mouseOut","slice","hide","column","grouping","shadow","hasTooltip","shared","outside","positioner","followPointer","headerFormat","pointFormat","symbolPadding","layout","itemStyle","itemHoverStyle","itemMarginTop","lineHeight","lang","wrap","Axis","prototype","proceed","call","seriesGroup","renderer","g","add","coll","gridGroup","options","afterChartCreated","bind","allItems","legendSymbol","setAttribute","drawLegendBorders","prevProps","prevState","snapshot","allCompetitions","allSeasons","currentSeasonString","currentSeason","allCompetitionsClubDict","selectedCompetitionsClubDict","isSelected","competitionName","competitionClub","url","temp","player1","selectedCompetitionsString","player2","competitionStringParts","ages","selectedStats","Array","fill","map","data","pointPadding","groupPadding","stickyTracking","helpButton","constructorType","highcharts","containerProps","callback","GlossaryOverlay","CompareSearchOverlay","currentPlayerName","LoaderOverlay","Stats","getStats","response","processStats","redirect","newPercentileArrays","updatePercentileArrays","playerData","seasons","fbrefURL","dateFormat","isSafari","pAdjTypesCookie","labelTypeCookie","creditsPositionCookie","calculatedStats","exportSlice","require","Compare","urls","hasOutfieldGKStats","code1","code2","ExplanationOverlay","toggleExplanationOverlay","Option","Select","_","AdvancedSearch","_firstSearchMade","_referenceData","_statsReferenceDataArraySorted","_parametersOriginalState","_baseColumns","selector","minWidth","sortable","sortFunction","rowA","rowB","localeCompare","ignoreRowClick","cell","row","_customStyles","headCells","getReferenceData","referenceData","processReferenceData","statsReferenceDataArray","statsReferenceData","sort","b","displayOrder","filterOptions","parameters","queryParameters","ageReferenceData","minutesReferenceData","aggregateStats","ranges_agg","nationalitiesOptions","countries","toLowerCase","clubsOptions","club","aggregateStatsOptions","statData","types","averageStatsOptions","suffix","averageStats","buildPercentileRankSelectList","leagues","buildClubsSelectList","handleQueryParameters","isEqual","fromQueryString","showSearchLoaderOverlay","percentileRanks","statRanges","tableColumns","displayType","cloneDeep","searchResultsDisplay","buildSearchResultsDisplay","showExplanationOverlay","handleTableButtonClick","handleCardsButtonClick","tableRows","isArray","columns","theme","customStyles","striped","pagination","paginationPerPage","fixedHeader","allowOverflow","overflowY","overflowX","defaultSortAsc","handleSingleSelectChange","oldValue","setQuery","handleIncludeEuropeanCompetitionsClick","includeEuropeanCompetitions","handleRangeSliderChange","handleSelectListAdd","handleSelectListRemove","handleSelectListClear","percentileRankOptions","hasOwnProperty","eligibleClubs","selectedLeagues","clubsReferenceData","handleLookupStatSelectListAdd","parametersKey","rangesKey","handleLookupStatSelectListRemove","handleLookupStatsSelectListClear","resetParameters","parametersOriginalState","tooltipFormatter","seasonOptions","positionsOptions","leaguesOptions","league","displayTypeCookie","createTheme","background","default","aggregateStatSliders","range","step","step_agg","averageStatsSliders","tipFormatter","percentileRanksSliders","val","defaultValue","mode","allowClear","onSelect","onDeselect","onClear","filterOption","option","children","overlayClassName","withQueryParams","JsonParam","isMobileOnly","ReactGA","initialize","createBrowserHistory","listen","action","reload","App","getPercentileArrays","localStorage","setItem","pageview","getItem","exact","render","component"],"mappings":"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","file":"static/js/main.554a843d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/mockups.c413c538.png\";","const leagueNames = {\r\n    \"_england\": \"Premier League\",\r\n    \"es\": \"La Liga\",\r\n    \"it\": \"Serie A\",\r\n    \"de\": \"Bundesliga\",\r\n    \"fr\": \"Ligue 1\"\r\n};\r\n\r\n\r\nexport function getLeaguesDisplay(leagueCodesArray){\r\n\r\n    let leagueNamesArray = leagueCodesArray.map(x => leagueNames[x]);\r\n\r\n    return leagueNamesArray.join(\", \");\r\n\r\n}\r\n\r\n\r\nexport function getMostRecentPositions(positions){\r\n\r\n    let latestPositions = [];\r\n\r\n    let seasons = Object.keys(positions);\r\n\r\n    for (let i=seasons.length-1; i>=0; i--){\r\n        let season = seasons[i];\r\n        let currentSeasonPositions = positions[season];\r\n        latestPositions = (currentSeasonPositions === undefined || currentSeasonPositions.length < 1 || currentSeasonPositions[0] === \"N/A\") ? [\"-\"] : currentSeasonPositions;\r\n        if (latestPositions[0] !== \"-\"){\r\n            break;\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\nexport function getAllEntriesFromObject(object){\r\n\r\n    let allInfo = [];\r\n\r\n    for (let season in object){\r\n\r\n        for (let i=0; i<object[season].length; i++){\r\n\r\n            let value = object[season][i];\r\n\r\n            if (value === \"N/A\")\r\n                value = \"-\";\r\n\r\n            if (allInfo.includes(value))\r\n                allInfo = allInfo.filter(item => item !== value);\r\n\r\n            allInfo.unshift(value)\r\n\r\n        }\r\n\r\n    }\r\n\r\n    if (allInfo.length > 1){\r\n        allInfo = allInfo.filter(item => item !== \"-\");\r\n    }\r\n\r\n    return allInfo;\r\n\r\n\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport Flag from \"react-flags\";\r\nimport { getAllEntriesFromObject } from \"../utilities/SearchResultUtilities\";\r\n\r\n/**\r\n * Component to render a player search result\r\n */\r\nclass PlayerSearchResult extends Component {\r\n\r\n    constructor(props) {\r\n\r\n        super(props);\r\n\r\n        this.isMobile = this.props.isMobile;\r\n\r\n        let season = this.props.season;\r\n\r\n        let clubs = this.props.clubs;\r\n        let positions = this.props.positions;\r\n\r\n        if (season !== null){\r\n            clubs = clubs[season];\r\n            positions = positions[season];\r\n\r\n            if (positions[0] === \"N/A\"){\r\n                positions[0] = \"-\";\r\n            }\r\n        }\r\n\r\n        else {\r\n            clubs = getAllEntriesFromObject(clubs);\r\n            positions = getAllEntriesFromObject(positions);\r\n        }\r\n\r\n        this.state = {\r\n            page: this.props.page,\r\n            forComparison: this.props.forComparison,\r\n            comparisonCode: this.props.comparisonCode,\r\n            code: this.props.code,\r\n            name: this.props.name,\r\n            age: this.props.age,\r\n            clubs: clubs,\r\n            nationalities: this.props.nationalities,\r\n            countryCodes: this.props.countryCodes,\r\n            positions: positions\r\n        };\r\n\r\n    }\r\n\r\n    /**\r\n     * render function\r\n     * @return {*} - JSX code for a player search result\r\n     */\r\n    render() {\r\n\r\n        let {\r\n            page,\r\n            forComparison,\r\n            comparisonCode,\r\n            code,\r\n            name,\r\n            age,\r\n            clubs,\r\n            nationalities,\r\n            countryCodes,\r\n            positions\r\n        } = this.state;\r\n\r\n        let link;\r\n        //set the link to the comparison page if it is a result for a player comparison\r\n        if (forComparison) {\r\n            link = `/compare/${comparisonCode}_${code}`;\r\n        }\r\n        //set the link to the stats page otherwise\r\n        else {\r\n            link = `/stats/${code}`;\r\n        }\r\n\r\n        let flagSizeMultiplier = this.isMobile ? 1.8 : 1;\r\n\r\n        let flagsDisplay = [];\r\n\r\n        for (let i=0; i<countryCodes.length; i++){\r\n\r\n            let countryCode = countryCodes[i];\r\n\r\n            flagsDisplay.push(\r\n                <Flag\r\n                    basePath={\"/flags\"}\r\n                    country={countryCode}\r\n                    format=\"png\"\r\n                    pngSize={32}\r\n                    width={(page === \"live\" ? 20 : 28) * flagSizeMultiplier}\r\n                    height={(page === \"live\" ? 20 : 28) * flagSizeMultiplier}\r\n                    shiny={true}\r\n                    alt={`${nationalities} Flags`}\r\n                />\r\n            )\r\n\r\n        }\r\n\r\n        return (\r\n            <Link to={link}>\r\n                <div tabIndex=\"0\" className=\"search-result\">\r\n                    <div className=\"bio\">\r\n                        <span className=\"name\">{name}</span>\r\n                        <div>\r\n                            {flagsDisplay}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"bio-extra\">\r\n                        <span className=\"club\">{clubs?.join(\", \")}</span>\r\n                        <span className=\"position-age\">{`${age} | ${positions?.join(\", \")}`}</span>\r\n                    </div>\r\n                </div>\r\n            </Link>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default (PlayerSearchResult);\r\n","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport Flag from \"react-flags\";\r\n\r\n\r\n/**\r\n * Component to render a club search result\r\n */\r\nclass ClubSearchResult extends Component {\r\n\r\n    constructor(props) {\r\n\r\n        super(props);\r\n\r\n        this.isMobile = this.props.isMobile;\r\n\r\n        this.state = {\r\n            page: this.props.page,\r\n            name: this.props.name,\r\n            countryCode: this.props.countryCode\r\n        };\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * render function\r\n     * @return {*} - JSX code for a club search result\r\n     */\r\n    render() {\r\n\r\n        let { page, name, countryCode } = this.state;\r\n\r\n        let flagSizeMultiplier = this.isMobile ? 2 : 1;\r\n\r\n        return (\r\n            <Link to={\"/search/\" + name + \"/all\"}>\r\n                <div tabIndex=\"0\" className=\"search-result\">\r\n                    <div className=\"bio\">\r\n                        <span className=\"name\">{name}</span>\r\n                        <Flag\r\n                            basePath={\"/flags\"}\r\n                            country={countryCode}\r\n                            format=\"png\"\r\n                            pngSize={32}\r\n                            width={(page === \"live\" ? 20 : 28) * flagSizeMultiplier}\r\n                            height={(page === \"live\" ? 20 : 28) * flagSizeMultiplier}\r\n                            shiny={true}\r\n                            alt={`${countryCode} Flag`}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </Link>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default (ClubSearchResult);\r\n","import React, { Component } from 'react';\r\nimport { Link, withRouter } from 'react-router-dom';\r\nimport OutsideClickHandler from 'react-outside-click-handler';\r\n\r\n//import components\r\nimport PlayerSearchResult from \"./PlayerSearchResult\";\r\nimport ClubSearchResult from \"./ClubSearchResult\";\r\nimport $ from \"jquery\";\r\n\r\n\r\n/**\r\n * Component to render a div containing a searchbar\r\n * Also handles the live search requests and aborts\r\n */\r\nclass SearchBar extends Component {\r\n\r\n    //class variable to track if the component is mounted\r\n    _isMounted = false;\r\n    _firstRequest = true;\r\n\r\n    constructor(props) {\r\n\r\n        super(props);\r\n\r\n        this.page = this.props.page;\r\n        this.isMobile = this.props.isMobile;\r\n        this.currentPlayerCode = this.props.currentPlayerCode;\r\n        this.liveSearchEnabled = true;\r\n\r\n        //try to create the abort controller for live search requests\r\n        //AbortController is relatively new, so we catch an error and disable live search if it is undefined\r\n        try {\r\n            this.controller = new AbortController();\r\n            // throw new Error(\"ERROR\");\r\n        }\r\n        catch (e) {\r\n            this.liveSearchEnabled = false;\r\n        }\r\n\r\n        //change the searchbar container id based on the page so that the CSS rules modify it accordingly\r\n        this.containerID = \"\";\r\n        switch (this.page) {\r\n            case \"search\":\r\n                this.containerID = \"searchbar-container2\";\r\n                break;\r\n            case \"stats\":\r\n                this.containerID = \"searchbar-container3\";\r\n                break;\r\n            default:\r\n                this.containerID = \"searchbar-container1\";\r\n        }\r\n\r\n        //attach a home button to the searchbar if it is not being displayed on the homepage or the compare dialog\r\n        this.displayHomeButton = 'default';\r\n        if (this.page === \"home\" || this.page === \"compare\"){\r\n            this.displayHomeButton = 'none';\r\n        }\r\n\r\n        this.state = {\r\n            query: this.props.query || \"\",\r\n            isLoading: this.props.query !== undefined,\r\n            error: null,\r\n            liveResultsOpen: false,\r\n            playerSearchResults: [],\r\n            clubSearchResults: [],\r\n        };\r\n\r\n        this.updateLiveSearchResults(this.state.query);\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * Called after component has mounted\r\n     */\r\n    componentDidMount() {\r\n        this._isMounted = true;\r\n    }\r\n\r\n\r\n    /**\r\n     * Function to send a post request to the server to retrieve the search results matching the query\r\n     */\r\n    getSearchResults = (query) => {\r\n\r\n        //create a new abort controller for every request and retrieve its signal\r\n        let signal = null;\r\n        if (this.liveSearchEnabled){\r\n            this.controller = new AbortController();\r\n            signal = this.controller.signal;\r\n        }\r\n\r\n        return new Promise((resolve, reject) => {\r\n            //fetch search results\r\n            //pass signal to the fetch request so it can be cancelled\r\n            //this is done with live searches to cancel the previous request every time a new letter is typed\r\n            fetch('/api/search', {\r\n                signal,\r\n                method: 'post',\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\"\r\n                },\r\n                body: JSON.stringify({\r\n                    \"query\": query,\r\n                    \"type\": \"playersAndClubs\",\r\n                    \"isLive\": true\r\n                })\r\n            })\r\n                .then(res => {\r\n                    if (res.ok) {\r\n                        return res.json()\r\n                    }\r\n                    else {\r\n                        throw new Error(\"Failed to fetch search results. Please refresh the page and try again.\")\r\n                    }\r\n                },\r\n                    () => {\r\n                        reject()\r\n                    })\r\n                .then(searchResults => {\r\n                    resolve(searchResults);\r\n                })\r\n                .catch(error => {\r\n                    reject(error);\r\n                });\r\n        })\r\n\r\n    };\r\n\r\n\r\n    /**\r\n     * Called just before the component un-mounts\r\n     */\r\n    componentWillUnmount() {\r\n        this._isMounted = false;\r\n    }\r\n\r\n\r\n    /**\r\n     * Function to handle an input to the searchbar if live search is NOT enabled\r\n     * Updates searchbar input value\r\n     * @param {Object} event - the input event from the searchbar input\r\n     */\r\n    handleChange = (event) => {\r\n\r\n        this.setState({\r\n            query: event.target.value,\r\n        });\r\n\r\n    };\r\n\r\n\r\n    /**\r\n     * Function to handle an input to the searchbar if live search is enabled\r\n     * Updates searchbar input value, fetches search results and sets state\r\n     * @param {Object} event - the input event from the searchbar input\r\n     */\r\n    handleChangeLive = (event) => {\r\n\r\n        let query = event.target.value;\r\n\r\n        //cancel previous request if it's not the first request\r\n        if (this._firstRequest){\r\n            this._firstRequest = false;\r\n        }\r\n        else {\r\n            this.controller.abort();\r\n        }\r\n\r\n        //set searchbar input value and open live search results container\r\n        this.setState({\r\n            query: query,\r\n            liveResultsOpen: query.length > 0,\r\n            isLoading: true\r\n        });\r\n\r\n        this.updateLiveSearchResults(query);\r\n\r\n    };\r\n\r\n\r\n    /**\r\n     * Function to update the arrays of search results\r\n     * Also handles the display of the loading spinner and error messages (if applicable) in the live container\r\n     */\r\n    updateLiveSearchResults = (query) => {\r\n\r\n        if (query.length > 0){\r\n            this.getSearchResults(query)\r\n                .then((searchResults) => {\r\n                    let playerSearchResults = searchResults['playerSearchResults'];\r\n                    let clubSearchResults = searchResults['clubSearchResults'];\r\n                    if (this._isMounted){\r\n                        this.setState({\r\n                            playerSearchResults: [],\r\n                            clubSearchResults: []\r\n                        }, () => {\r\n                            this.setState({\r\n                                playerSearchResults: playerSearchResults,\r\n                                clubSearchResults: clubSearchResults,\r\n                                error: null,\r\n                                isLoading: false\r\n                            })\r\n                        })\r\n                    }\r\n                }, (error) => {\r\n                    if (this._isMounted){\r\n                        if (error){\r\n                            this.setState({\r\n                                error: error,\r\n                                isLoading: false\r\n                            })\r\n                        }\r\n                    }\r\n                })\r\n        }\r\n        else {\r\n            if (this._isMounted){\r\n                this.setState({\r\n                    error: null,\r\n                    isLoading: false,\r\n                    playerSearchResults: [],\r\n                    clubSearchResults: []\r\n                })\r\n            }\r\n        }\r\n\r\n    };\r\n\r\n\r\n    /**\r\n     * Function to handle the searchbar being focused\r\n     * Displays the live search results on focus\r\n     * @param {Object} event - the focus event from the searchbar input\r\n     */\r\n    handleFocus = (event) => {\r\n\r\n        let query = event.target.value;\r\n        if (this.isMobile && this.page === \"home\"){\r\n            $(\"#searchbar-container1\").css({\r\n                \"position\": \"fixed\",\r\n                \"top\": 0,\r\n                \"left\": 0,\r\n                \"width\": \"100%\",\r\n                \"z-index\": 7\r\n            });\r\n\r\n            $(\"h1\").css({\r\n                \"display\": \"none\"\r\n            });\r\n\r\n            $(\"#lucky-button\").css({\r\n                \"display\": \"none\"\r\n            });\r\n        }\r\n        this.setState({\r\n            liveResultsOpen: this.liveSearchEnabled && query.length > 0\r\n        })\r\n\r\n    };\r\n\r\n    /**\r\n     * Function to handle the searchbar being blurred (un-focused)\r\n     * hides the live search results\r\n     */\r\n    handleBlur = () => {\r\n\r\n        if (this.isMobile && this.page === \"home\"){\r\n            $(\"#searchbar-container1\").css({\r\n                \"position\": \"relative\",\r\n                \"width\": '75%',\r\n                \"z-index\": 1\r\n            });\r\n\r\n            $(\"h1\").css({\r\n                \"display\": \"block\"\r\n            });\r\n\r\n            $(\"#lucky-button\").css({\r\n                \"display\": \"block\"\r\n            });\r\n\r\n        }\r\n\r\n        this.setState({\r\n            liveResultsOpen: false\r\n        })\r\n\r\n    };\r\n\r\n\r\n    /**\r\n     * Function to handle submit events from the searchbar input if live search is NOT enabled\r\n     * Redirects to the search URL with the correct URL params\r\n     * @param {Object} event - the submit event from the searchbar input\r\n     */\r\n    handleSubmit = (event) => {\r\n\r\n        event.preventDefault();\r\n\r\n        if (this.page !== \"compare\"){\r\n            this.props.history.push('/search/' + this.state.query);\r\n        }\r\n        else {\r\n\r\n            let query = this.state.query;\r\n\r\n            //open live search results container\r\n            this.setState({\r\n                liveResultsOpen: query.length > 0,\r\n                isLoading: true\r\n            });\r\n\r\n            this.updateLiveSearchResults(query);\r\n\r\n        }\r\n\r\n    };\r\n\r\n\r\n    /**\r\n     * Function to handle submit events from the searchbar input if live search is enabled\r\n     * Redirects to the search URL with the correct URL params\r\n     * @param {Object} event - the submit event from the searchbar input\r\n     */\r\n    handleSubmitLive = (event) => {\r\n\r\n        event.preventDefault();\r\n\r\n        if (this.page !== \"compare\"){\r\n            this.props.history.push('/search/' + this.state.query);\r\n        }\r\n\r\n    };\r\n\r\n\r\n    /**\r\n     * render function\r\n     * modifies searchbar based on the page it is to be displayed on\r\n     * @return {*} - JSX code for the searchbar and its container\r\n     */\r\n    render() {\r\n\r\n        const {\r\n            query,\r\n            isLoading,\r\n            liveResultsOpen,\r\n            playerSearchResults,\r\n            clubSearchResults\r\n        } = this.state;\r\n\r\n        //construct the player cards\r\n        let playerCards = [];\r\n        for (let i=0; i<playerSearchResults.length; i++){\r\n            let current = playerSearchResults[i];\r\n            playerCards.push(\r\n                <PlayerSearchResult\r\n                    isMobile={this.isMobile}\r\n                    page=\"live\"\r\n                    forComparison={this.page === \"compare\"}\r\n                    comparisonCode={this.currentPlayerCode}\r\n                    code={current.code}\r\n                    name={current.name}\r\n                    age={current.age}\r\n                    season={null}\r\n                    clubs={current.clubs}\r\n                    nationalities={current.nationalities}\r\n                    countryCodes={current.countryCodes}\r\n                    positions={current.positions}\r\n                    key={i}\r\n                />\r\n            );\r\n        }\r\n\r\n        //construct the club cards\r\n        let clubCards = [];\r\n        for (let i=0; i<clubSearchResults.length; i++){\r\n            let current = clubSearchResults[i];\r\n            clubCards.push(\r\n                <ClubSearchResult\r\n                    isMobile={this.isMobile}\r\n                    page=\"live\"\r\n                    name={current.name}\r\n                    countryCode={current.countryCode}\r\n                    key={i}\r\n                />\r\n            )\r\n        }\r\n\r\n        //return JSX code for the searchbar\r\n        return (\r\n            <div className=\"searchbar-container\" id={this.containerID}>\r\n                <Link id=\"home-button\" to={'/'}>\r\n                    <div style={{display: this.displayHomeButton}}>\r\n                        <div>\r\n                            Football\r\n                            <span style={{color: '#e4c000', display: 'block'}}>\r\n                                Slices\r\n                                <span style={{color: 'black'}}>.com</span>\r\n                            </span>\r\n                        </div>\r\n                    </div>\r\n                </Link>\r\n                <OutsideClickHandler\r\n                    onOutsideClick={this.handleBlur}\r\n                >\r\n                    <form id=\"searchbar-form\" onSubmit={this.liveSearchEnabled ? this.handleSubmitLive : this.handleSubmit}>\r\n                        <input\r\n                            type=\"text\"\r\n                            id=\"searchbar-input\"\r\n                            value={query}\r\n                            placeholder={this.page === \"compare\" ? \"Search for players...\" : \"Search for players, clubs...\"}\r\n                            autoComplete=\"off\"\r\n                            onChange={this.liveSearchEnabled ? this.handleChangeLive : this.handleChange}\r\n                            onFocus={this.handleFocus}\r\n                        />\r\n                        <div id=\"live-search-results\" style={{display: liveResultsOpen ? 'block' : 'none'}}>\r\n                            <div id=\"live-search-loader\">\r\n                                <div style={{display: isLoading ? 'block' : 'none'}} className=\"loader\">\r\n                                    Loading...\r\n                                </div>\r\n                            </div>\r\n                            <div>\r\n                                <div>\r\n                                    <h3>Players</h3>\r\n                                    {playerCards}\r\n                                    {playerCards.length === 0 ? <p>{isLoading ? \"...\" : \" No results found\"}</p> : null}\r\n                                </div>\r\n                                <div style={{display: this.page === \"compare\" ? 'none' : 'block'}}>\r\n                                    <h3>Clubs</h3>\r\n                                    {clubCards}\r\n                                    {clubCards.length === 0 ? <p>{isLoading ? \"...\" : \" No results found\"}</p> : null}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </form>\r\n                </OutsideClickHandler>\r\n            </div>\r\n\r\n        );\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default withRouter (SearchBar);\r\n","import React, { Component } from 'react';\r\n\r\n\r\n/**\r\n * Renders a pure CSS loading spinner\r\n * taken from: https://projects.lukehaas.me/css-loaders/\r\n */\r\nclass LoadingSpinner extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"main\">\r\n                <div className=\"screen\" id=\"loading-screen\">\r\n                    <div className=\"loader\">Loading...</div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\nexport default (LoadingSpinner);\r\n","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport OutsideClickHandler from 'react-outside-click-handler';\r\nimport $ from \"jquery\";\r\n\r\n//import components\r\nimport SearchBar from \"../components/SearchBar\"\r\nimport LoadingSpinner from \"../components/LoadingSpinner\";\r\n\r\n//import assets\r\nimport mockUps from \"../assets/mockups.png\"\r\n\r\n\r\n/**\r\n * Homepage component\r\n */\r\nclass Home extends Component {\r\n\r\n    //class variable to track if the component is mounted\r\n    _isMounted = false;\r\n\r\n    /**\r\n     * Constructor\r\n     * @param props\r\n     */\r\n    constructor(props) {\r\n\r\n        super(props);\r\n\r\n        this.isMobile = this.props.isMobile;\r\n\r\n        this.state = {\r\n            isLoading: true,\r\n            error: null,\r\n            databaseSize: 0,\r\n        };\r\n        this.getDatabaseSize();\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * Called after component has mounted\r\n     */\r\n    componentDidMount() {\r\n        this._isMounted = true;\r\n        document.title = \"Home | Football Slices\";\r\n        this.props.recordPageViewGA(window.location.pathname);\r\n    }\r\n\r\n\r\n    /**\r\n     * Function to send a post request to the server to retrieve the number of players currently in the database\r\n     */\r\n    getDatabaseSize = () => {\r\n\r\n        //fetch sample players\r\n        fetch('/api/databaseSize', {\r\n            method: 'post',\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify({})\r\n        })\r\n        .then(res => res.json())\r\n        .then(databaseSize => {\r\n            //only set state if the component is mounter\r\n            if (this._isMounted){\r\n                this.setState({databaseSize: databaseSize.value, isLoading: false});\r\n                //hard code the height of home and the navbar container if it is a mobile device\r\n                //this is done because the soft keyboards on mobile devices affect the view-height\r\n                if (this.isMobile){\r\n                    let height = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);\r\n                    $(\"#home\").css({\"height\": height});\r\n                }\r\n                //add preload class to the hidden menu to disable the first animation\r\n                $(\"#navbar-hidden\").addClass('preload');\r\n            }\r\n        })\r\n        .catch(error => {\r\n            if (this._isMounted){\r\n                this.setState({\r\n                    error: error,\r\n                    isLoading: false\r\n                })\r\n            }\r\n        });\r\n\r\n    };\r\n\r\n\r\n    /**\r\n     * Called just before the component un-mounts\r\n     */\r\n    componentWillUnmount() {\r\n        this._isMounted = false;\r\n    }\r\n\r\n\r\n    /**\r\n     * Function to display/hide the responsive navbar\r\n     */\r\n    toggleNavbar = () => {\r\n\r\n        //select the responsive navbar element\r\n        let responsiveNavbar = $(\".responsive-navbar\");\r\n\r\n        //expand or hide based on current state\r\n        if (responsiveNavbar.attr(\"id\") === \"navbar-hidden\"){\r\n            responsiveNavbar.attr(\"id\", \"navbar-expanded\");\r\n        }\r\n        else {\r\n            //remove preload class when expanding to re-enable animations\r\n            $(\"#navbar-expanded\").removeClass('preload');\r\n            responsiveNavbar.attr(\"id\", \"navbar-hidden\");\r\n        }\r\n\r\n    };\r\n\r\n\r\n    /**\r\n     * Function to hide the navbar (called after one of the menu options is clicked)\r\n     */\r\n    hideNavbar = () => {\r\n\r\n        $(\"#navbar-expanded\").removeClass('preload');\r\n        $(\".responsive-navbar\").attr(\"id\", \"navbar-hidden\");\r\n\r\n    };\r\n\r\n\r\n    /**\r\n     * render function\r\n     * @return {*} - JSX code for the homepage\r\n     */\r\n    render() {\r\n\r\n        let { isLoading, error, databaseSize } = this.state;\r\n\r\n        //display loading spinner while the server responds to POST request for the sample players\r\n        if (isLoading) {\r\n            return (\r\n                <LoadingSpinner/>\r\n            )\r\n        }\r\n\r\n        //display the error message screen if an error is caught\r\n        else if (error !== null) {\r\n            return (\r\n                <div id=\"main2\">\r\n                    <SearchBar\r\n                        isMobile={this.isMobile}\r\n                        page=\"home\"\r\n                    />\r\n                    <div className=\"screen\" id=\"error-screen\">\r\n                        <p>{error.message}</p>\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n\r\n        //return homepage code otherwise\r\n        else {\r\n\r\n            // //construct the sample player buttons\r\n            // let samplePlayerButton = [];\r\n            // for (let i=0; i<samplePlayers.length; i++){\r\n            //     let current = samplePlayers[i];\r\n            //     samplePlayerButton.push(\r\n            //         <PlayerSearchResult\r\n            //             page = \"home\"\r\n            //             code = {current.code}\r\n            //             name = {current.name}\r\n            //             clubs = {current.clubs}\r\n            //             nationality = {current.nationality}\r\n            //             key = {i}\r\n            //         />\r\n            //     );\r\n            // }\r\n\r\n            //static JSX code for the homepage\r\n            return (\r\n                <div id=\"homepage\">\r\n                    <OutsideClickHandler\r\n                        onOutsideClick={this.hideNavbar}\r\n                    >\r\n                        <div id=\"navbar-container\">\r\n                            <div className=\"navbar\" id=\"navbar-normal\">\r\n                                <a onClick={this.hideNavbar} href=\"#home\">\r\n                                    <div>Home</div>\r\n                                </a>\r\n                                <a href=\"#about\">\r\n                                    <div>About</div>\r\n                                </a>\r\n                                <a href=\"#glossary\">\r\n                                    <div>Glossary</div>\r\n                                </a>\r\n                                <a href=\"#faq\">\r\n                                    <div>F.A.Q.</div>\r\n                                </a>\r\n                                <a href=\"#contact\">\r\n                                    <div>Contact</div>\r\n                                </a>\r\n                                <button onClick={this.toggleNavbar} id=\"burger-icon-container\">\r\n                                    <div id=\"burgerIcon\"><i className=\"fa fa-bars\"/></div>\r\n                                </button>\r\n                            </div>\r\n                            <div className=\"navbar responsive-navbar\" id=\"navbar-hidden\">\r\n                                <a onClick={this.hideNavbar} href=\"#about\">\r\n                                    <div>About</div>\r\n                                </a>\r\n                                <a onClick={this.hideNavbar} href=\"#glossary\">\r\n                                    <div>Glossary</div>\r\n                                </a>\r\n                                <a onClick={this.hideNavbar} href=\"#faq\">\r\n                                    <div>F.A.Q.</div>\r\n                                </a>\r\n                                <a onClick={this.hideNavbar} href=\"#contact\">\r\n                                    <div>Contact</div>\r\n                                </a>\r\n                            </div>\r\n                        </div>\r\n                    </OutsideClickHandler>\r\n                    <div id=\"home\">\r\n                        <h1>Football<span style={{color: '#e4c000'}}>Slices</span></h1>\r\n                        <SearchBar\r\n                            isMobile={this.isMobile}\r\n                            page=\"home\"\r\n                        />\r\n                        <br/>\r\n                        <br/>\r\n                        <br/>\r\n                        <Link to={\"/advancedSearch\"}>\r\n                            <button id=\"lucky-button\">\r\n                                Advanced Search\r\n                            </button>\r\n                        </Link>\r\n                    </div>\r\n                    <div id=\"about\" className=\"homepage-section-container centered-section\">\r\n                        <div id=\"about-section-container\">\r\n                            <div id=\"about-text\">\r\n                                <h2>About</h2>\r\n                                <p>\r\n                                    Football Slices is a stats visualization tool powered\r\n                                    by <a href=\"https://www.highcharts.com\" target=\"_blank\" rel=\"noopener noreferrer\">Highcharts.js</a>,\r\n                                    and adapted from <a href=\"https://projects.fivethirtyeight.com/world-cup-comparisons/\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                                    FiveThirtyEight's World Cup player profiles.</a>\r\n                                </p>\r\n                                <p>\r\n                                    It is built on a database of <b>{databaseSize.toLocaleString()} players</b> from <b>Europe's top 5 leagues</b>,\r\n                                    with stats from the <b>2018/19 season onwards</b>.\r\n                                </p>\r\n                                <p>\r\n                                    Football Slices is made possible by the incredible work done by the people over\r\n                                    at <a href=\"https://www.fbref.com\" target=\"_blank\" rel=\"noopener noreferrer\">FBref.com</a>,\r\n                                    who provide advanced stats courtesy of <a href=\"https://www.statsbomb.com\" target=\"_blank\" rel=\"noopener noreferrer\">StatsBomb</a>.\r\n                                    Every chart title has a link to the player's page on FBref, where you can find that player's\r\n                                    complete stats sheet. Please do make sure to check out FBref and spread the word about\r\n                                    them if you'd like to see them continue adding more data to their site.\r\n                                </p>\r\n                                <br/>\r\n                                <p><span className=\"accented-p\">Interpreting the Slices</span></p>\r\n                                <p>\r\n                                    A Football Slice is made up of a number of wedges (12 for outfield players, 3 for goalkeepers),\r\n                                    each representing a relevant stat. The length of each wedge corresponds to the\r\n                                    selected player's percentile rank for the stat when they are compared to top-5 league\r\n                                    players who play in a similar position.\r\n                                </p>\r\n                                <p>\r\n                                    The colours help to group similar-ish stats together (as well as improve the charts'\r\n                                    visual impact).\r\n                                </p>\r\n                                <ul>\r\n                                    <li><span style={{color: '#f15c80', fontWeight: 'bold'}}>Red</span> is for goal-scoring & shooting stats,</li>\r\n                                    <li><span style={{color: '#e4c000', fontWeight: 'bold'}}>Yellow</span> is for passing, chance creation & ball progression</li>\r\n                                    <li><span style={{color: '#87e179', fontWeight: 'bold'}}>Green</span> is for dribbling & ball retention</li>\r\n                                    <li><span style={{color: '#7db9f0', fontWeight: 'bold'}}>Blue</span> is for defending</li>\r\n                                    <li>and <span style={{color: '#787ccd', fontWeight: 'bold'}}>Purple</span> is for goalkeeping stats</li>\r\n                                </ul>\r\n                            </div>\r\n                            <div id=\"about-image\">\r\n                                <img src={mockUps} alt=\"Mock-ups\"/>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div id=\"glossary\" style={{backgroundColor: '#f5f6f7'}} className=\"homepage-section-container centered-section\">\r\n                        <div id=\"glossary-section-container\">\r\n                            <h2>Glossary</h2>\r\n                            <ul>\r\n                                <li>\r\n                                    <span style={{color: '#f15c80', fontWeight: 'bold'}}>Non-Penalty Goal</span>&nbsp;\r\n                                    A goal that did not stem directly from a penalty kick.\r\n                                </li>\r\n                                <li>\r\n                                    <span style={{color: '#f15c80', fontWeight: 'bold'}}>Non-Penalty xG (Expected Goals)</span>&nbsp;\r\n                                    Expected goals that did not stem directly from penalty kicks.*\r\n                                </li>\r\n                                <li>\r\n                                    <span style={{color: '#f15c80', fontWeight: 'bold'}}>Non-Penalty xG/Shot</span>&nbsp;\r\n                                    The average expected goal value of shots taken, excluding penalty kicks.\r\n                                </li>\r\n                                <li>\r\n                                    <span style={{color: '#f15c80', fontWeight: 'bold'}}>Aerial Win</span>&nbsp;\r\n                                    Winning the ball in a duel that was challenged in the air.\r\n                                </li>\r\n                                <li>\r\n                                    <span style={{color: '#f15c80', fontWeight: 'bold'}}>Aerial Win %</span>&nbsp;\r\n                                    The percentage of aerials duels contested that were won.\r\n                                </li>\r\n                                <li>\r\n                                    <span style={{color: '#e4c000', fontWeight: 'bold'}}>Touch in Box</span>&nbsp;\r\n                                    Having possession of the ball in the opposition's penalty area.\r\n                                    (Note: Receiving a pass, then dribbling, then sending a pass counts as one touch)\r\n                                </li>\r\n                                <li>\r\n                                    <span style={{color: '#e4c000', fontWeight: 'bold'}}>xA (Expected Assists)</span>&nbsp;\r\n                                    Expected goals that resulted from a player's shot assists, including set pieces.*\r\n                                </li>\r\n                                <li>\r\n                                    <span style={{color: '#e4c000', fontWeight: 'bold'}}>OP (Open Play) Shot-Creating Action</span>&nbsp;\r\n                                    Excluding set pieces, one of the last two offensive actions that directly\r\n                                    led to a shot; such as a pass, dribble or a drawn foul.\r\n                                    (Note: A single player can receive credit for multiple actions and the shot-taker can also receive credit)\r\n                                </li>\r\n                                <li>\r\n                                    <span style={{color: '#e4c000', fontWeight: 'bold'}}>Pass into Box</span>&nbsp;\r\n                                    A completed pass that entered the opposition's penalty area, excluding set pieces.\r\n                                </li>\r\n                                <li>\r\n                                    <span style={{color: '#e4c000', fontWeight: 'bold'}}>Pass into Final 1/3</span>&nbsp;\r\n                                    A completed pass that entered the third of the pitch that is closest to the opposition's goal, excluding set pieces.\r\n                                </li>\r\n                                <li>\r\n                                    <span style={{color: '#e4c000', fontWeight: 'bold'}}>Yards Progressed</span>&nbsp;\r\n                                    Distance, in yards, that the ball was moved towards the oppositions's goal\r\n                                    with passes and carries.\r\n                                    (Note: Passes and carries away from the oppositions's goal are counted as zero progressive yards)\r\n                                </li>\r\n                                <li>\r\n                                    <span style={{color: '#e4c000', fontWeight: 'bold'}}>Pass Completion %</span>&nbsp;\r\n                                    The percentage of attempted passes that successfully found a teammate.\r\n                                </li>\r\n                                <li>\r\n                                    <span style={{color: '#e4c000', fontWeight: 'bold'}}>Long Pass Completion %</span>&nbsp;\r\n                                    The percentage of attempted passes of 25 yards or more that successfully found a teammate.\r\n                                </li>\r\n                                <li>\r\n                                    <span style={{color: '#e4c000', fontWeight: 'bold'}}>Launched Pass Completion %</span>&nbsp;\r\n                                    The percentage of attempted passes of 40 yards or more that successfully found a teammate, including goal kicks.\r\n                                </li>\r\n                                <li>\r\n                                    <span style={{color: '#87e179', fontWeight: 'bold'}}>Successful Dribble</span>&nbsp;\r\n                                    A successful attempt at taking on a player and making it past them whilst retaining possession.\r\n                                </li>\r\n                                <li>\r\n                                    <span style={{color: '#87e179', fontWeight: 'bold'}}>Dribble Success %</span>&nbsp;\r\n                                    The percentage of attempted dribbles that were successful.\r\n                                </li>\r\n                                <li>\r\n                                    <span style={{color: '#87e179', fontWeight: 'bold'}}>Turnover</span>&nbsp;\r\n                                    A miscontrol, or being tackled by an opponent and losing possession of the ball without attempting a dribble.\r\n                                </li>\r\n                                <li>\r\n                                    <span style={{color: '#7db9f0', fontWeight: 'bold'}}>pAdj</span>&nbsp;\r\n                                    Possession Adjusted (using the StatsBomb sigmoid function).**\r\n                                </li>\r\n                                <li>\r\n                                    <span style={{color: '#7db9f0', fontWeight: 'bold'}}>Successful Pressure</span>&nbsp;\r\n                                    A pressing action that led to the team regaining possession within the next 5 seconds.\r\n                                </li>\r\n                                <li>\r\n                                    <span style={{color: '#7db9f0', fontWeight: 'bold'}}>Interception</span>&nbsp;\r\n                                    A prevention of an opponent's pass from reaching another opponent by moving into the line of the pass.\r\n                                </li>\r\n                                <li>\r\n                                    <span style={{color: '#7db9f0', fontWeight: 'bold'}}>Successful Tackle</span>&nbsp;\r\n                                    A successful dispossession of an opponent (whether the tackler's team won possession of the ball or not).\r\n                                </li>\r\n                                <li>\r\n                                    <span style={{color: '#7db9f0', fontWeight: 'bold'}}>Tackle/Dribbled Past %</span>&nbsp;\r\n                                    The percentage of dribblers faced that were tackled.\r\n                                </li>\r\n                                <li>\r\n                                    <span style={{color: '#7db9f0', fontWeight: 'bold'}}>Aerial Win</span>&nbsp;\r\n                                    Winning the ball in a duel that was challenged in the air.\r\n                                </li>\r\n                                <li>\r\n                                    <span style={{color: '#7db9f0', fontWeight: 'bold'}}>Aerial Win %</span>&nbsp;\r\n                                    The percentage of aerials duels contested that were won.\r\n                                </li>\r\n                                <li>\r\n                                    <span style={{color: '#7db9f0', fontWeight: 'bold'}}>Clearance</span>&nbsp;\r\n                                    An action where a player kicked/headed the ball away from their own goal.\r\n                                </li>\r\n                                <li>\r\n                                    <span style={{color: '#787ccd', fontWeight: 'bold'}}>GSAA (Goals Saved Above Average) %</span>&nbsp;\r\n                                    (Post-Shot xG − Goals Conceded (excluding own goals)) ÷ Shots on Target Faced.***\r\n                                </li>\r\n                                <li>\r\n                                    <span style={{color: '#787ccd', fontWeight: 'bold'}}>Cross Stopping %</span>&nbsp;\r\n                                    The percentage of attempted crosses into the penalty area that were stopped by the goalkeeper.\r\n                                </li>\r\n                            </ul>\r\n                            <div id=\"glossary-links\">\r\n                                <span>\r\n                                    * <a href=\"https://fbref.com/en/expected-goals-model-explained/\" target=\"_blank\" rel=\"noopener noreferrer\">Expected goals/assists model explanation</a>\r\n                                </span>\r\n                                <span>\r\n                                    ** <a href=\"https://statsbomb.com/2014/06/introducing-possession-adjusted-player-stats/\" target=\"_blank\" rel=\"noopener noreferrer\">Possession adjustment explanation</a>\r\n                                </span>\r\n                                <span>\r\n                                    *** <a href=\"https://statsbomb.com/2018/12/introducing-goalkeeper-radars/\" target=\"_blank\" rel=\"noopener noreferrer\">GSAA % explanation</a>\r\n                                </span>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div id=\"faq\" className=\"homepage-section-container centered-section\">\r\n                        <div id=\"faq-section-container\">\r\n                            <h2>F.A.Q.</h2>\r\n                            <div id=\"faq-container\">\r\n                                <div className=\"faq-item\">\r\n                                    <p><span className=\"accented-p\">Where does the data come from?</span></p>\r\n                                    <p>\r\n                                        All stats are from <a href=\"https://www.fbref.com\" target=\"_blank\" rel=\"noopener noreferrer\">FBref.com</a>,\r\n                                        who provide advanced stats courtesy of <a href=\"https://www.statsbomb.com\" target=\"_blank\" rel=\"noopener noreferrer\">StatsBomb</a>.\r\n                                        The metadata is from <a href=\"https://www.whoscored.com\" target=\"_blank\" rel=\"noopener noreferrer\">WhoScored.com</a>.\r\n                                    </p>\r\n                                </div>\r\n                                <div className=\"faq-item\">\r\n                                    <p><span className=\"accented-p\">Who's included in the database? How often is it updated?</span></p>\r\n                                    <p>\r\n                                        The database includes all top 5 league players who've made 4 or more league appearances\r\n                                        in any of the covered seasons. It is updated about once a week.\r\n                                    </p>\r\n                                </div>\r\n                                <div className=\"faq-item\">\r\n                                    <p><span className=\"accented-p\">How are the percentile ranks calculated?</span></p>\r\n                                    <p>\r\n                                        The percentile rank of a score is the percentage of scores within a dataset\r\n                                        that are equal to or lower than the score. This is reversed for stats where\r\n                                        a lower value is better, such as 'turnovers'.\r\n                                    </p>\r\n                                    <p>\r\n                                        The percentile ranks for FootballSlices are position-specific. For example,\r\n                                        selecting the 'forward' template compares the selected player only to other forwards in the\r\n                                        database. The percentile ranks are also season-specific. For example, selecting competitions\r\n                                        from the 2018/19 season will only compare the selected player to the 2018/19 dataset. Selecting\r\n                                        competitions from multiple seasons will compare the selected player to the combined dataset.\r\n                                    </p>\r\n                                    <p>\r\n                                        However, please note that the percentile ranks are not competition-specific. In other words,\r\n                                        the selected player's stats are always compared to other players' stats from all competitions, regardless\r\n                                        of which competitions are toggled for the selected player.\r\n                                    </p>\r\n                                </div>\r\n                                <div className=\"faq-item\">\r\n                                    <p><span className=\"accented-p\">How are the possession-adjusted stats calculated?</span></p>\r\n                                    <p>\r\n                                        Possession-adjusted offensive stats are obtained by calculating the number of times\r\n                                        a player completes an action for every 100 touches of the ball they have.\r\n                                    </p>\r\n                                    <p>\r\n                                        Defensive stats are adjusted for possession using the StatsBomb sigmoid function,\r\n                                        which you can read more about <a href=\"https://statsbomb.com/2014/06/introducing-possession-adjusted-player-stats/\"\r\n                                                                    target=\"_blank\" rel=\"noopener noreferrer\">here</a>.\r\n                                        Each player's stats for a particular competition are adjusted based on their team's\r\n                                        average possession during said competition.\r\n                                    </p>\r\n                                    <p>\r\n                                        Ideally, a player's stats should be adjusted based on the possession\r\n                                        stats from only the games they played in. However, I don't have access to that\r\n                                        data and so I used the next best thing; which is the team's average possession\r\n                                        across all games in the competition.\r\n                                    </p>\r\n                                </div>\r\n                                <div className=\"faq-item\">\r\n                                    <p><span className=\"accented-p\">How are the player positions decided?</span></p>\r\n                                    <p>\r\n                                        Position data is obtained using the 'detailed' tab of the <a href=\"https://whoscored.com/Statistics\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                                        WhoScored.com player statistics table</a> to find all players who've made 10 or more\r\n                                        league starts in each of the template positions during a particular season.\r\n                                    </p>\r\n                                </div>\r\n                                <div className=\"faq-item\">\r\n                                    <p><span className=\"accented-p\">\r\n                                        Will the database be expanded to include seasons before 2018/19 and players outside the top 5 leagues?\r\n                                    </span></p>\r\n                                    <p>\r\n                                        Probably not. At present, <a href=\"https://www.fbref.com\" target=\"_blank\" rel=\"noopener noreferrer\">FBref.com</a>'s advanced stats\r\n                                        are only available for a few seasons and leagues.\r\n                                    </p>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div id=\"contact\" style={{backgroundColor: '#f5f6f7'}} className=\"homepage-section-container\">\r\n                        <div id=\"contact-section-container\">\r\n                            <h2>Contact</h2>\r\n                            <p>\r\n                                For any bug reports, suggestions or questions, please feel free to reach out to me\r\n                                at either of the following:\r\n                            </p>\r\n                            <ul>\r\n                                <li>Twitter: <a href=\"https://twitter.com/FootballSlices\" target=\"_blank\" rel=\"noopener noreferrer\">@FootballSlices</a></li>\r\n                                <li>Email: <a href=\"mailto:footballslices@gmail.com\" target=\"_blank\" rel=\"noopener noreferrer\">FootballSlices@gmail.com</a></li>\r\n                            </ul>\r\n                            <p>\r\n                                Note: Football Slices is a hobby project created and maintained\r\n                                by Ham (<a href=\"https://twitter.com/DyslexicDdue\" target=\"_blank\" rel=\"noopener noreferrer\">@DyslexicDdue</a>).\r\n                                I try to implement as many suggested features as I can, but unfortunately, I can't\r\n                                guarantee that I'll get to everything.\r\n                            </p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default Home;\r\n","import React, { Component } from 'react';\r\n\r\n//import components\r\nimport LoadingSpinner from \"../components/LoadingSpinner\";\r\nimport SearchBar from \"../components/SearchBar\";\r\nimport PlayerSearchResult from \"../components/PlayerSearchResult\";\r\nimport ClubSearchResult from \"../components/ClubSearchResult\";\r\n\r\n\r\n/**\r\n * Search page component\r\n */\r\nclass Search extends Component {\r\n\r\n    //class variable to track if the component is mounted\r\n    _isMounted = false;\r\n\r\n    /**\r\n     * Constructor\r\n     * @param props\r\n     */\r\n    constructor(props){\r\n\r\n        super(props);\r\n\r\n        this.isMobile = this.props.isMobile;\r\n\r\n        this.state = {\r\n            isLoading: true,\r\n            error: null,\r\n            query: props.match.params.query,\r\n            searchByClub: props.match.params.searchByClub,\r\n            playerSearchResults: [],\r\n            filteredPlayerSearchResults: [],\r\n            clubSearchResults: [],\r\n            filterValue: \"\"\r\n        };\r\n\r\n        this.getSearchResults();\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * Called after component has mounted\r\n     */\r\n    componentDidMount() {\r\n        this._isMounted = true;\r\n    }\r\n\r\n\r\n    /**\r\n     * Called just before the component receives new props. This is done to ensure that new props trigger a setState()\r\n     * @param nextProps\r\n     * @param nextContext\r\n     */\r\n    //TODO: re-factor because componentWillReceiveProps has been deprecated\r\n    UNSAFE_componentWillReceiveProps(nextProps, nextContext) {\r\n\r\n        let { query, searchByClub } = nextProps.match.params;\r\n\r\n        this.setState({\r\n            isLoading: true,\r\n            query: query,\r\n            searchByClub: searchByClub\r\n        }, () => {\r\n            this.getSearchResults();\r\n        });\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * Function to send a post request to the server to retrieve the search results matching the query\r\n     */\r\n    getSearchResults = () => {\r\n\r\n        let searchByClub = this.state.searchByClub;\r\n        let type = searchByClub === undefined ? \"playersAndClubs\" : \"playersByClub\";\r\n\r\n        //retrieve search results\r\n        fetch('/api/search', {\r\n            method: 'post',\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify({\r\n                \"query\": this.state.query,\r\n                \"type\": type\r\n            })\r\n        })\r\n        .then(res => {\r\n            if (res.ok) {\r\n                return res.json()\r\n            }\r\n            else {\r\n               throw new Error(\"Failed to fetch search results. Please refresh the page and try again.\")\r\n            }\r\n        })\r\n        .then(searchResults => this.processSearchResults(searchResults))\r\n        .catch(error => {\r\n            if (this._isMounted){\r\n                this.setState({error, isLoading: false})\r\n            }\r\n        });\r\n\r\n    };\r\n\r\n\r\n    /**\r\n     * Function to process the search results and save to state\r\n     * @param {Object} searchResults - object containing search results\r\n     */\r\n    processSearchResults = (searchResults) => {\r\n\r\n        let playerSearchResults = searchResults['playerSearchResults'];\r\n        let clubSearchResults = searchResults['clubSearchResults'];\r\n\r\n        if (this._isMounted){\r\n\r\n            this.setState({\r\n                searchResults: []\r\n            }, () => {\r\n                this.setState({\r\n                    error: null,\r\n                    isLoading: false,\r\n                    playerSearchResults: playerSearchResults,\r\n                    filteredPlayerSearchResults: playerSearchResults,\r\n                    clubSearchResults: clubSearchResults,\r\n                });\r\n            });\r\n\r\n            document.title = \"Search Results | Football Slices\";\r\n\r\n            this.props.recordPageViewGA(window.location.pathname);\r\n        }\r\n\r\n    };\r\n\r\n\r\n    /**\r\n     * Called just before the component un-mounts\r\n     */\r\n    componentWillUnmount() {\r\n        this._isMounted = false;\r\n    }\r\n\r\n\r\n    /**\r\n     * Function to filter player search results\r\n     * @param {Object} event - the input event from the search result filter\r\n     */\r\n    filterByName = (event) => {\r\n\r\n        //create a deep-copy of playerSearchResults to avoid modifying the original\r\n        let playerSearchResults = JSON.parse(JSON.stringify(this.state.playerSearchResults));\r\n        let filteredPlayerSearchResults = [];\r\n\r\n        let input = \"\";\r\n        if (event === null) {\r\n            filteredPlayerSearchResults = playerSearchResults;\r\n        }\r\n        else {\r\n            //retrieve the input text and remove diacritics\r\n            input = event.target.value\r\n                .normalize(\"NFD\")\r\n                .replace(/[\\u0300-\\u036f]/g, \"\")\r\n                .replace(\"Ø\", \"O\")\r\n                .replace(\"ø\", \"o\");\r\n            for (let i=0; i<playerSearchResults.length; i++){\r\n                //remove diacritics from each search result\r\n                let name = playerSearchResults[i].name.normalize(\"NFD\")\r\n                    .replace(/[\\u0300-\\u036f]/g, \"\")\r\n                    .replace(\"Ø\", \"O\")\r\n                    .replace(\"ø\", \"o\");\r\n                //push matches to filteredSearchResults\r\n                if (name.toUpperCase().includes(input.toUpperCase())){\r\n                    filteredPlayerSearchResults.push(playerSearchResults[i]);\r\n                }\r\n            }\r\n        }\r\n\r\n        //set state by clearing filteredSearchResults first, and the re-populating it on callback\r\n        this.setState({\r\n            filteredPlayerSearchResults: [],\r\n            filterValue: input\r\n        }, () => {\r\n            this.setState({\r\n                filteredPlayerSearchResults: filteredPlayerSearchResults,\r\n            })\r\n        });\r\n\r\n    };\r\n\r\n\r\n    /**\r\n     * render function\r\n     * @return {*} - JSX code for the search page\r\n     */\r\n    render() {\r\n\r\n        let {\r\n            isLoading,\r\n            error,\r\n            filteredPlayerSearchResults,\r\n            clubSearchResults,\r\n            searchByClub,\r\n            filterValue\r\n        } = this.state;\r\n\r\n        //display loading spinner while the server responds to POST request for the search results\r\n        if (isLoading) {\r\n            return (\r\n                <LoadingSpinner/>\r\n            )\r\n        }\r\n\r\n        //display the error message screen if an error is caught\r\n        else if (error !== null) {\r\n            return (\r\n                <div id=\"main\">\r\n                    <SearchBar\r\n                        isMobile={this.isMobile}\r\n                        page=\"search\"\r\n                        query={this.state.query}\r\n                    />\r\n                    <div className=\"screen\" id=\"error-screen\">\r\n                        <p>{error.message}</p>\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n\r\n        //build search page otherwise\r\n        else {\r\n\r\n            let season = searchByClub ? \"20-21\" : null;\r\n\r\n            //construct the player cards\r\n            let playerCards = [];\r\n            for (let i=0; i<filteredPlayerSearchResults.length; i++){\r\n                let current = filteredPlayerSearchResults[i];\r\n                playerCards.push(\r\n                    <PlayerSearchResult\r\n                        isMobile={this.isMobile}\r\n                        page=\"search\"\r\n                        code={current.code}\r\n                        name={current.name}\r\n                        age={current.age}\r\n                        season={season}\r\n                        clubs={current.clubs}\r\n                        nationalities={current.nationalities}\r\n                        countryCodes={current.countryCodes}\r\n                        positions={current.positions}\r\n                        key={i}\r\n                    />\r\n                );\r\n            }\r\n\r\n            //construct the club cards\r\n            let clubCards = [];\r\n            for (let i=0; i<clubSearchResults.length; i++){\r\n                let current = clubSearchResults[i];\r\n                clubCards.push(\r\n                    <ClubSearchResult\r\n                        isMobile={this.isMobile}\r\n                        page=\"search\"\r\n                        name={current.name}\r\n                        countryCode={current.countryCode}\r\n                        key={i}\r\n                    />\r\n                )\r\n            }\r\n\r\n            //build header for search results\r\n            let searchText;\r\n            if (searchByClub === undefined){\r\n                searchText = <h3>Search results for <br/>\"{this.state.query}\"</h3>;\r\n            }\r\n            else {\r\n                searchText = <h3>Search results for <br/>\"player.club[20-21] = {this.state.query}\"</h3>;\r\n            }\r\n\r\n            //return JSX code for the search page\r\n            return (\r\n                <div id=\"main\">\r\n                    <SearchBar\r\n                        isMobile={this.isMobile}\r\n                        page=\"search\"\r\n                        query={this.state.query}\r\n                    />\r\n                    <div className=\"screen\" id=\"search-screen\">\r\n                        <div className=\"filter\" id=\"search-filters\">\r\n                            <div className=\"filter-inputs search-filter-inputs\" id=\"search-filter-inputs\">\r\n                                {searchText}\r\n                                <br />\r\n                                <input\r\n                                    type=\"text\"\r\n                                    value={filterValue}\r\n                                    placeholder={\"Filter players by name\"}\r\n                                    onChange={this.filterByName}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"result scrollable\" id=\"search-results\">\r\n                            {searchByClub === undefined ? <h3>Players</h3> : null}\r\n                            {playerCards.length === 0 && searchByClub === undefined ? <p>No results found</p> : null}\r\n                            <div id=\"player-search-results\">\r\n                                {playerCards}\r\n                            </div>\r\n                            {searchByClub === undefined ? <h3 style={{marginTop: '20px'}}>Clubs</h3> : null}\r\n                            {clubCards.length === 0 && searchByClub === undefined ? <p>No results found</p> : null}\r\n                            <div id=\"club-search-results\">\r\n                                {clubCards}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default Search;\r\n","import $ from \"jquery\";\r\n\r\n//import dependencies\r\nimport Cookies from 'universal-cookie';\r\nimport Highcharts from \"highcharts\";\r\nimport domtoimage from \"dom-to-image\";\r\nimport saveAs from \"file-saver\";\r\n\r\n//initialize cookies\r\nconst cookies = new Cookies();\r\n\r\n//colors used in the Slices\r\nconst colorArrays = {\r\n    \"FW\": ['#f15c80', '#f15c80', '#f15c80', '#f15c80', '#f15c80', '#e4d354',\r\n        '#e4d354', '#e4d354', '#90ed7d', '#90ed7d', '#90ed7d', '#7cb5ec'],\r\n    \"AM\": ['#f15c80', '#f15c80', '#f15c80', '#e4d354', '#e4d354', '#e4d354',\r\n        '#e4d354', '#e4d354', '#90ed7d', '#90ed7d', '#90ed7d', '#7cb5ec'],\r\n    \"CM\": ['#e4d354', '#e4d354', '#e4d354', '#e4d354', '#e4d354', '#90ed7d',\r\n        '#90ed7d', '#90ed7d', '#7cb5ec', '#7cb5ec', '#7cb5ec', '#7cb5ec'],\r\n    \"FB\": ['#e4d354', '#e4d354', '#e4d354', '#e4d354', '#90ed7d', '#90ed7d',\r\n        '#90ed7d', '#7cb5ec', '#7cb5ec', '#7cb5ec', '#7cb5ec', '#7cb5ec'],\r\n    \"CB\": ['#e4d354', '#e4d354', '#e4d354', '#e4d354', '#7cb5ec', '#7cb5ec',\r\n        '#7cb5ec', '#7cb5ec', '#7cb5ec', '#7cb5ec', '#7cb5ec', '#7cb5ec'],\r\n    \"GK\": ['#9499ff', '#9499ff', '#e4d354'],\r\n    \"comparison\": ['#e75453', '#e75453', '#e75453', '#e75453', '#e75453', '#e75453',\r\n        '#e75453', '#e75453', '#e75453', '#e75453', '#e75453', '#e75453']\r\n};\r\n\r\n//data label alignments\r\nconst alignments = {\r\n    \"vertical\": {\r\n        \"GK\": [\"bottom\", \"top\", \"top\"],\r\n        \"other\": [\"bottom\", \"bottom\", \"middle\", \"middle\", \"middle\", \"top\",\r\n            \"top\", \"top\", \"middle\", \"middle\", \"middle\", \"bottom\"\r\n        ]\r\n    },\r\n    \"horizontal\": {\r\n        \"GK\": [\"center\", \"left\", \"right\"],\r\n        \"other\": [\"center\", \"center\", \"left\", \"left\", \"left\", \"center\",\r\n            \"center\", \"center\", \"right\", \"right\", \"right\", \"center\"\r\n        ]\r\n    }\r\n};\r\n\r\n/**\r\n * Function to filter the complete stats based on the selected competitions\r\n * @param {Object} stats - object containing the complete stats of the player\r\n * @param {String} playerCode - the code of the player whose stats are being filtered (used for comparisons)\r\n * @return {Object} filteredStats - object containing aggregated totals of the filtered stats\r\n */\r\nexport function filterStats(stats, playerCode = undefined){\r\n\r\n    let selectedCompetitions;\r\n    if (playerCode === undefined) {\r\n        selectedCompetitions = this.state.selectedCompetitions;\r\n    }\r\n    else {\r\n        selectedCompetitions = this.state.selectedCompetitions[playerCode];\r\n    }\r\n\r\n    //iterate through complete stats, check if a competition is selected\r\n    //add the stats for said competition to the aggregated stats if so\r\n    //for ages, create an array containing the age range for selected competitions\r\n    let filteredStats = {};\r\n\r\n    for (let season in stats){\r\n        for (let competition in stats[season]){\r\n\r\n            if (selectedCompetitions[season].includes(competition)) {\r\n\r\n                for (let stat in stats[season][competition]) {\r\n\r\n                    let value = stats[season][competition][stat];\r\n\r\n                    if (!(stat in filteredStats)){\r\n                        if (stat === 'age'){\r\n                            filteredStats[stat] = [value];\r\n                        }\r\n                        else {\r\n                            filteredStats[stat] = value;\r\n                        }\r\n                    }\r\n                    else{\r\n                        if (stat === 'age'){\r\n                            if (!filteredStats[stat].includes(value)){\r\n                                filteredStats[stat].push(value);\r\n                            }\r\n                        }\r\n                        else {\r\n                            filteredStats[stat] += value;\r\n                        }\r\n                    }\r\n\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    return filteredStats;\r\n\r\n}\r\n\r\n\r\n/**\r\n * Function to calculate the 'per90' stats and percentile ranks of the filtered stats\r\n * @param {Object} filteredStats - object containing the aggregated totals from the selected competitions\r\n * @param playerCode\r\n * @return {{statsPer90, percentiles}} - object containing the per90 stats and percentile ranks\r\n */\r\nexport function calculateStats(filteredStats, playerCode = undefined){\r\n\r\n    let percentileArrays = this.state.percentileArrays;\r\n    let template = this.state.template;\r\n    let selectedCompetitions = this.state.selectedCompetitions;\r\n    let padjTypes = this.state.pAdjTypes;\r\n\r\n    let percentileEntries;\r\n    let selectedSeasons = [];\r\n    if (playerCode === undefined){\r\n\r\n        percentileEntries = this.state.percentileEntries;\r\n\r\n        //iterate through selected competitions and list the seasons they span\r\n        for (let season in selectedCompetitions) {\r\n            if (selectedCompetitions[season].length !== 0) {\r\n                selectedSeasons.push(season);\r\n            }\r\n        }\r\n\r\n    }\r\n    else {\r\n\r\n        percentileEntries = this.state.percentileEntries[playerCode];\r\n        for (let code in selectedCompetitions){\r\n            //iterate through selected competitions and list the seasons they span\r\n            for (let season in selectedCompetitions[code]) {\r\n                if (selectedCompetitions[code][season].length !== 0) {\r\n                    if (!selectedSeasons.includes(season)){\r\n                        selectedSeasons.push(season);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    let percentileSeason;\r\n    //if only one season is selected, set the percentile season to that season\r\n    if (selectedSeasons.length === 1) {\r\n        percentileSeason = selectedSeasons[0];\r\n    }\r\n    //set the percentile season to the combined dataset otherwise\r\n    else {\r\n        percentileSeason = \"combined\";\r\n    }\r\n\r\n    let percentileArrayOccurrences = 0;\r\n    //count how many of the entries in the percentile array belong to the player\r\n    //this is done so that the percentile rank can be adjusted in order not to double count a player's entries\r\n    for (let season in percentileEntries) {\r\n        if (percentileSeason === season || percentileSeason === \"combined\") {\r\n            if (percentileEntries[season].includes(template)) {\r\n                percentileArrayOccurrences = 1;\r\n            }\r\n        }\r\n    }\r\n\r\n    let statsPer90 = {};\r\n    let percentiles = {};\r\n\r\n    //calculate per90 stats\r\n    let minutesOverNinety = filteredStats['minutes'] / 90;\r\n    let touchesOverHundred = filteredStats['touches'] / 100;\r\n\r\n    switch (template) {\r\n\r\n        case \"FW\":\r\n\r\n            statsPer90[\"npg\"] = filteredStats[\"npg\"] / minutesOverNinety;\r\n            statsPer90[\"npxg\"] = filteredStats[\"npxg\"] / minutesOverNinety;\r\n            statsPer90[\"npxgPerShot\"] = filteredStats[\"npxg\"] / filteredStats[\"shots\"];\r\n            statsPer90[\"succAerials\"] = filteredStats[\"succAerials\"] / minutesOverNinety;\r\n            statsPer90[\"aerialSuccRate\"] = (filteredStats[\"succAerials\"] / filteredStats[\"attAerials\"]) * 100;\r\n            statsPer90[\"dribbleSuccRate\"] = (filteredStats[\"succDribbles\"] / filteredStats[\"attDribbles\"]) * 100;\r\n            statsPer90[\"succPressures\"] = filteredStats[\"succPressures\"] / minutesOverNinety;\r\n\r\n            if (padjTypes['offensive']){\r\n                statsPer90[\"padjBoxTouches\"] = filteredStats[\"boxTouches\"] / touchesOverHundred;\r\n                statsPer90[\"padjXA\"] = filteredStats[\"xa\"] / touchesOverHundred;\r\n                statsPer90[\"padjPPA\"] = filteredStats[\"ppa\"] / touchesOverHundred;\r\n                statsPer90[\"padjSuccDribbles\"] = filteredStats[\"succDribbles\"] / touchesOverHundred;\r\n                statsPer90[\"padjTurnovers\"] = (filteredStats[\"timesDispossessed\"] + filteredStats[\"miscontrols\"]) / touchesOverHundred;\r\n            }\r\n            else {\r\n                statsPer90[\"boxTouches\"] = filteredStats[\"boxTouches\"] / minutesOverNinety;\r\n                statsPer90[\"xa\"] = filteredStats[\"xa\"] / minutesOverNinety;\r\n                statsPer90[\"ppa\"] = filteredStats[\"ppa\"] / minutesOverNinety;\r\n                statsPer90[\"succDribbles\"] = filteredStats[\"succDribbles\"] / minutesOverNinety;\r\n                statsPer90[\"turnovers\"] = (filteredStats[\"timesDispossessed\"] + filteredStats[\"miscontrols\"]) / minutesOverNinety;\r\n            }\r\n\r\n            break;\r\n\r\n        case \"AM\":\r\n\r\n            statsPer90[\"npg\"] = filteredStats[\"npg\"] / minutesOverNinety;\r\n            statsPer90[\"npxg\"] = filteredStats[\"npxg\"] / minutesOverNinety;\r\n            statsPer90[\"npxgPerShot\"] = filteredStats[\"npxg\"] / filteredStats[\"shots\"];\r\n            statsPer90[\"passSuccRate\"] = (filteredStats[\"succPasses\"] / filteredStats[\"attPasses\"]) * 100;\r\n            statsPer90[\"dribbleSuccRate\"] = (filteredStats[\"succDribbles\"] / filteredStats[\"attDribbles\"]) * 100;\r\n            statsPer90[\"succPressures\"] = filteredStats[\"succPressures\"] / minutesOverNinety;\r\n\r\n            if (padjTypes['offensive']){\r\n                statsPer90[\"padjXA\"] = filteredStats[\"xa\"] / touchesOverHundred;\r\n                statsPer90[\"padjSCA\"] = filteredStats[\"sca\"] / touchesOverHundred;\r\n                statsPer90[\"padjPPA\"] = filteredStats[\"ppa\"] / touchesOverHundred;\r\n                statsPer90[\"padjProgDistance\"] = filteredStats[\"progDistance\"] / touchesOverHundred;\r\n                statsPer90[\"padjSuccDribbles\"] = filteredStats[\"succDribbles\"] / touchesOverHundred;\r\n                statsPer90[\"padjTurnovers\"] = (filteredStats[\"timesDispossessed\"] + filteredStats[\"miscontrols\"]) / touchesOverHundred;\r\n            }\r\n            else {\r\n                statsPer90[\"xa\"] = filteredStats[\"xa\"] / minutesOverNinety;\r\n                statsPer90[\"sca\"] = filteredStats[\"sca\"] / minutesOverNinety;\r\n                statsPer90[\"ppa\"] = filteredStats[\"ppa\"] / minutesOverNinety;\r\n                statsPer90[\"progDistance\"] = filteredStats[\"progDistance\"] / minutesOverNinety;\r\n                statsPer90[\"succDribbles\"] = filteredStats[\"succDribbles\"] / minutesOverNinety;\r\n                statsPer90[\"turnovers\"] = (filteredStats[\"timesDispossessed\"] + filteredStats[\"miscontrols\"]) / minutesOverNinety;\r\n            }\r\n\r\n            break;\r\n\r\n        case \"CM\":\r\n\r\n            statsPer90[\"passSuccRate\"] = (filteredStats[\"succPasses\"] / filteredStats[\"attPasses\"]) * 100;\r\n            statsPer90[\"dribbleSuccRate\"] = (filteredStats[\"succDribbles\"] / filteredStats[\"attDribbles\"]) * 100;\r\n            statsPer90[\"dribbleTackleRate\"] = (filteredStats[\"succDribbleTackles\"] / filteredStats[\"attDribbleTackles\"]) * 100;\r\n            statsPer90[\"succPressures\"] = filteredStats[\"succPressures\"] / minutesOverNinety;\r\n\r\n            if (padjTypes['offensive']){\r\n                statsPer90[\"padjXA\"] = filteredStats[\"xa\"] / touchesOverHundred;\r\n                statsPer90[\"padjSCA\"] = filteredStats[\"sca\"] / touchesOverHundred;\r\n                statsPer90[\"padjPFT\"] = filteredStats[\"pft\"] / touchesOverHundred;\r\n                statsPer90[\"padjProgDistance\"] = filteredStats[\"progDistance\"] / touchesOverHundred;\r\n                statsPer90[\"padjSuccDribbles\"] = filteredStats[\"succDribbles\"] / touchesOverHundred;\r\n                statsPer90[\"padjTurnovers\"] = (filteredStats[\"timesDispossessed\"] + filteredStats[\"miscontrols\"]) / touchesOverHundred;\r\n            }\r\n            else {\r\n                statsPer90[\"xa\"] = filteredStats[\"xa\"] / minutesOverNinety;\r\n                statsPer90[\"sca\"] = filteredStats[\"sca\"] / minutesOverNinety;\r\n                statsPer90[\"pft\"] = filteredStats[\"pft\"] / minutesOverNinety;\r\n                statsPer90[\"progDistance\"] = filteredStats[\"progDistance\"] / minutesOverNinety;\r\n                statsPer90[\"succDribbles\"] = filteredStats[\"succDribbles\"] / minutesOverNinety;\r\n                statsPer90[\"turnovers\"] = (filteredStats[\"timesDispossessed\"] + filteredStats[\"miscontrols\"]) / minutesOverNinety;\r\n            }\r\n\r\n            if (padjTypes['defensive']){\r\n                statsPer90[\"padjInterceptions\"] = filteredStats[\"padjInterceptions\"] / minutesOverNinety;\r\n                statsPer90[\"padjSuccTackles\"] = filteredStats[\"padjSuccTackles\"] / minutesOverNinety;\r\n            }\r\n            else {\r\n                statsPer90[\"interceptions\"] = filteredStats[\"interceptions\"] / minutesOverNinety;\r\n                statsPer90[\"succTackles\"] = filteredStats[\"succTackles\"] / minutesOverNinety;\r\n            }\r\n\r\n            break;\r\n\r\n        case \"FB\":\r\n\r\n            statsPer90[\"passSuccRate\"] = (filteredStats[\"succPasses\"] / filteredStats[\"attPasses\"]) * 100;\r\n            statsPer90[\"dribbleSuccRate\"] = (filteredStats[\"succDribbles\"] / filteredStats[\"attDribbles\"]) * 100;\r\n            statsPer90[\"dribbleTackleRate\"] = (filteredStats[\"succDribbleTackles\"] / filteredStats[\"attDribbleTackles\"]) * 100;\r\n            statsPer90[\"succPressures\"] = filteredStats[\"succPressures\"] / minutesOverNinety;\r\n            statsPer90[\"aerialSuccRate\"] = (filteredStats[\"succAerials\"] / filteredStats[\"attAerials\"]) * 100;\r\n\r\n            if (padjTypes['offensive']){\r\n                statsPer90[\"padjXA\"] = filteredStats[\"xa\"] / touchesOverHundred;\r\n                statsPer90[\"padjPFT\"] = filteredStats[\"pft\"] / touchesOverHundred;\r\n                statsPer90[\"padjProgDistance\"] = filteredStats[\"progDistance\"] / touchesOverHundred;\r\n                statsPer90[\"padjSuccDribbles\"] = filteredStats[\"succDribbles\"] / touchesOverHundred;\r\n                statsPer90[\"padjTurnovers\"] = (filteredStats[\"timesDispossessed\"] + filteredStats[\"miscontrols\"]) / touchesOverHundred;\r\n            }\r\n            else {\r\n                statsPer90[\"xa\"] = filteredStats[\"xa\"] / minutesOverNinety;\r\n                statsPer90[\"pft\"] = filteredStats[\"pft\"] / minutesOverNinety;\r\n                statsPer90[\"progDistance\"] = filteredStats[\"progDistance\"] / minutesOverNinety;\r\n                statsPer90[\"succDribbles\"] = filteredStats[\"succDribbles\"] / minutesOverNinety;\r\n                statsPer90[\"turnovers\"] = (filteredStats[\"timesDispossessed\"] + filteredStats[\"miscontrols\"]) / minutesOverNinety;\r\n            }\r\n\r\n            if (padjTypes['defensive']){\r\n                statsPer90[\"padjInterceptions\"] = filteredStats[\"padjInterceptions\"] / minutesOverNinety;\r\n                statsPer90[\"padjSuccTackles\"] = filteredStats[\"padjSuccTackles\"] / minutesOverNinety;\r\n            }\r\n            else {\r\n                statsPer90[\"interceptions\"] = filteredStats[\"interceptions\"] / minutesOverNinety;\r\n                statsPer90[\"succTackles\"] = filteredStats[\"succTackles\"] / minutesOverNinety;\r\n            }\r\n\r\n            break;\r\n\r\n        case \"CB\":\r\n\r\n            statsPer90[\"passSuccRate\"] = (filteredStats[\"succPasses\"] / filteredStats[\"attPasses\"]) * 100;\r\n            statsPer90[\"longPassSuccRate\"] = (filteredStats[\"succLongPasses\"] / filteredStats[\"attLongPasses\"]) * 100;\r\n            statsPer90[\"dribbleTackleRate\"] = (filteredStats[\"succDribbleTackles\"] / filteredStats[\"attDribbleTackles\"]) * 100;\r\n            statsPer90[\"succAerials\"] = filteredStats[\"succAerials\"] / minutesOverNinety;\r\n            statsPer90[\"aerialSuccRate\"] = (filteredStats[\"succAerials\"] / filteredStats[\"attAerials\"]) * 100;\r\n            statsPer90[\"succPressures\"] = filteredStats[\"succPressures\"] / minutesOverNinety;\r\n\r\n            if (padjTypes['offensive']){\r\n                statsPer90[\"padjPFT\"] = filteredStats[\"pft\"] / touchesOverHundred;\r\n                statsPer90[\"padjProgDistance\"] = filteredStats[\"progDistance\"] / touchesOverHundred;\r\n            }\r\n            else {\r\n                statsPer90[\"pft\"] = filteredStats[\"pft\"] / minutesOverNinety;\r\n                statsPer90[\"progDistance\"] = filteredStats[\"progDistance\"] / minutesOverNinety;\r\n            }\r\n\r\n            if (padjTypes['defensive']){\r\n                statsPer90[\"padjInterceptions\"] = filteredStats[\"padjInterceptions\"] / minutesOverNinety;\r\n                statsPer90[\"padjSuccTackles\"] = filteredStats[\"padjSuccTackles\"] / minutesOverNinety;\r\n                statsPer90[\"padjFouls\"] = filteredStats[\"padjFouls\"] / minutesOverNinety;\r\n                statsPer90[\"padjClearances\"] = filteredStats[\"padjClearances\"] / minutesOverNinety;\r\n            }\r\n            else {\r\n                statsPer90[\"interceptions\"] = filteredStats[\"interceptions\"] / minutesOverNinety;\r\n                statsPer90[\"succTackles\"] = filteredStats[\"succTackles\"] / minutesOverNinety;\r\n                statsPer90[\"fouls\"] = filteredStats[\"fouls\"] / minutesOverNinety;\r\n                statsPer90[\"clearances\"] = filteredStats[\"clearances\"] / minutesOverNinety;\r\n            }\r\n\r\n            break;\r\n\r\n        case \"GK\":\r\n\r\n            statsPer90[\"gsaa\"] = ((filteredStats[\"psxg\"] - filteredStats[\"goalsAgainst\"]) / filteredStats[\"sota\"]) * 100;\r\n            statsPer90[\"crossStopRate\"] = (filteredStats[\"stoppedCrosses\"] / filteredStats[\"attCrosses\"]) * 100;\r\n            statsPer90[\"launchedPassSuccRate\"] = (filteredStats[\"succLaunchedPasses\"] / filteredStats[\"attLaunchedPasses\"]) * 100;\r\n\r\n            break;\r\n\r\n        default:\r\n\r\n            statsPer90[\"npg\"] = 0;\r\n            statsPer90[\"npxg\"] = 0;\r\n            statsPer90[\"npxgPerShot\"] = 0;\r\n            statsPer90[\"conversionRate\"] = 0;\r\n            statsPer90[\"aerialSuccRate\"] = 0;\r\n            statsPer90[\"boxTouches\"] = 0;\r\n            statsPer90[\"xa\"] = 0;\r\n            statsPer90[\"ppa\"] = 0;\r\n            statsPer90[\"succDribbles\"] = 0;\r\n            statsPer90[\"dribbleSuccRate\"] = 0;\r\n            statsPer90[\"turnovers\"] = 0;\r\n            statsPer90[\"succPressures\"] = 0;\r\n\r\n    }\r\n\r\n    //calculate percentile ranks\r\n    if (template !== \"N/A\") {\r\n        for (let stat in statsPer90) {\r\n            if (isFinite(statsPer90[stat])) {\r\n                percentiles[stat] = calculatePercentileRank(percentileArrays[percentileSeason][template][stat], statsPer90[stat], percentileArrayOccurrences) * 100;\r\n            }\r\n            //handle cases where the per 90 value is NaN (e.g.: as a result of divide by 0 error)\r\n            else {\r\n                statsPer90[stat] = 0;\r\n                percentiles[stat] = 0;\r\n            }\r\n            //reverse percentile ranks for \"less is better\" stats\r\n            if (stat === \"padjFouls\" ||\r\n                stat === \"fouls\" ||\r\n                stat === \"turnovers\" ||\r\n                stat === \"padjTurnovers\"\r\n            ) {\r\n                percentiles[stat] = 100 - percentiles[stat];\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        for (let stat in statsPer90) {\r\n            percentiles[stat] = 0;\r\n        }\r\n    }\r\n\r\n    return {\r\n        statsPer90: statsPer90,\r\n        percentiles: percentiles,\r\n        statsKeys: Object.keys(percentiles)\r\n    };\r\n\r\n}\r\n\r\n\r\n/**\r\n * Function to calculate the percentile rank of a given value within a given array\r\n * @param {Array} array - the array of values\r\n * @param {number} value - the value for which the percentile rank is being calculated\r\n * @param {number} occurrences - the number of occurrences of the player's numbers within the percentile array\r\n * @return {number} the percentile rank of the value in the array (adjusted for the double-counting problem)\r\n */\r\nfunction calculatePercentileRank(array, value, occurrences){\r\n\r\n    //taken from: https://gist.github.com/IceCreamYou/6ffa1b18c4c8f6aeaad2\r\n    if (!isFinite(value)){\r\n        value = 0;\r\n    }\r\n    for (let i = 0, length = array.length; i < length; i++) {\r\n        if (value < array[i]) {\r\n            while (i < length && value === array[i]) i++;\r\n            if (i === 0) return 0;\r\n            if (value !== array[i-1]) {\r\n                i += (value - array[i-1]) / (array[i] - array[i-1]);\r\n            }\r\n            //adjust the returned percentile by disregarding the entries that belong to the player\r\n            //return (i / length) - (occurrences/array.length);\r\n            return (i/length);\r\n        }\r\n    }\r\n    return 1;\r\n\r\n}\r\n\r\n\r\n/**\r\n * Function to construct the input given to the Highcharts component\r\n * @param statsByPosition\r\n * @param {Object} statsPer90 - object containing the per90 stats\r\n * @param {Object} percentiles - object containing the percentile ranks\r\n * @param playerCode\r\n * @param playerName\r\n * @param minutes\r\n * @param isForComparison\r\n * @param index\r\n * @return {Array} chartInput - array containing information for each data point in the Highcharts plot\r\n */\r\nexport function constructChartInput(statsByPosition, statsPer90, percentiles, playerCode, playerName, minutes, isForComparison, index){\r\n\r\n    let template = this.state.template;\r\n\r\n    let colors;\r\n    if (isForComparison) {\r\n        colors = colorArrays['comparison'];\r\n    }\r\n    else {\r\n        colors = colorArrays[template];\r\n    }\r\n\r\n    let verticalAlignments = alignments['vertical'][template === \"GK\" ? \"GK\" : \"other\"];\r\n    let horizontalAlignments = alignments['horizontal'][template === \"GK\" ? \"GK\" : \"other\"];\r\n\r\n    let isSecondPlayer = index === 1;\r\n\r\n    //remove unnecessary precision from the per90 labels and the percentile ranks\r\n    let p90_labels = truncate(statsPer90);\r\n    let percentile_labels = roundNumbers(percentiles, 0);\r\n\r\n    //iterate through per90 stats and percentile ranks and construct objects for each point on the Highcharts plot\r\n    let chartInput = [];\r\n\r\n    let i = 0;\r\n    for (let stat in statsByPosition[template]){\r\n\r\n        let key = statsByPosition[template][stat];\r\n\r\n        if (statsPer90[key] === undefined){\r\n            continue;\r\n        }\r\n\r\n        chartInput[i] = {\r\n            playerName: playerCode !== undefined ? playerName : null,\r\n            y: percentiles[key],\r\n            p90_label: p90_labels[key],\r\n            percentile_label: ordinalSuffix(percentile_labels[key]),\r\n            dataLabels: {\r\n                align: horizontalAlignments[i],\r\n                verticalAlign: verticalAlignments[i]\r\n            },\r\n            color: Highcharts.Color(colors[i]).setOpacity(index !== 1 ? (isForComparison ? 0.85 : 0.85) : 0).get(),\r\n            tooltipColor: index === 0 ? colors[i] : 'black',\r\n            borderColor: isSecondPlayer ? 'black' : null,\r\n            borderWidth: isSecondPlayer ? 5 : 0\r\n        };\r\n\r\n        i++;\r\n\r\n    }\r\n\r\n    return chartInput;\r\n\r\n}\r\n\r\n\r\n/**\r\n * Function to truncate all values in an object to 3 digits\r\n * @param {Object} someStats - object containing the values that need to be reduced to 3 digits\r\n * @return {Object} threeDigitStats - object containing value of someStats reduced to 3 digits\r\n */\r\nfunction truncate(someStats){\r\n\r\n    let threeDigitStats = {};\r\n\r\n    for (let stat in someStats){\r\n        let precision;\r\n        if (\r\n            stat === \"progDistance\" ||\r\n            stat === \"padjProgDistance\" ||\r\n            someStats[stat] === 0\r\n        ) {\r\n            precision = 0;\r\n        }\r\n        else if (\r\n            stat === \"conversionRate\" ||\r\n            stat === \"aerialSuccRate\" ||\r\n            stat === \"dribbleSuccRate\" ||\r\n            stat === \"passSuccRate\" ||\r\n            stat === \"dribbleTackleRate\" ||\r\n            stat === \"longPassSuccRate\" ||\r\n            stat === \"launchedPassSuccRate\"\r\n        ) {\r\n            precision = 1;\r\n        }\r\n        else if (\r\n            stat === \"npxgPerShot\"\r\n        ){\r\n            precision = 3;\r\n        }\r\n        else {\r\n            precision = 2;\r\n        }\r\n        threeDigitStats[stat] = parseFloat(Math.round(someStats[stat] * (10**precision)) / (10**precision)).toFixed(precision);\r\n    }\r\n    return threeDigitStats;\r\n\r\n}\r\n\r\n\r\n/**\r\n * Function to round all values in an object to a specified precision\r\n * @param {Object} someStats - object containing the values that need to be rounded\r\n * @param {number} precision - the number of decimal places each number should be rounded to\r\n * @return {Object}\r\n */\r\nfunction roundNumbers(someStats, precision){\r\n\r\n    let roundedStats = {};\r\n\r\n    for (let stat in someStats){\r\n        roundedStats[stat] = Math.round(someStats[stat] * (10**precision)) / (10**precision);\r\n    }\r\n\r\n    return roundedStats;\r\n\r\n}\r\n\r\n\r\n/**\r\n * Function to append an ordinal suffix (-st, -nd, -rd, -th) to numbers\r\n * @param {number} aNumber - the number to which the ordinal suffix is being appended\r\n * @return {string} - the number with the ordinal suffix appended to it\r\n */\r\nexport function ordinalSuffix(aNumber){\r\n\r\n    //taken from: https://stackoverflow.com/questions/13627308/add-st-nd-rd-and-th-ordinal-suffix-to-a-number\r\n    let j = aNumber % 10,\r\n        k = aNumber % 100;\r\n    if (j === 1 && k !== 11) {\r\n        return aNumber + \"st\";\r\n    }\r\n    if (j === 2 && k !== 12) {\r\n        return aNumber + \"nd\";\r\n    }\r\n    if (j === 3 && k !== 13) {\r\n        return aNumber + \"rd\";\r\n    }\r\n    return aNumber + \"th\";\r\n\r\n}\r\n\r\n\r\n/**\r\n * Function to reduce array of ages into string collapsing consecutive numbers\r\n * E.g.: [23, 24, 25, 27] => [\"23-25\", \"27\"]\r\n * @param ageArray -\r\n * @return {string}\r\n */\r\nexport function ageRangesString(ageArray){\r\n\r\n    //adapted from: https://stackoverflow.com/questions/2270910/how-to-reduce-consecutive-integers-in-an-array-to-hyphenated-range-expressions\r\n\r\n    if (ageArray === undefined){\r\n        return \"\";\r\n    }\r\n\r\n    let ranges = [], rstart, rend;\r\n    for (let i = 0; i < ageArray.length; i++) {\r\n        rstart = ageArray[i];\r\n        rend = rstart;\r\n        while (ageArray[i + 1] - ageArray[i] === 1) {\r\n            rend = ageArray[i + 1];\r\n            i++;\r\n        }\r\n        ranges.push(rstart === rend ? rstart+'' : rstart + '-' + rend);\r\n    }\r\n    return ranges.join(\", \");\r\n\r\n}\r\n\r\n\r\n/**\r\n * Function to change the selected template\r\n * @param {Object} event - the input event from the template form\r\n */\r\nexport function changeTemplate(event){\r\n\r\n    let { codes, stats, template, competitions, selectedCompetitions } = this.state;\r\n    let newTemplate = event.target.value;\r\n\r\n    //check if the function was called from a comparison page\r\n    if (codes !== undefined) {\r\n\r\n        for (let i=0; i<codes.length; i++){\r\n\r\n            let code = codes[i];\r\n\r\n            if (this.state.isOutfieldGK[code]){\r\n\r\n                if (template !== \"GK\" && newTemplate === \"GK\"){\r\n                    let outfieldGKStats = this.state.outfieldGKStats[code];\r\n                    stats[code] = outfieldGKStats;\r\n                }\r\n                else if (template === \"GK\" && newTemplate !== \"GK\"){\r\n                    let standardStats = this.state.standardStats[code];\r\n                    stats[code] = standardStats;\r\n                }\r\n\r\n                competitions[code] = {};\r\n                for (let season in stats[code]){\r\n                    competitions[code][season] = [];\r\n                    for (let competition in stats[code][season]){\r\n                        competitions[code][season].push(competition);\r\n                    }\r\n                }\r\n\r\n                selectedCompetitions = JSON.parse(JSON.stringify(competitions));\r\n\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n    //handle case where function is called from stats page\r\n    else {\r\n\r\n        if (this.state.isOutfieldGK) {\r\n\r\n            if (template !== \"GK\" && newTemplate === \"GK\"){\r\n                let outfieldGKStats = this.state.outfieldGKStats;\r\n                stats = outfieldGKStats;\r\n            }\r\n            else if (template === \"GK\" && newTemplate !== \"GK\"){\r\n                let standardStats = this.state.standardStats;\r\n                stats = standardStats;\r\n            }\r\n\r\n            competitions = {};\r\n            for (let season in stats){\r\n                competitions[season] = [];\r\n                for (let competition in stats[season]){\r\n                    competitions[season].push(competition);\r\n                }\r\n            }\r\n\r\n            selectedCompetitions = JSON.parse(JSON.stringify(competitions));\r\n\r\n        }\r\n\r\n    }\r\n\r\n    this.setState({\r\n        stats: stats,\r\n        template: newTemplate,\r\n        competitions: competitions,\r\n        selectedCompetitions: selectedCompetitions,\r\n        isAnimated: true\r\n    });\r\n\r\n}\r\n\r\n\r\n/**\r\n * Function to change the list of selected competitions\r\n * @param {Object} event - the input event from the competitions form\r\n */\r\nexport function changeSelectedCompetitions(event){\r\n\r\n    let clickedValues = event.target.value.split(\"_\");\r\n    let selectedCompetitions = this.state.selectedCompetitions;\r\n\r\n    //retrieve the information of the clicked checkbox\r\n    let code;\r\n    let entry;\r\n    let clickedSeason;\r\n    let clickedCompetition;\r\n    let isLastCompetition = false;\r\n\r\n    //retrieve the season and competition from the clicked checkbox\r\n    clickedSeason = clickedValues[0];\r\n    clickedCompetition = clickedValues[1];\r\n\r\n    //check if the function was called from a 'compare' page, where the checkbox values include an extra value\r\n    let forComparison = clickedValues.length > 2;\r\n\r\n    //if so, retrieve the player code from the clicked checkbox\r\n    if (forComparison) {\r\n        code = clickedValues[2];\r\n        entry = selectedCompetitions[code][clickedSeason];\r\n        //determine if the click competition is the last checked competition\r\n        let counter = 0;\r\n        for (let season in selectedCompetitions[code]) {\r\n            counter += selectedCompetitions[code][season].length;\r\n        }\r\n        isLastCompetition = counter === 1;\r\n    }\r\n    else {\r\n        entry = selectedCompetitions[clickedSeason];\r\n    }\r\n\r\n    //remove the clicked competition from selected competitions if it is already included\r\n    //don't remove a clicked competition if it is the last checked competition of a player on a compare page\r\n    if (entry.includes(clickedCompetition) && !isLastCompetition){\r\n        entry.splice(entry.indexOf(clickedCompetition), 1);\r\n    }\r\n    //add it otherwise\r\n    else {\r\n        if (!entry.includes(clickedCompetition)){\r\n            entry.push(clickedCompetition);\r\n        }\r\n    }\r\n\r\n    this.setState({\r\n        selectedCompetitions: selectedCompetitions,\r\n        isAnimated: true\r\n    });\r\n\r\n}\r\n\r\n\r\n/**\r\n * Function to change the selected values for possession adjustment\r\n * @param {Object} event - the input event from the possession adjustment form\r\n */\r\nexport function changePAdjTypes(event){\r\n\r\n    let clickedType = event.target.value;\r\n\r\n    let pAdjTypes = this.state.pAdjTypes;\r\n    pAdjTypes[clickedType] = !pAdjTypes[clickedType];\r\n\r\n    this.setState({\r\n        pAdjTypes: pAdjTypes,\r\n        isAnimated: true\r\n    });\r\n\r\n    cookies.set('padjTypes', pAdjTypes, {path: '/'});\r\n\r\n}\r\n\r\n\r\n/**\r\n * Function to change the type of data labels\r\n * @param {Object} event - the input event from the data labels form\r\n */\r\nexport function changeLabelType(event){\r\n\r\n    let labelType = event.target.value;\r\n\r\n    this.setState({\r\n        labelType: labelType,\r\n        isAnimated: false\r\n    });\r\n\r\n    cookies.set('labelType', labelType, {path: '/'});\r\n\r\n}\r\n\r\n\r\n/**\r\n * Function to change the position of the credits at the bottom of the Slice container\r\n */\r\nexport function toggleCreditsPosition(){\r\n\r\n    let oldPosition = this.state.creditsPosition;\r\n    let newPosition = oldPosition === \"right\" ? \"center\" : \"right\";\r\n\r\n    this.setState({\r\n        isAnimated: false,\r\n        creditsPosition: newPosition\r\n    });\r\n\r\n    cookies.set('creditsPosition', newPosition, {path: '/'});\r\n\r\n}\r\n\r\n\r\n/**\r\n * Function to export the chart in a standardized 2400 * 2200 downloadable PNG format\r\n * Triggers the page to temporarily load a second slice to the \"#export\" div, which has fixed height and width\r\n * Passes the second slice to the \"dom-to-image\" package, which converts it to an image (with 4x scaling)\r\n * Adds the FootballSlices watermark to the exported image\r\n * @return {Promise<void>}\r\n */\r\nexport async function exportChart(){\r\n\r\n    //render the second slice and then export it.\r\n    //callback executes after the page has re-rendered with the second slice\r\n    this.setState({\r\n        showExportLoaderOverlay: true,\r\n        renderForExport: true\r\n    }, () => {\r\n\r\n        let name = this.state.name;\r\n        if (name === undefined) {\r\n            name = Object.values(this.state.names).join(\"-vs-\");\r\n        }\r\n\r\n        $('<img/>').attr('src', '../exportBackground.png').on('load', () => {\r\n\r\n            setTimeout(() => {\r\n\r\n                const node = document.getElementById('export');\r\n\r\n                if (this.firstExport){\r\n\r\n                    this.firstExport = false;\r\n\r\n                    domtoimage.toPng(node, {\r\n                        bgcolor: '#fafbfc',\r\n                        width: 1200,\r\n                        height: 1100,\r\n                        style: {\r\n                            //make the export div visible\r\n                            'opacity': '1',\r\n                            'transform': 'scale(1)',\r\n                        }\r\n                    })\r\n                        .then(async (blob) => {\r\n                        })\r\n                        .catch(function (error) {\r\n                            console.log(error);\r\n                            alert(\"An error occurred while exporting. Please refresh the page and try again.\")\r\n                        });\r\n\r\n                }\r\n\r\n                domtoimage.toPng(node, {\r\n                    bgcolor: '#fafbfc',\r\n                    width: 1200,\r\n                    height: 1100,\r\n                    style: {\r\n                        //make the export div visible\r\n                        'opacity': '1',\r\n                        'transform': 'scale(1)',\r\n                    }\r\n                })\r\n                    .then(async (blob) => {\r\n                        //download the image and revert 'renderForExport' to false so the second slice doesn't continue being updated\r\n                        saveAs(blob, `${name.replace(\" \", \"-\")}.png`);\r\n                        setTimeout(() => {\r\n                            this.setState({\r\n                                showExportLoaderOverlay: false,\r\n                                renderForExport: false\r\n                            })\r\n                        }, 500);\r\n                    })\r\n                    .catch(function (error) {\r\n                        console.log(error);\r\n                        alert(\"An error occurred while exporting. Please refresh the page and try again.\")\r\n                    });\r\n\r\n            }, 1000);\r\n\r\n            $(this).remove();\r\n\r\n        });\r\n\r\n    });\r\n\r\n}\r\n\r\n\r\n/**\r\n * Function to the show an overlay containing a glossary/explanation\r\n */\r\nexport function toggleGlossaryOverlay(){\r\n\r\n    let currentState = this.state.showGlossaryOverlay;\r\n\r\n    this.setState({\r\n        showGlossaryOverlay: !currentState\r\n    });\r\n\r\n}\r\n\r\n\r\n/**\r\n * Function to the show the search dialog for the comparison functionality\r\n */\r\nexport function toggleCompareSearchOverlay(){\r\n\r\n    let currentState = this.state.showCompareSearchOverlay;\r\n\r\n    this.setState({\r\n        showCompareSearchOverlay: !currentState\r\n    });\r\n\r\n    if (!this.isMobile){\r\n        $(\"#compare-search-overlay #searchbar-input\").focus()\r\n    }\r\n\r\n}\r\n\r\n","import React, {Component} from 'react';\r\nimport Collapsible from 'react-collapsible';\r\n\r\n/**\r\n * Component to render the options for the displayed slice\r\n */\r\nclass SliceOptions extends Component {\r\n\r\n    constructor(props) {\r\n\r\n        super(props);\r\n\r\n        this.isMobile = this.props.isMobile;\r\n        this.isForComparison = this.props.isForComparison;\r\n        this.templateOpen = this.props.template === \"N/A\";\r\n        this.codes = this.props.codes;\r\n        this.names = this.props.names;\r\n        this.clubs = this.props.clubs;\r\n\r\n        this.positions = {};\r\n        if (this.isMobile){\r\n            this.positions = {\r\n                \"FW\": \"FW\",\r\n                \"AM\": \"AM\",\r\n                \"CM\": \"CM / DM\",\r\n                \"FB\": \"FB\",\r\n                \"CB\": \"CB\",\r\n                \"GK\": \"GK\"\r\n            };\r\n        }\r\n        else {\r\n            this.positions = {\r\n                \"FW\": \"Forward\",\r\n                \"AM\": \"Attacking Midfielder / Winger\",\r\n                \"CM\": \"Central / Defensive Midfielder\",\r\n                \"FB\": \"Full-back\",\r\n                \"CB\": \"Center-back\",\r\n                \"GK\": \"Goalkeeper\"\r\n            };\r\n        }\r\n\r\n        this.labelTypes = {\r\n            \"raw\": \"Raw Values\",\r\n            \"percentiles\": \"Percentile Ranks\"\r\n        };\r\n\r\n        this.pAdjTypes = {\r\n            offensive: \"Offensive\",\r\n            defensive: \"Defensive\"\r\n        };\r\n\r\n        this.state = {\r\n        };\r\n\r\n    }\r\n\r\n    constructCompetitionLabels = (forComparison, code) => {\r\n\r\n        let competitions = forComparison ? this.props.competitions[code] : this.props.competitions;\r\n        let clubs = forComparison ? this.clubs[code] : this.clubs;\r\n        let selectedCompetitions = forComparison ? this.props.selectedCompetitions[code] : this.props.selectedCompetitions;\r\n\r\n        let competitionsForms = [];\r\n        let counter = 0;\r\n        for (let season in competitions){\r\n            let competitionLabels = [];\r\n            let multipleClubs = clubs[season].length !== 1;\r\n            competitionsForms.push(\r\n                <h4\r\n                    key={`${season}_header`}\r\n                    style={{\r\n                        marginBottom: this.isMobile ? '20px' : '10px',\r\n                        marginTop: (counter === 0) ? (this.isMobile ? '15px' : '10px') : (this.isMobile ? '20px' : '12px')\r\n                    }}\r\n                >\r\n                    {season.replace(\"-\", \"/\")} {multipleClubs === false ? ' | ' + clubs[season][0] : null}\r\n                </h4>\r\n            );\r\n            for (let i=0; i<competitions[season].length; i++){\r\n                let currentCompetition = competitions[season][i];\r\n                let isIncluded = selectedCompetitions[season].includes(currentCompetition);\r\n                let label = currentCompetition;\r\n                if (clubs[season].length === 1){\r\n                    label = label.substring(0, label.indexOf(\"|\")-1)\r\n                }\r\n                competitionLabels.push(\r\n                    <label\r\n                        className={`${isIncluded ? \"selected-label\" : null} selectable-label`}\r\n                        key={forComparison ? `${season}_${currentCompetition}_${code}` : `${season}_${currentCompetition}`}\r\n                    >\r\n                        <input className=\"competition\"\r\n                               type=\"checkbox\"\r\n                               value={forComparison ? `${season}_${currentCompetition}_${code}` : `${season}_${currentCompetition}`}\r\n                               onChange={this.props.changeSelectedCompetitions}\r\n                               checked={isIncluded}\r\n                        /> {label}\r\n                    </label>\r\n                )\r\n            }\r\n            competitionsForms.push(<form key={forComparison ? `${code}_${season}_form` : `${season}_form`} className=\"competitions\">{competitionLabels}</form>);\r\n            counter++;\r\n        }\r\n\r\n        return competitionsForms;\r\n\r\n    };\r\n\r\n    /**\r\n     * render function\r\n     * @return {*} - JSX code for the slice options\r\n     */\r\n    render() {\r\n\r\n        let template = this.props.template;\r\n        let labelType = this.props.labelType;\r\n        let pAdjTypes = this.props.pAdjTypes;\r\n\r\n        let isGK = this.props.isGK;\r\n        let isOutfieldGK = this.props.isOutfieldGK;\r\n\r\n        //construct templates form\r\n        let templateLabels = [];\r\n        let mobileTemplateLabels = [];\r\n\r\n        for (let position in this.positions){\r\n            let className;\r\n            let mobileClassName;\r\n            let disabled = false;\r\n            if (position === \"GK\"){\r\n                disabled = !isGK && !isOutfieldGK;\r\n            }\r\n            else {\r\n                disabled = isGK;\r\n            }\r\n            className = disabled ? \"blocked-label\" : \"selectable-label\";\r\n            mobileClassName = `${template === position ? \"selected-label\" : null} ${disabled ? null : \"selectable-label\"}`;\r\n            templateLabels.push(\r\n                <label\r\n                    className={className}\r\n                    key={`${position}_label`}\r\n                >\r\n                    <input type=\"radio\"\r\n                        name=\"template\"\r\n                        value={position}\r\n                        checked={template === position}\r\n                        disabled={disabled}\r\n                        onChange={this.props.changeTemplate}\r\n                    /> {this.positions[position]}\r\n                </label>\r\n            );\r\n            mobileTemplateLabels.push(\r\n                <label\r\n                    className={mobileClassName}\r\n                    key={`${position}_label_mobile`}\r\n                >\r\n                    <input type=\"radio\"\r\n                        name=\"template\"\r\n                        value={position}\r\n                        checked={template === position}\r\n                        disabled={disabled}\r\n                        onChange={this.props.changeTemplate}\r\n                    /> {this.positions[position]}\r\n                </label>\r\n            );\r\n        }\r\n\r\n        let templatesForm =\r\n            <Collapsible\r\n                open={this.templateOpen}\r\n                trigger=\"Template\"\r\n                className=\"filter-headers\"\r\n                transitionTime={200}\r\n                transitionCloseTime={200}\r\n            >\r\n                <form id=\"templates\">{templateLabels}</form>\r\n            </Collapsible>;\r\n\r\n        let mobileTemplatesForm =\r\n            <Collapsible\r\n                open={false}\r\n                trigger=\"Template\"\r\n                className=\"filter-headers\"\r\n                transitionTime={200}\r\n                transitionCloseTime={200}\r\n            >\r\n                <form id=\"templates\">{mobileTemplateLabels}</form>\r\n            </Collapsible>;\r\n\r\n        //construct competitions form(s)\r\n        let competitionsForms = [];\r\n\r\n        if (this.isForComparison){\r\n\r\n            let playerCompetitions = {};\r\n\r\n            for (let i=0; i<this.codes.length; i++){\r\n\r\n                let code = this.codes[i];\r\n                playerCompetitions[code] = this.constructCompetitionLabels(true, code);\r\n\r\n                competitionsForms.push(\r\n                    <Collapsible\r\n                        key={`Competitions ${code})`}\r\n                        open={!this.templateOpen && !this.isMobile}\r\n                        trigger={`Competitions | ${this.names[this.codes[i]]}`}\r\n                        className=\"filter-headers\"\r\n                        transitionTime={200}\r\n                        transitionCloseTime={200}\r\n                    >\r\n                        {playerCompetitions[code]}\r\n                    </Collapsible>\r\n                )\r\n\r\n            }\r\n\r\n        }\r\n        else {\r\n            let playerCompetitions = this.constructCompetitionLabels(false);\r\n            competitionsForms.push(\r\n                <Collapsible\r\n                    key={\"_\"}\r\n                    open={!this.templateOpen && !this.isMobile}\r\n                    trigger={`Competitions`}\r\n                    className=\"filter-headers\"\r\n                    transitionTime={200}\r\n                    transitionCloseTime={200}\r\n                >\r\n                    {playerCompetitions}\r\n                </Collapsible>\r\n            )\r\n        }\r\n\r\n        //construct label type form\r\n        let labelTypeForm = null;\r\n\r\n        if (!this.isForComparison){\r\n            let labelTypeLabels = [];\r\n\r\n            for (let type in this.labelTypes){\r\n                labelTypeLabels.push(\r\n                    <label\r\n                        className={`selectable-label ${labelType === type ? \"selected-label\" : null}`}\r\n                        key={type}\r\n                    >\r\n                        <input\r\n                            type=\"radio\"\r\n                            name=\"labelType\"\r\n                            value={type}\r\n                            checked={labelType === type}\r\n                            onChange={this.props.changeLabelType}\r\n                        /> {this.labelTypes[type]}\r\n                    </label>\r\n                )\r\n            }\r\n\r\n            labelTypeForm =\r\n                <Collapsible\r\n                    open={false}\r\n                    trigger=\"Data Labels\"\r\n                    className=\"filter-headers\"\r\n                    transitionTime={200}\r\n                    transitionCloseTime={200}\r\n                >\r\n                    <form id=\"data-labels\">{labelTypeLabels}</form>\r\n                </Collapsible>;\r\n        }\r\n\r\n\r\n        //construct possession adjustment form\r\n        let pAdjTypeLabels = [];\r\n\r\n        for (let type in this.pAdjTypes){\r\n            pAdjTypeLabels.push(\r\n                <label\r\n                    className={`selectable-label ${pAdjTypes[type] === true ? \"selected-label\" : null}`}\r\n                    key={type}\r\n                >\r\n                    <input\r\n                        type=\"checkbox\"\r\n                        name=\"pAdjLabelType\"\r\n                        value={type}\r\n                        checked={pAdjTypes[type] === true}\r\n                        onChange={this.props.changePAdjTypes}\r\n                    /> {this.pAdjTypes[type]}\r\n                </label>\r\n            )\r\n        }\r\n\r\n        let pAdjTypeForm =\r\n            <Collapsible\r\n                open={false}\r\n                trigger=\"Possession Adjustment\"\r\n                className=\"filter-headers\"\r\n                transitionTime={200}\r\n                transitionCloseTime={200}\r\n            >\r\n                <form id=\"templates\">{pAdjTypeLabels}</form>\r\n            </Collapsible>;\r\n\r\n\r\n        return (\r\n            <div className=\"filter\" id=\"chart-filters\">\r\n                <div className=\"filter-inputs chart-filter-inputs\" id=\"chart-filter-inputs-laptop\">\r\n                    {templatesForm}\r\n                    {competitionsForms}\r\n                    {pAdjTypeForm}\r\n                    {labelTypeForm}\r\n                </div>\r\n                <div className=\"filter-inputs chart-filter-inputs\" id=\"chart-filter-inputs-mobile\">\r\n                    {mobileTemplatesForm}\r\n                    {competitionsForms}\r\n                    {pAdjTypeForm}\r\n                    {labelTypeForm}\r\n                </div>\r\n                <div className=\"filter-buttons\" id=\"chart-filter-buttons\">\r\n                    <div className=\"filter-button\">\r\n                        <button id=\"toggleCreditsButton\" type=\"button\" onClick={this.props.toggleCreditsPosition}>Toggle Credits Position</button>\r\n                    </div>\r\n                    <div className=\"filter-button\">\r\n                        <button id=\"compareButton\" type=\"button\" onClick={this.props.toggleCompareSearchOverlay}>Compare</button>\r\n                    </div>\r\n                    <div className=\"filter-button\">\r\n                        <button id=\"exportButton\" type=\"button\" onClick={this.props.exportChart}>Export Chart</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default (SliceOptions);\r\n","import React, {Component} from 'react';\r\n\r\n//import dependencies\r\nimport Highcharts from 'highcharts/highstock'\r\nimport HighchartsReact from 'highcharts-react-official'\r\nimport HighchartsMore from 'highcharts/highcharts-more'\r\nimport NoDataToDisplay from 'highcharts/modules/no-data-to-display';\r\n\r\nHighchartsMore(Highcharts);\r\nNoDataToDisplay(Highcharts);\r\n\r\n/**\r\n * Component to render Slices (charts)\r\n */\r\nclass Slice extends Component {\r\n\r\n    constructor(props) {\r\n\r\n        super(props);\r\n\r\n        this.isMobile = this.props.isMobile;\r\n        this.isForExport = this.props.isForExport;\r\n        this.isForComparison = this.props.isForComparison;\r\n\r\n        this.statsByPosition = this.props.statsByPosition;\r\n        this.statsReference = this.props.statsReference;\r\n\r\n        //set font size constants\r\n        this.fontSizes = undefined;\r\n        if (this.isForExport){\r\n            this.fontSizes =  {\r\n                title: this.isMobile ? '5.5vw' : '2.9em',\r\n                subtitle: this.isMobile ? '2.7vw' : '1.7em',\r\n                noData: '1.76em',\r\n                xAxisLabels: '1.8em',\r\n                dataLabels: '1.95em',\r\n                dataLabelsOutline: '0.13em',\r\n                tooltipHeader: '0em',\r\n                tooltip: '0em',\r\n                legend: '2.3em',\r\n                credits: '1.5em',\r\n                yAxisLabels: '0.65em'\r\n            };\r\n        }\r\n        else {\r\n            if (this.isMobile) {\r\n                this.fontSizes =  {\r\n                    title: '4.2vw',\r\n                    subtitle: '2.6vw',\r\n                    noData: '2.7vw',\r\n                    xAxisLabels: '2.15vw',\r\n                    dataLabels: '2.3vw',\r\n                    dataLabelsOutline: '0.3vw',\r\n                    tooltipHeader: '2.3vw',\r\n                    tooltip: '2.3vw',\r\n                    legend: '2.8vw',\r\n                    legendTitle: '2vw',\r\n                    credits: '2.3vw',\r\n                    yAxisLabels: '1vw'\r\n                };\r\n            }\r\n            else {\r\n                this.fontSizes =  {\r\n                    title: '1.8em',\r\n                    subtitle: '1.2em',\r\n                    noData: '1.35em',\r\n                    xAxisLabels: '1.15em',\r\n                    dataLabels: '1.15em',\r\n                    dataLabelsOutline: '0.21em',\r\n                    tooltipHeader: '1.05em',\r\n                    tooltip: '0.95em',\r\n                    legend: '1.4em',\r\n                    legendTitle: '1em',\r\n                    credits: '1.2em',\r\n                    yAxisLabels: '0.5em'\r\n                };\r\n            }\r\n        }\r\n\r\n        this.competitionDict = {\r\n            \"Premier League\": \"ENG\",\r\n            \"La Liga\": \"ESP\",\r\n            \"Serie A\": \"ITA\",\r\n            \"Bundesliga\": \"GER\",\r\n            \"Ligue 1\": \"FRA\",\r\n            \"Champions League\": \"UCL\",\r\n            \"Europa League\": \"UEL\"\r\n        };\r\n\r\n        //set subtitle constants\r\n        this.subtitles = {\r\n            \"FW\": \"Percentile Ranks vs Top-5 League <b>Forwards</b>\",\r\n            \"AM\": \"Percentile Ranks vs Top-5 League <b>Attacking Midfielders / Wingers</b>\",\r\n            \"CM\": \"Percentile Ranks vs Top-5 League <b>Central / Defensive Midfielders</b>\",\r\n            \"FB\": \"Percentile Ranks vs Top-5 League <b>Full-backs</b>\",\r\n            \"CB\": \"Percentile Ranks vs Top-5 League <b>Center-backs</b>\",\r\n            \"GK\": \"Percentile Ranks vs Top-5 League <b>Goalkeepers</b>\"\r\n        };\r\n\r\n        //add a link to the credits if the chart is not for export\r\n        let chartEvents;\r\n        if (!this.isForExport){\r\n            chartEvents = {\r\n                load: function() {\r\n                    this.credits.element.onclick = function() {\r\n                        window.open('https://fbref.com', '_blank');\r\n                    };\r\n                },\r\n            };\r\n        }\r\n\r\n        //set x-axis label distance\r\n        let xAxisLabelDistance;\r\n        if (this.isForExport){\r\n            xAxisLabelDistance = 70;\r\n        }\r\n        else {\r\n            xAxisLabelDistance = this.isMobile ? 60 : 40;\r\n        }\r\n\r\n        //define the tooltip positioner for shared tooltips (used for comparisons)\r\n        let tooltipPositioner = undefined;\r\n\r\n        if (this.isForComparison) {\r\n\r\n            if (this.isMobile){\r\n                tooltipPositioner = (labelWidth, labelHeight) => {\r\n                    return {x: 6, y: document.body.scrollHeight - labelHeight - 23};\r\n                }\r\n            }\r\n            else {\r\n                tooltipPositioner = function (labelWidth, labelHeight, point) {\r\n                    let xPos = point.plotX;\r\n                    let yPos = point.plotY;\r\n                    return {x: xPos, y: yPos - 15};\r\n                }\r\n            }\r\n\r\n\r\n        }\r\n\r\n        //define the text for the credits\r\n        let creditsText = this.isForExport ? \"\" : \"Data Sources: FBref.com | StatsBomb<br/>\";\r\n        creditsText += `Last Updated: ${this.props.lastUpdated} UTC`;\r\n\r\n        //Highcharts chart options\r\n        //variable options are initialized to undefined, and then modified on render using props\r\n        //consult the Highcharts API reference for detailed explanations of each option\r\n        //https://api.highcharts.com/highcharts/\r\n        this.chartOptions = {\r\n            title: {\r\n                useHTML: true,\r\n                text: undefined,\r\n                style: {\r\n                    fontSize: this.fontSizes['title'],\r\n                    fontWeight: 'bold',\r\n                },\r\n                margin: 35\r\n            },\r\n            subtitle: {\r\n                useHTML: true,\r\n                text: undefined,\r\n                style: {\r\n                    color: 'black',\r\n                    fontSize: this.fontSizes['subtitle'],\r\n                }\r\n            },\r\n            pane: {\r\n                startAngle: undefined\r\n            },\r\n            chart: {\r\n                backgroundColor: 'rgba(0, 0, 0, 0)',\r\n                style: {\r\n                    fontFamily: 'sans-serif'\r\n                },\r\n                animation: undefined,\r\n                polar: true,\r\n                type: 'column',\r\n                marginLeft: 90,\r\n                marginRight: 90,\r\n                marginTop: undefined,\r\n                marginBottom: undefined,\r\n                events: chartEvents,\r\n                zoomType: 'x',\r\n                panning: true,\r\n                panKey: 'shift'\r\n            },\r\n            xAxis: {\r\n                categories: undefined,\r\n                labels: {\r\n                    zIndex: 0,\r\n                    distance: xAxisLabelDistance,\r\n                    style: {\r\n                        color: 'black',\r\n                        fontSize: this.fontSizes['xAxisLabels'],\r\n                    },\r\n                    padding: 31\r\n                },\r\n                gridLineWidth: 2,\r\n                gridLineColor: '#777777',\r\n                gridZIndex: 2\r\n            },\r\n            yAxis: {\r\n                visible: undefined,\r\n                labels: {\r\n                    enabled: false,\r\n                    // style: {\r\n                    //     color: '#444444',\r\n                    //     fontSize: this.fontSizes['yAxisLabels'],\r\n                    // }\r\n                },\r\n                gridZIndex: 4,\r\n                lineWidth: 0,\r\n                endOnTick: true,\r\n                showFirstLabel: false,\r\n                showLastLabel: true,\r\n                min: -15,\r\n                max: 100,\r\n                tickPositions: [-23, 0, 25, 50, 75, 100, 102]\r\n            },\r\n            series: undefined,\r\n            colors: undefined,\r\n            plotOptions: {\r\n                series: {\r\n                    animation: {\r\n                        duration: this.props.isAnimatedInitial ? 750 : 0\r\n                    },\r\n                    states: {\r\n                        hover: {\r\n                            enabled: this.props.isAnimatedInitial\r\n                        }\r\n                    },\r\n                    dataLabels: {\r\n                        enabled: undefined,\r\n                        style: {\r\n                            fontWeight: 'bold',\r\n                            fontSize: this.fontSizes['dataLabels'],\r\n                            textOutline: this.fontSizes['dataLabelsOutline'] + \" #fafbfc\",\r\n                        },\r\n                        format: undefined,\r\n                        padding: 0,\r\n                        allowOverlap: true,\r\n                        z: 7\r\n                    },\r\n                    point: {\r\n                        events: {\r\n                            mouseOut: () => {\r\n                                if (this.isForComparison){\r\n                                    this.slice.tooltip.hide();\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                column: {\r\n                    grouping: false,\r\n                    shadow: false,\r\n                }\r\n            },\r\n            tooltip: {\r\n                enabled: this.props.hasTooltip,\r\n                shared: this.isForComparison,\r\n                useHTML: true,\r\n                outside: this.isMobile,\r\n                positioner: tooltipPositioner,\r\n                followPointer: !this.isMobile,\r\n                headerFormat: `<span style=\"font-size: ${this.fontSizes['tooltipHeader']}; font-weight: bold\">{point.key}</span><br/>─────`,\r\n                pointFormat: `<br>${this.isForComparison ? '<span style=\"color: {point.tooltipColor}; font-weight: bold\">{point.playerName}</span><br>' : \"\"}\r\n                              Raw Value: <span style=\"color: {point.tooltipColor}; font-weight: bold\">{point.p90_label}</span>\r\n                              <br>Percentile Rank: <span style=\"color: {point.tooltipColor}; font-weight: bold\">{point.percentile_label}</span>`,\r\n                style: {\r\n                    fontSize: this.fontSizes['tooltip'],\r\n                    zIndex: 100\r\n                },\r\n                borderColor: this.isForComparison ? '#b9b9b9' : undefined,\r\n                backgroundColor: '#fafbfc',\r\n                borderWidth: 2\r\n            },\r\n            legend: {\r\n                enabled: this.isForComparison && !this.isForExport,\r\n                title: {\r\n                    style: {\r\n                        fontSize: this.fontSizes['legendTitle']\r\n                    }\r\n                },\r\n                symbolPadding: this.isForExport ? 15 : (this.isMobile ? 20 : 7),\r\n                align: 'left',\r\n                verticalAlign: 'bottom',\r\n                layout: 'vertical',\r\n                itemStyle: {\r\n                    color: 'black',\r\n                    fontSize: this.fontSizes['legend']\r\n                },\r\n                itemHoverStyle: {\r\n                    color: '#666666'\r\n                },\r\n                y: this.isForExport ? 5 : 10,\r\n                margin: 0,\r\n                padding: 0,\r\n                itemMarginTop: 3\r\n            },\r\n            credits: {\r\n                text: creditsText,\r\n                position: {\r\n                    align: undefined,\r\n                    x: undefined,\r\n                    // y: this.isMobile ? -30 : (this.isForExport ? -15 : -20)\r\n                    y: this.isForExport ? -10 : (this.isMobile ? -30 : -20)\r\n                },\r\n                style: {\r\n                    lineHeight: this.isMobile || this.isForExport ? (this.isForExport ? \"20px\" : \"25px\") : null,\r\n                    fontSize: this.fontSizes['credits']\r\n                },\r\n            },\r\n            lang: {\r\n                noData: \"Select a template and competitions to proceed\",\r\n            },\r\n            noData: {\r\n                attr: {\r\n                    zIndex: 7\r\n                },\r\n                style: {\r\n                    fontWeight: 'bold',\r\n                    fontSize: this.fontSizes['noData'],\r\n                    color: '#303030'\r\n                }\r\n            }\r\n        };\r\n\r\n        //wrap the default Highcharts axis render function to group axis grids with the data series\r\n        //this is done in order to be able to set z-indices on the series relative to the axis grids\r\n        //relevant github issue and further explanation: https://github.com/highcharts/highcharts/issues/3321\r\n        Highcharts.wrap(Highcharts.Axis.prototype, 'render', function (proceed) {\r\n\r\n            console.log(this);\r\n            proceed.call(this);\r\n\r\n            let chart = this.chart;\r\n\r\n            if (!chart.seriesGroup) {\r\n                chart.seriesGroup = chart.renderer.g('series-group')\r\n                    .attr({\r\n                        zIndex: 3\r\n                    })\r\n                    .add();\r\n            }\r\n\r\n            if (this.coll === \"xAxis\" || this.coll === \"yAxis\"){\r\n                this.gridGroup\r\n                    .attr({\r\n                        zIndex: this.options.gridZIndex\r\n                    })\r\n                    .add(chart.seriesGroup);\r\n            }\r\n\r\n            return this;\r\n\r\n        });\r\n\r\n        // Highcharts.wrap(Highcharts.Tick.prototype, 'render', function (proceed) {\r\n        //\r\n        //     console.log(this);\r\n        //     proceed.call(this);\r\n        //\r\n        //     let chart = this.chart;\r\n        //\r\n        //     let axis = this.axis;\r\n        //\r\n        //     if (chart !== undefined){\r\n        //         if (!chart.seriesGroup) {\r\n        //             chart.seriesGroup = chart.renderer.g('series-group')\r\n        //                 .attr({\r\n        //                     zIndex: 3\r\n        //                 })\r\n        //                 .add();\r\n        //         }\r\n        //         axis.axisGroup\r\n        //             .attr({\r\n        //                 zIndex: this.pos === 0 ? 4 : 1,\r\n        //                 opacity: 0\r\n        //             })\r\n        //             .add(chart.seriesGroup);\r\n        //     }\r\n        //\r\n        // });\r\n\r\n        this.afterChartCreated = this.afterChartCreated.bind(this);\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * Called just after the Highcharts component is created\r\n     * Stores a reference to the chart in the class\r\n     * @param chart\r\n     */\r\n    afterChartCreated(chart) {\r\n        this.slice = chart;\r\n    }\r\n\r\n\r\n    /**\r\n     * Function to add borders to legend symbols\r\n     */\r\n    drawLegendBorders() {\r\n\r\n        let chart = this.slice;\r\n\r\n        for (let i=0; i<chart.legend.allItems.length; i++){\r\n            chart.legend.allItems[i].legendSymbol.element.setAttribute(\"stroke-width\", \"3\");\r\n            chart.legend.allItems[i].legendSymbol.element.setAttribute(\"stroke\", i === 0 ? \"rgba(231,84,83,0.55)\" : \"#000000\");\r\n        }\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * Called just after the component mount\r\n     */\r\n    componentDidMount() {\r\n        this.drawLegendBorders();\r\n    }\r\n\r\n\r\n    /**\r\n     * Called whenever the component updates. NOT called on the first render\r\n     * @param prevProps\r\n     * @param prevState\r\n     * @param snapshot\r\n     */\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        this.drawLegendBorders();\r\n    }\r\n\r\n\r\n    /**\r\n     * Function to generate a string representing the list of selected competitions\r\n     * @param (Object) allCompetitions - object containing arrays of all competitions on per-season basis\r\n     * @param {Object} selectedCompetitions - object containing arrays of selected competitions on per-season basis\r\n     */\r\n    selectedCompetitionsString(allCompetitions, selectedCompetitions, template) {\r\n\r\n        let allSeasons = [];\r\n\r\n        if (template === null || template === \"N/A\"){\r\n            return this.isForComparison ? [\"\"] : [\"-\"];\r\n        }\r\n\r\n        for (let season in selectedCompetitions){\r\n\r\n            if (selectedCompetitions[season].length === 0){\r\n                continue;\r\n            }\r\n\r\n            let currentSeasonString = `${season.replace(\"-\", \"/\")} (`;\r\n            let currentSeason = [];\r\n\r\n            let competitions = Object.values(allCompetitions[season]);\r\n\r\n            let allCompetitionsClubDict = {};\r\n            let selectedCompetitionsClubDict = {};\r\n\r\n            for (let i=0; i<competitions.length; i++){\r\n\r\n                let competition = competitions[i];\r\n                let isSelected = false;\r\n\r\n                if (selectedCompetitions[season].includes(competition)){\r\n                    isSelected = true;\r\n                }\r\n\r\n                let split = competition.split(\" | \");\r\n\r\n                let competitionName = split[0];\r\n                let competitionClub = split[1];\r\n\r\n                if (allCompetitionsClubDict[competitionName] === undefined){\r\n                    allCompetitionsClubDict[competitionName] = [competitionClub];\r\n                }\r\n                else {\r\n                    allCompetitionsClubDict[competitionName].push(competitionClub);\r\n                }\r\n\r\n                if (isSelected){\r\n                    if (selectedCompetitionsClubDict[competitionName] === undefined) {\r\n                        selectedCompetitionsClubDict[competitionName] = [competitionClub];\r\n                    }\r\n                    else {\r\n                        selectedCompetitionsClubDict[competitionName].push(competitionClub);\r\n                    }\r\n                }\r\n\r\n            }\r\n\r\n            for (let competition in selectedCompetitionsClubDict){\r\n\r\n                if (allCompetitionsClubDict[competition].length > 1){\r\n                    currentSeason.push(`${this.competitionDict[competition]} (${selectedCompetitionsClubDict[competition].join(\", \")})`)\r\n                }\r\n                else {\r\n                    currentSeason.push(this.competitionDict[competition]);\r\n                }\r\n\r\n            }\r\n\r\n            currentSeasonString += `${currentSeason.join(\", \")}) `;\r\n\r\n            allSeasons.push(currentSeasonString);\r\n\r\n        }\r\n\r\n        return allSeasons;\r\n    }\r\n\r\n    // competitionStringsComparison(allCompetitions, selectedCompetitions) {\r\n    //\r\n    //     let strings = [];\r\n    //\r\n    //     let seasons = {\r\n    //         0: [],\r\n    //         1: []\r\n    //     };\r\n    //\r\n    //     for (let player in seasons){\r\n    //\r\n    //         for (let season in selectedCompetitions[player]){\r\n    //             if (selectedCompetitions[player][season].length > 0){\r\n    //                 seasons[player].push(season);\r\n    //             }\r\n    //         }\r\n    //\r\n    //     }\r\n    //\r\n    //     let numRows = 0;\r\n    //     for (let player in seasons){\r\n    //         if (seasons[player].length > numRows){\r\n    //             numRows = seasons[player].length;\r\n    //         }\r\n    //     }\r\n    //\r\n    //     for (let i=0; i<numRows; i++){\r\n    //\r\n    //         let currentLineStrings = [];\r\n    //\r\n    //         for (let player in seasons){\r\n    //\r\n    //             if (seasons[player][i] !== undefined){\r\n    //\r\n    //                 let season = seasons[player][i];\r\n    //                 let currentSeasonString = this.temp(season, selectedCompetitions[player], allCompetitions[player]);\r\n    //\r\n    //                 currentLineStrings.push(currentSeasonString);\r\n    //\r\n    //             }\r\n    //             else {\r\n    //                 currentLineStrings.push(\"\");\r\n    //             }\r\n    //\r\n    //         }\r\n    //\r\n    //         strings.push(currentLineStrings);\r\n    //\r\n    //     }\r\n    //\r\n    // }\r\n\r\n\r\n    /**\r\n     * render function\r\n     * configures chart options based on props and draws the slice charts\r\n     * @return {*} - JSX code for the slice charts\r\n     */\r\n    render() {\r\n\r\n        let chartOptions = this.chartOptions;\r\n\r\n        let template = this.props.template;\r\n\r\n        let title;\r\n\r\n        if (this.isForComparison) {\r\n            if (!this.isForExport){\r\n                title = `<span class=\"chart-title player-1\"><a href=${this.props.url[0]} target=\"_blank\" rel=\"noopener noreferrer\">${this.props.names[0]}</a><a href=${this.props.url} target=\"_blank\" rel=\"noopener noreferrer\"><i id=\"link-icon\" class=\"fa fa-external-link\"></i></a></span>`;\r\n                title += `<span class=\"player-2\"> vs <span class=\"chart-title\"><a href=${this.props.url[1]} target=\"_blank\" rel=\"noopener noreferrer\">${this.props.names[1]}</a><a href=${this.props.url} target=\"_blank\" rel=\"noopener noreferrer\"><i id=\"link-icon\" class=\"fa fa-external-link\"></i></a></span></span>`;\r\n            }\r\n            else {\r\n                title = `<span class=\"chart-title player-1\"><a href=${this.props.url[0]} target=\"_blank\" rel=\"noopener noreferrer\">${this.props.names[0]}</a></span>`;\r\n                title += `<span class=\"player-2\"> vs <span class=\"chart-title\"><a href=${this.props.url[1]} target=\"_blank\" rel=\"noopener noreferrer\">${this.props.names[1]}</a></span></span>`;\r\n            }\r\n\r\n            if (this.isMobile && !this.isForExport){\r\n                let temp = {\r\n                    player1: this.selectedCompetitionsString(this.props.competitions[0], this.props.selectedCompetitions[0], template),\r\n                    player2: this.selectedCompetitionsString(this.props.competitions[1], this.props.selectedCompetitions[1], template)\r\n                };\r\n                title += \"<div id='competitions-container' class='centered-around-separator'>\";\r\n                for (let i=0; i<Math.max(temp.player1.length, temp.player2.length); i++){\r\n                    title += `<div><span class=\"player-1 competitions\">${temp.player1[i] === undefined ? \"\" : temp.player1[i]}</span> │ <span class=\"player-2 competitions\">${temp.player2[i] === undefined ? \"\" : temp.player2[i]}</span></div>`;\r\n                }\r\n                title += \"</div>\"\r\n            }\r\n            else {\r\n                title += '<br>';\r\n                title += `<div id='competitions-container'><span class=\"player-1 competitions\">${this.selectedCompetitionsString(this.props.competitions[0], this.props.selectedCompetitions[0], template).join(\"&nbsp|&nbsp&nbsp\")}</span>`;\r\n                title += `<span class=\"player-2 competitions\"> - ${this.selectedCompetitionsString(this.props.competitions[1], this.props.selectedCompetitions[1], template).join(\"&nbsp|&nbsp&nbsp\")}</span></div>`;\r\n            }\r\n        }\r\n        else {\r\n            title = `<span class=\"single-player-title chart-title\"><a href=${this.props.url} target=\"_blank\" rel=\"noopener noreferrer\">${this.props.name}</a>`;\r\n\r\n            if (!this.isForExport){\r\n                title += `<a href=${this.props.url} target=\"_blank\" rel=\"noopener noreferrer\"><i id=\"link-icon\" class=\"fa fa-external-link\"></i></a></span>`;\r\n            }\r\n\r\n            let competitionStringParts = this.selectedCompetitionsString(this.props.competitions, this.props.selectedCompetitions, template);\r\n            if (this.isMobile && !this.isForExport){\r\n                title += \"<div id='competitions-container'>\";\r\n                for (let i=0; i<competitionStringParts.length; i++){\r\n                    title += `<span class=\"single-player-title competitions\">${competitionStringParts[i]}</span><br>`;\r\n                }\r\n                title += \"</div>\"\r\n            }\r\n            else {\r\n                title += `<br><div id='competitions-container'><span class=\"single-player-title competitions\">${competitionStringParts.join(\"&nbsp|&nbsp&nbsp\")}</span></div>`;\r\n            }\r\n        }\r\n        chartOptions.title.text = title;\r\n\r\n        //build the subtitle\r\n        let subtitle;\r\n        if (this.props.template === null || this.props.template === \"N/A\" || this.props.series.length === 0) {\r\n            chartOptions.xAxis.visible = false;\r\n            chartOptions.yAxis.visible = false;\r\n            subtitle = \"-<br>-<br>\";\r\n        }\r\n        else {\r\n            chartOptions.xAxis.visible = true;\r\n            chartOptions.yAxis.visible = true;\r\n            if (this.isForComparison) {\r\n                if (this.isMobile && !this.isForExport){\r\n                    subtitle = `<div class=\"centered-around-separator\"><div><span><span class=\"player-1\">Age: <span class=\"player-1 age-minutes\">${this.props.ages[0]}</span>  </span>`;\r\n                    subtitle += `<span class=\"player-1\">Minutes: <span class=\"player-1 age-minutes\">${this.props.minutes[0].toLocaleString()}</span></span></span>`;\r\n                    subtitle += \"<b> - </b>\";\r\n                    subtitle += `<span><span class=\"player-2\">Age: <span class=\"age-minutes\">${this.props.ages[1]}</span>  </span>`;\r\n                    subtitle += `<span class=\"player-2\">Minutes: <span class=\"age-minutes\">${this.props.minutes[1].toLocaleString()}</span></span></span></div></div>`;\r\n                }\r\n                else {\r\n                    subtitle = `<span class=\"player-1\">Age: <span class=\"player-1 age-minutes\">${this.props.ages[0]}</span>   </span>`;\r\n                    subtitle += `<span class=\"player-1\">Minutes: <span class=\"player-1 age-minutes\">${this.props.minutes[0].toLocaleString()}</span></span>`;\r\n                    subtitle += \"<b> - </b>\";\r\n                    subtitle += `<span class=\"player-2\">Age: <span class=\"age-minutes\">${this.props.ages[1]}</span>   </span>`;\r\n                    subtitle += `<span class=\"player-2\">Minutes: <span class=\"age-minutes\">${this.props.minutes[1].toLocaleString()}</span></span>`;\r\n                    subtitle += \"<br>\"\r\n                }\r\n            }\r\n            else {\r\n                subtitle = `Age: <span class=\"single-player-title age-minutes\">${this.props.age}</span>  `;\r\n                subtitle += `Minutes: <span class=\"single-player-title age-minutes\">${this.props.minutes.toLocaleString()}</span><br>`;\r\n            }\r\n            subtitle += `${this.subtitles[this.props.template]}`;\r\n        }\r\n        //set the subtitle\r\n        chartOptions.subtitle.text = subtitle;\r\n\r\n        //calculate the start angle based on the number of wedges\r\n        //the goal is to have the first wedge pointing to 0 degrees\r\n        chartOptions.pane.startAngle = -((360/this.props.statsKeys.length)/2);\r\n\r\n        let chart = chartOptions.chart;\r\n        //set animation (on update) to true or false\r\n        chart.animation = this.props.isAnimated;\r\n        //set chart margins\r\n        if (this.isForExport){\r\n            chart.marginTop = 230;\r\n            chart.marginBottom = 130;\r\n        }\r\n        else {\r\n            chart.marginBottom = (this.props.creditsPosition === \"right\" && !this.props.isMobile) ? 30 : 60;\r\n        }\r\n\r\n        let categories = [];\r\n\r\n        if (template !== null && template !== \"N/A\"){\r\n\r\n            let statsKeys = this.props.statsKeys;\r\n            let selectedStats = this.statsByPosition[template].filter(x => statsKeys.includes(x));\r\n\r\n            if (this.isMobile){\r\n                for (let i=0; i<selectedStats.length; i++) {\r\n\r\n                    let stat = selectedStats[i];\r\n                    categories[i] = `${this.statsReference[stat]['mobileLabel']}  <span style=\"font-size: 0.8em\">${this.statsReference[stat]['suffix']}</span>`;\r\n\r\n                }\r\n            }\r\n            else {\r\n                for (let i=0; i<selectedStats.length; i++) {\r\n\r\n                    let stat = selectedStats[i];\r\n                    categories[i] = `${this.statsReference[stat]['label']}  <span style=\"font-size: 0.8em\">${this.statsReference[stat]['suffix']}</span>`;\r\n\r\n                }\r\n            }\r\n\r\n        }\r\n        else {\r\n\r\n            categories = Array(12).fill(\"-\");\r\n\r\n        }\r\n\r\n        let xAxis = chartOptions.xAxis;\r\n\r\n        //set x-axis labels\r\n        xAxis.categories = categories;\r\n\r\n        //set data points\r\n        chartOptions.series = this.props.series.map((data, index) => {\r\n            return {\r\n                name: data[0].playerName,\r\n                data: data,\r\n                zIndex: index === 0 ? 0 : 3,\r\n                pointPadding: 0,\r\n                groupPadding: 0,\r\n                stickyTracking: false,\r\n            };\r\n        });\r\n\r\n        //set series colors\r\n        chartOptions.colors = [\r\n            '#e75453',\r\n            '#fafbfc'\r\n        ];\r\n\r\n        //set data labels\r\n        let dataLabels = chartOptions.plotOptions.series.dataLabels;\r\n        dataLabels.enabled = this.props.template !== \"N/A\" && !this.isForComparison;\r\n        dataLabels.format = this.props.labelType === \"raw\" ? '{point.p90_label}' : '{point.percentile_label}';\r\n\r\n        //set credits position\r\n        let credits = chartOptions.credits;\r\n        let creditsPosition = this.props.creditsPosition;\r\n        credits.position.align = this.isForExport ? \"center\" : creditsPosition;\r\n        credits.position.x = this.isForExport || creditsPosition === \"center\" ? 0 : -10;\r\n\r\n        let className = this.isForExport ? undefined : \"result\";\r\n        let id = this.isForExport ? \"export\" : \"chart\";\r\n\r\n        let helpButton = null;\r\n        if (!this.isForExport)\r\n            helpButton = <button className=\"fas fa-question-circle explanation-button\" onClick={this.props.toggleGlossaryOverlay}/>;\r\n\r\n        //pass chart options to the Highcharts component and render\r\n        return (\r\n            <div className={className} id={id}>\r\n                {helpButton}\r\n                <HighchartsReact\r\n                    constructorType={\"chart\"}\r\n                    highcharts={Highcharts}\r\n                    containerProps={{style: {width: '100%', height: '100%'}}}\r\n                    options={chartOptions}\r\n                    callback={this.afterChartCreated}\r\n                />\r\n            </div>\r\n        );\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default (Slice);\r\n","import React, { Component } from 'react';\r\n\r\n\r\n/**\r\n * Component to render the glossary overlay\r\n */\r\nclass GlossaryOverlay extends Component {\r\n\r\n    constructor(props) {\r\n\r\n        super(props);\r\n        this.toggleGlossaryOverlay = this.props.toggleGlossaryOverlay;\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * render function\r\n     * displays the player comparison search screen\r\n     * @return {*} - JSX code for the searchbar and its container\r\n     */\r\n    render() {\r\n\r\n        //return JSX code for the glossary overlay\r\n        return (\r\n            <div className={`overlay ${this.props.display ? \"open\" : \"closed\"}`} id=\"glossary-overlay\">\r\n                <div className={'overlay-inner-container'} id={'glossary-container'}>\r\n                    <button className=\"close-overlay far fa-times-circle\" onClick={this.toggleGlossaryOverlay}/>\r\n                    <div className=\"help-section-container\">\r\n                        <h2>Interpreting the Slices</h2>\r\n                        <p>\r\n                            A Football Slice is made up of a number of wedges (12 for outfield players, 3 for goalkeepers),\r\n                            each representing a relevant stat. The length of each wedge corresponds to the\r\n                            selected player's percentile rank for the stat when they are compared to top-5 league\r\n                            players who play in a similar position.\r\n                        </p>\r\n                        <p>\r\n                            The percentile rank of a score is the percentage of scores within a dataset\r\n                            that are equal to or lower than the score. This is reversed for stats where\r\n                            a lower value is better, such as 'turnovers'. <b>In short, a bigger bar is always better.</b>\r\n                        </p>\r\n                        <p>\r\n                            The colours help to group similar-ish stats together (as well as improve the charts'\r\n                            visual impact).\r\n                        </p>\r\n                        <ul>\r\n                            <li><span style={{color: '#f15c80', fontWeight: 'bold'}}>Red</span> is for goal-scoring & shooting stats,</li>\r\n                            <li><span style={{color: '#e4c000', fontWeight: 'bold'}}>Yellow</span> is for passing, chance creation & ball progression</li>\r\n                            <li><span style={{color: '#87e179', fontWeight: 'bold'}}>Green</span> is for dribbling & ball retention</li>\r\n                            <li><span style={{color: '#7db9f0', fontWeight: 'bold'}}>Blue</span> is for defending</li>\r\n                            <li>and <span style={{color: '#787ccd', fontWeight: 'bold'}}>Purple</span> is for goalkeeping stats</li>\r\n                        </ul>\r\n                    </div>\r\n                    <div className=\"help-section-container\" id=\"glossary-section-container\">\r\n                        <h2>Glossary</h2>\r\n                        <ul>\r\n                            <li>\r\n                                <span style={{color: '#f15c80', fontWeight: 'bold'}}>Non-Penalty Goal</span>&nbsp;\r\n                                A goal that did not stem directly from a penalty kick.\r\n                            </li>\r\n                            <li>\r\n                                <span style={{color: '#f15c80', fontWeight: 'bold'}}>Non-Penalty xG (Expected Goals)</span>&nbsp;\r\n                                Expected goals that did not stem directly from penalty kicks.*\r\n                            </li>\r\n                            <li>\r\n                                <span style={{color: '#f15c80', fontWeight: 'bold'}}>Non-Penalty xG/Shot</span>&nbsp;\r\n                                The average expected goal value of shots taken, excluding penalty kicks.\r\n                            </li>\r\n                            <li>\r\n                                <span style={{color: '#f15c80', fontWeight: 'bold'}}>Aerial Win</span>&nbsp;\r\n                                Winning the ball in a duel that was challenged in the air.\r\n                            </li>\r\n                            <li>\r\n                                <span style={{color: '#f15c80', fontWeight: 'bold'}}>Aerial Win %</span>&nbsp;\r\n                                The percentage of aerials duels contested that were won.\r\n                            </li>\r\n                            <li>\r\n                                <span style={{color: '#e4c000', fontWeight: 'bold'}}>Touch in Box</span>&nbsp;\r\n                                Having possession of the ball in the opposition's penalty area.\r\n                                (Note: Receiving a pass, then dribbling, then sending a pass counts as one touch)\r\n                            </li>\r\n                            <li>\r\n                                <span style={{color: '#e4c000', fontWeight: 'bold'}}>xA (Expected Assists)</span>&nbsp;\r\n                                Expected goals that resulted from a player's shot assists, including set pieces.*\r\n                            </li>\r\n                            <li>\r\n                                <span style={{color: '#e4c000', fontWeight: 'bold'}}>OP (Open Play) Shot-Creating Action</span>&nbsp;\r\n                                Excluding set pieces, one of the last two offensive actions that directly\r\n                                led to a shot; such as a pass, dribble or a drawn foul.\r\n                                (Note: A single player can receive credit for multiple actions and the shot-taker can also receive credit)\r\n                            </li>\r\n                            <li>\r\n                                <span style={{color: '#e4c000', fontWeight: 'bold'}}>Pass into Box</span>&nbsp;\r\n                                A completed pass that entered the opposition's penalty area, excluding set pieces.\r\n                            </li>\r\n                            <li>\r\n                                <span style={{color: '#e4c000', fontWeight: 'bold'}}>Pass into Final 1/3</span>&nbsp;\r\n                                A completed pass that entered the third of the pitch that is closest to the opposition's goal, excluding set pieces.\r\n                            </li>\r\n                            <li>\r\n                                <span style={{color: '#e4c000', fontWeight: 'bold'}}>Yards Progressed</span>&nbsp;\r\n                                Distance, in yards, that the ball was moved towards the oppositions's goal\r\n                                with passes and carries.\r\n                                (Note: Passes and carries away from the oppositions's goal are counted as zero progressive yards)\r\n                            </li>\r\n                            <li>\r\n                                <span style={{color: '#e4c000', fontWeight: 'bold'}}>Pass Completion %</span>&nbsp;\r\n                                The percentage of attempted passes that successfully found a teammate.\r\n                            </li>\r\n                            <li>\r\n                                <span style={{color: '#e4c000', fontWeight: 'bold'}}>Long Pass Completion %</span>&nbsp;\r\n                                The percentage of attempted passes of 25 yards or more that successfully found a teammate.\r\n                            </li>\r\n                            <li>\r\n                                <span style={{color: '#e4c000', fontWeight: 'bold'}}>Launched Pass Completion %</span>&nbsp;\r\n                                The percentage of attempted passes of 40 yards or more that successfully found a teammate, including goal kicks.\r\n                            </li>\r\n                            <li>\r\n                                <span style={{color: '#87e179', fontWeight: 'bold'}}>Successful Dribble</span>&nbsp;\r\n                                A successful attempt at taking on a player and making it past them whilst retaining possession.\r\n                            </li>\r\n                            <li>\r\n                                <span style={{color: '#87e179', fontWeight: 'bold'}}>Dribble Success %</span>&nbsp;\r\n                                The percentage of attempted dribbles that were successful.\r\n                            </li>\r\n                            <li>\r\n                                <span style={{color: '#87e179', fontWeight: 'bold'}}>Turnover</span>&nbsp;\r\n                                A miscontrol, or being tackled by an opponent and losing possession of the ball without attempting a dribble.\r\n                            </li>\r\n                            <li>\r\n                                <span style={{color: '#7db9f0', fontWeight: 'bold'}}>pAdj</span>&nbsp;\r\n                                Possession Adjusted (using the StatsBomb sigmoid function).**\r\n                            </li>\r\n                            <li>\r\n                                <span style={{color: '#7db9f0', fontWeight: 'bold'}}>Successful Pressure</span>&nbsp;\r\n                                A pressing action that led to the team regaining possession within the next 5 seconds.\r\n                            </li>\r\n                            <li>\r\n                                <span style={{color: '#7db9f0', fontWeight: 'bold'}}>Interception</span>&nbsp;\r\n                                A prevention of an opponent's pass from reaching another opponent by moving into the line of the pass.\r\n                            </li>\r\n                            <li>\r\n                                <span style={{color: '#7db9f0', fontWeight: 'bold'}}>Successful Tackle</span>&nbsp;\r\n                                A successful dispossession of an opponent (whether the tackler's team won possession of the ball or not).\r\n                            </li>\r\n                            <li>\r\n                                <span style={{color: '#7db9f0', fontWeight: 'bold'}}>Tackle/Dribbled Past %</span>&nbsp;\r\n                                The percentage of dribblers faced that were tackled.\r\n                            </li>\r\n                            <li>\r\n                                <span style={{color: '#7db9f0', fontWeight: 'bold'}}>Aerial Win</span>&nbsp;\r\n                                Winning the ball in a duel that was challenged in the air.\r\n                            </li>\r\n                            <li>\r\n                                <span style={{color: '#7db9f0', fontWeight: 'bold'}}>Aerial Win %</span>&nbsp;\r\n                                The percentage of aerials duels contested that were won.\r\n                            </li>\r\n                            <li>\r\n                                <span style={{color: '#7db9f0', fontWeight: 'bold'}}>Clearance</span>&nbsp;\r\n                                An action where a player kicked/headed the ball away from their own goal.\r\n                            </li>\r\n                            <li>\r\n                                <span style={{color: '#787ccd', fontWeight: 'bold'}}>GSAA (Goals Saved Above Average) %</span>&nbsp;\r\n                                (Post-Shot xG − Goals Conceded (excluding own goals)) ÷ Shots on Target Faced.***\r\n                            </li>\r\n                            <li>\r\n                                <span style={{color: '#787ccd', fontWeight: 'bold'}}>Cross Stopping %</span>&nbsp;\r\n                                The percentage of attempted crosses into the penalty area that were stopped by the goalkeeper.\r\n                            </li>\r\n                        </ul>\r\n                        <div id=\"glossary-links\">\r\n                                <span>\r\n                                    * <a href=\"https://fbref.com/en/expected-goals-model-explained/\" target=\"_blank\" rel=\"noopener noreferrer\">Expected goals/assists model explanation</a>\r\n                                </span>\r\n                                <span>\r\n                                    ** <a href=\"https://statsbomb.com/2014/06/introducing-possession-adjusted-player-stats/\" target=\"_blank\" rel=\"noopener noreferrer\">Possession adjustment explanation</a>\r\n                                </span>\r\n                                <span>\r\n                                    *** <a href=\"https://statsbomb.com/2018/12/introducing-goalkeeper-radars/\" target=\"_blank\" rel=\"noopener noreferrer\">GSAA % explanation</a>\r\n                                </span>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        );\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default (GlossaryOverlay);\r\n","import React, { Component } from 'react';\r\nimport SearchBar from \"./SearchBar\";\r\n\r\n\r\n/**\r\n * Component to render the player comparison search screen\r\n * Also handles the live search requests and aborts\r\n */\r\nclass CompareSearchOverlay extends Component {\r\n\r\n    constructor(props) {\r\n\r\n        super(props);\r\n\r\n        this.isMobile = this.props.isMobile;\r\n\r\n        this.toggleCompareSearchOverlay = this.props.toggleCompareSearchOverlay;\r\n        this.currentPlayerName = this.props.currentPlayerName;\r\n        this.currentPlayerCode = this.props.currentPlayerCode;\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * render function\r\n     * displays the player comparison search screen\r\n     * @return {*} - JSX code for the searchbar and its container\r\n     */\r\n    render() {\r\n\r\n        //return JSX code for the searchbar\r\n        return (\r\n            <div className={`overlay ${this.props.display ? \"open\" : \"closed\"}`} id=\"compare-search-overlay\">\r\n                <button className=\"close-overlay far fa-times-circle\" onClick={this.toggleCompareSearchOverlay}/>\r\n                <span><h3>Compare {this.currentPlayerName} to...</h3></span>\r\n                <SearchBar\r\n                    isMobile={this.isMobile}\r\n                    page=\"compare\"\r\n                    currentPlayerCode={this.currentPlayerCode}\r\n                />\r\n            </div>\r\n\r\n        );\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default (CompareSearchOverlay);\r\n","import React, { Component } from 'react';\r\n\r\n\r\n/**\r\n * Component to render the player comparison search screen\r\n * Also handles the live search requests and aborts\r\n */\r\nclass LoaderOverlay extends Component {\r\n\r\n    /**\r\n     * render function\r\n     * displays the export loader overlay\r\n     * @return {*} - JSX code for the searchbar and its container\r\n     */\r\n    render() {\r\n\r\n        //return JSX code for the searchbar\r\n        return (\r\n            <div className={`overlay ${this.props.display ? \"open\" : \"closed\"}`} id=\"export-loader-overlay\">\r\n                <div className=\"loader\">Loading...</div>\r\n            </div>\r\n\r\n        );\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default (LoaderOverlay);\r\n","import React, { Component } from 'react';\r\nimport { Redirect } from 'react-router-dom'\r\n\r\n//import dependencies\r\nimport Cookies from 'universal-cookie';\r\nimport dateFormat from 'dateformat';\r\n\r\n//import utility functions, constants\r\nimport {\r\n    filterStats,\r\n    calculateStats,\r\n    constructChartInput,\r\n    ageRangesString,\r\n    changeTemplate,\r\n    changeSelectedCompetitions,\r\n    changePAdjTypes,\r\n    changeLabelType,\r\n    toggleCreditsPosition,\r\n    exportChart,\r\n    toggleGlossaryOverlay,\r\n    toggleCompareSearchOverlay\r\n} from \"../utilities/SliceUtilities\"\r\n\r\n//import components\r\nimport LoadingSpinner from \"../components/LoadingSpinner\";\r\nimport SearchBar from \"../components/SearchBar\";\r\nimport SliceOptions from \"../components/SliceOptions\";\r\nimport Slice from \"../components/Slice\";\r\nimport GlossaryOverlay from \"../components/GlossaryOverlay\";\r\nimport CompareSearchOverlay from \"../components/CompareSearchOverlay\";\r\nimport LoaderOverlay from \"../components/LoaderOverlay\";\r\n\r\n//initialize cookies\r\nconst cookies = new Cookies();\r\n\r\n\r\n/**\r\n * Stats page component\r\n */\r\nclass Stats extends Component {\r\n\r\n    //class variable to track if the component is mounted\r\n    _isMounted = false;\r\n\r\n    /**\r\n     * Constructor\r\n     * @param props\r\n     */\r\n    constructor(props){\r\n\r\n        super(props);\r\n\r\n        //bind utility functions to this context\r\n        this.filterStats = filterStats.bind(this);\r\n        this.calculateStats = calculateStats.bind(this);\r\n        this.constructChartInput = constructChartInput.bind(this);\r\n        this.ageRangesString = ageRangesString.bind(this);\r\n        this.changeTemplate = changeTemplate.bind(this);\r\n        this.changePAdjTypes = changePAdjTypes.bind(this);\r\n        this.changeSelectedCompetitions = changeSelectedCompetitions.bind(this);\r\n        this.changeLabelType = changeLabelType.bind(this);\r\n        this.toggleCreditsPosition = toggleCreditsPosition.bind(this);\r\n        this.exportChart = exportChart.bind(this);\r\n        this.toggleGlossaryOverlay = toggleGlossaryOverlay.bind(this);\r\n        this.toggleCompareSearchOverlay = toggleCompareSearchOverlay.bind(this);\r\n\r\n        //device and browser info\r\n        this.isMobile = this.props.isMobile;\r\n        this.isSafari = this.props.isSafari;\r\n\r\n        //cookies\r\n        let pAdjTypesCookie = cookies.get('pAdjTypes');\r\n        let labelTypeCookie = cookies.get('labelType');\r\n        let creditsPositionCookie = cookies.get('creditsPosition');\r\n\r\n        this.state = {\r\n            isLoading: true,\r\n            error: null,\r\n            redirect: false,\r\n            showGlossaryOverlay: false,\r\n            showCompareSearchOverlay: false,\r\n            showExportLoaderOverlay: false,\r\n            renderForExport: false,\r\n            percentileArrays: this.props.percentileArrays,\r\n            statsByPosition: {},\r\n            statsReference: {},\r\n            code: this.props.match.params.code,\r\n            name: '',\r\n            url: '',\r\n            age: 0,\r\n            clubs: {},\r\n            percentileEntries: {},\r\n            stats: {},\r\n            isGK: false,\r\n            isOutfieldGK: false,\r\n            outfieldGKStats: null,\r\n            standardStats: null,\r\n            lastUpdated: null,\r\n            template: null,\r\n            competitions: {},\r\n            selectedCompetitions: {},\r\n            pAdjTypes: pAdjTypesCookie === undefined ? { offensive: false, defensive: false } : pAdjTypesCookie,\r\n            labelType: labelTypeCookie === undefined ? \"raw\" : labelTypeCookie,\r\n            creditsPosition: creditsPositionCookie === undefined ? \"right\" : creditsPositionCookie,\r\n            isAnimated: true\r\n        };\r\n\r\n        this.getStats();\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * Called after component has mounted\r\n     */\r\n    componentDidMount() {\r\n        this._isMounted = true;\r\n    }\r\n\r\n\r\n    /**\r\n     * Called just before the component receives new props. This is done to ensure that new props trigger a re-render\r\n     * @param nextProps\r\n     * @param nextContext\r\n     */\r\n    //TODO: re-factor because componentWillReceiveProps has been deprecated\r\n    UNSAFE_componentWillReceiveProps(nextProps, nextContext) {\r\n\r\n        let { code } = nextProps.match.params;\r\n\r\n        this.setState({\r\n            redirect: false,\r\n            isLoading: true,\r\n            code: code\r\n        }, () => {\r\n            this.getStats();\r\n        });\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * Function to send a post request to the server to retrieve the stats of the player\r\n     */\r\n    getStats = () => {\r\n\r\n        const code = this.state.code;\r\n\r\n        //fetch stats\r\n        fetch('/api/stats', {\r\n            method: 'post',\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify({\r\n                \"code\": code,\r\n                \"percentilesTimestamp\": this.state.percentileArrays['lastUpdated']\r\n            })\r\n        })\r\n        .then(res => {\r\n            if (res.ok) {\r\n                return res.json()\r\n            }\r\n            else {\r\n                throw new Error(\"Failed to fetch. This is likely due to a malformed URL. Please try searching for the player again.\")\r\n            }\r\n        })\r\n        .then(response => this.processStats(response))\r\n        .catch(error => {\r\n            if (this._isMounted){\r\n                //redirect if a v1 URL is detected\r\n                if (code.match(\"^Players_[0-9]+_Show_\")){\r\n                    this.setState({\r\n                        redirect: true,\r\n                        isLoading: false,\r\n                        code: code.split(\"_\")[1]\r\n                    })\r\n                }\r\n                else {\r\n                    this.setState({\r\n                        error: error,\r\n                        isLoading: false\r\n                    })\r\n                }\r\n            }\r\n        });\r\n\r\n    };\r\n\r\n\r\n    /**\r\n     * Function to process retrieved player stats and save to state\r\n     * @param {Object} response - object containing the player metadata and stats, as well as new percentile arrays\r\n     * in the event that the server needs to update a client's percentile arrays.\r\n     */\r\n    processStats = (response) => {\r\n\r\n        //check if the stats object contains new percentile arrays\r\n        if (response.newPercentileArrays !== undefined){\r\n            //update percentile arrays in parent component as required\r\n            this.props.updatePercentileArrays(response.newPercentileArrays);\r\n        }\r\n\r\n        let playerData = response.data;\r\n\r\n        //process player position entry and set template. template is set to the most recent non-\"N/A\" position\r\n        //in the player's position entries\r\n        let template = \"N/A\";\r\n        for (let season in playerData.positions){\r\n            let position = playerData.positions[season][0];\r\n            if (position !== \"N/A\"){\r\n                template = position;\r\n            }\r\n        }\r\n\r\n        let seasons = Object.keys(playerData.stats);\r\n\r\n        let competitions = {};\r\n        let selectedCompetitions = {};\r\n\r\n        //retrieve player competitions. stored in an object where the keys are seasons and the values are arrays\r\n        //of the competitions for the season\r\n        for (let season in playerData.stats){\r\n\r\n            competitions[season] = [];\r\n            selectedCompetitions[season] = [];\r\n\r\n            for (let competition in playerData.stats[season]){\r\n                competitions[season].push(competition);\r\n                //only 2 most recent season in selected competitions\r\n                if (season === seasons[seasons.length - 1] || season === seasons[seasons.length - 2]){\r\n                    selectedCompetitions[season].push(competition);\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n        if (this._isMounted){\r\n\r\n            this.setState({\r\n                isLoading: false,\r\n                statsByPosition: response.statsByPosition,\r\n                statsReference: response.statsReference,\r\n                name: playerData.name,\r\n                url: \"https://www.fbref.com\" + playerData.fbrefURL,\r\n                age: playerData.age,\r\n                clubs: playerData.clubs,\r\n                percentileEntries: playerData.percentileEntries,\r\n                stats: playerData.stats,\r\n                isGK: template === \"GK\",\r\n                isOutfieldGK: playerData.outfieldGKStats != null,\r\n                outfieldGKStats: playerData.outfieldGKStats,\r\n                standardStats: playerData.stats,\r\n                lastUpdated: dateFormat(playerData.lastUpdated, \"dd/mm/yyyy, h:MM TT\", true),\r\n                template: template,\r\n                competitions: JSON.parse(JSON.stringify(competitions)),\r\n                selectedCompetitions: JSON.parse(JSON.stringify(selectedCompetitions))\r\n            });\r\n\r\n            document.title = `${playerData.name} | Football Slices`;\r\n\r\n            this.props.recordPageViewGA(window.location.pathname);\r\n        }\r\n\r\n    };\r\n\r\n\r\n    /**\r\n     * Called just before the component un-mounts\r\n     */\r\n    componentWillUnmount() {\r\n        this._isMounted = false;\r\n    }\r\n\r\n\r\n    /**\r\n     * render function\r\n     * @return {*} - JSX code for the stats page\r\n     */\r\n    render() {\r\n\r\n        let {\r\n            isLoading,\r\n            error,\r\n            redirect,\r\n            showGlossaryOverlay,\r\n            showCompareSearchOverlay,\r\n            showExportLoaderOverlay,\r\n            renderForExport,\r\n            statsByPosition,\r\n            statsReference,\r\n            code,\r\n            url,\r\n            name,\r\n            age,\r\n            clubs,\r\n            stats,\r\n            isGK,\r\n            isOutfieldGK,\r\n            lastUpdated,\r\n            competitions,\r\n            selectedCompetitions,\r\n            template,\r\n            pAdjTypes,\r\n            labelType,\r\n            creditsPosition,\r\n            isAnimated\r\n        } = this.state;\r\n\r\n        //display loading spinner while the server responds to POST request for the stats\r\n        if (isLoading) {\r\n            return (\r\n                <LoadingSpinner/>\r\n            )\r\n        }\r\n\r\n        else if (redirect){\r\n            return <Redirect to={`/stats/${code}`}/>\r\n        }\r\n\r\n        //display the error message screen if an error is caught\r\n        else if (error !== null) {\r\n            return (\r\n                <div id=\"main2\">\r\n                    <SearchBar\r\n                        isMobile={this.isMobile}\r\n                        page=\"stats\"\r\n                        query={this.state.query}\r\n                    />\r\n                    <div className=\"screen\" id=\"error-screen\">\r\n                        <p>{error.message}</p>\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n\r\n        //build stats page otherwise\r\n        else {\r\n\r\n            //calculate stats and construct chart input\r\n            let filteredStats = {};\r\n            let series = [];\r\n\r\n            let statsKeys;\r\n\r\n            if (template !== null && template !== \"N/A\") {\r\n\r\n                filteredStats = this.filterStats(stats);\r\n                let calculatedStats = this.calculateStats(filteredStats);\r\n\r\n                if (Object.keys(filteredStats).length !== 0){\r\n                    let chartInput = this.constructChartInput(statsByPosition, calculatedStats.statsPer90, calculatedStats.percentiles);\r\n                    series.push(chartInput);\r\n                }\r\n\r\n                statsKeys = calculatedStats.statsKeys;\r\n\r\n            }\r\n\r\n            let exportSlice = null;\r\n\r\n            if (renderForExport) {\r\n                exportSlice =\r\n                <Slice\r\n                    isMobile={this.isMobile}\r\n                    isForComparison={false}\r\n                    isForExport={true}\r\n                    isAnimated={false}\r\n                    isAnimatedInitial={false}\r\n                    hasTooltip={false}\r\n                    creditsPosition={creditsPosition}\r\n                    url={null}\r\n                    lastUpdated={lastUpdated}\r\n                    template={template}\r\n                    labelType={labelType}\r\n                    name={name}\r\n                    competitions={competitions}\r\n                    selectedCompetitions={selectedCompetitions}\r\n                    age={age}\r\n                    minutes={filteredStats['minutes']}\r\n                    statsKeys={statsKeys}\r\n                    statsByPosition={statsByPosition}\r\n                    statsReference={statsReference}\r\n                    series={series}\r\n                />\r\n            }\r\n\r\n            //return JSX code for the stats page\r\n            return (\r\n                <div id=\"main2\">\r\n                    <GlossaryOverlay\r\n                        display={showGlossaryOverlay}\r\n                        toggleGlossaryOverlay={this.toggleGlossaryOverlay}\r\n                    />\r\n                    <CompareSearchOverlay\r\n                        isMobile={this.isMobile}\r\n                        display={showCompareSearchOverlay}\r\n                        currentPlayerCode={code}\r\n                        currentPlayerName={name}\r\n                        toggleCompareSearchOverlay={this.toggleCompareSearchOverlay}\r\n                    />\r\n                    <LoaderOverlay\r\n                        display={showExportLoaderOverlay}\r\n                    />\r\n                    <SearchBar\r\n                        isMobile={this.isMobile}\r\n                        page=\"stats\"\r\n                    />\r\n                    <div className=\"screen2\" id=\"stats-screen\">\r\n                        <SliceOptions\r\n                            isMobile={this.isMobile}\r\n                            isForComparison={false}\r\n                            isGK={isGK}\r\n                            isOutfieldGK={isOutfieldGK}\r\n                            template={template}\r\n                            competitions={competitions}\r\n                            clubs={clubs}\r\n                            selectedCompetitions={selectedCompetitions}\r\n                            pAdjTypes={pAdjTypes}\r\n                            labelType={labelType}\r\n                            changeTemplate={this.changeTemplate}\r\n                            changeSelectedCompetitions={this.changeSelectedCompetitions}\r\n                            changePAdjTypes={this.changePAdjTypes}\r\n                            changeLabelType={this.changeLabelType}\r\n                            toggleCreditsPosition={this.toggleCreditsPosition}\r\n                            exportChart={this.exportChart}\r\n                            toggleCompareSearchOverlay={this.toggleCompareSearchOverlay}\r\n                        />\r\n                        <Slice\r\n                            isMobile={this.isMobile}\r\n                            isForExport={false}\r\n                            isAnimated={isAnimated}\r\n                            isAnimatedInitial={true}\r\n                            hasTooltip={true}\r\n                            creditsPosition={creditsPosition}\r\n                            url={url}\r\n                            lastUpdated={lastUpdated}\r\n                            template={template}\r\n                            labelType={labelType}\r\n                            name={name}\r\n                            competitions={competitions}\r\n                            selectedCompetitions={selectedCompetitions}\r\n                            age={age}\r\n                            minutes={filteredStats['minutes']}\r\n                            statsKeys={statsKeys}\r\n                            statsByPosition={statsByPosition}\r\n                            statsReference={statsReference}\r\n                            series={series}\r\n                            toggleGlossaryOverlay={this.toggleGlossaryOverlay}\r\n                        />\r\n                    </div>\r\n                    {/*Second slice used for exports. Not displayed*/}\r\n                    {exportSlice}\r\n                </div>\r\n            );\r\n\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default Stats;\r\n","import React, { Component } from 'react';\r\n// import $ from \"jquery\";\r\n\r\n//import dependencies\r\nimport Cookies from 'universal-cookie';\r\n\r\n//import components\r\nimport LoadingSpinner from \"../components/LoadingSpinner\";\r\nimport SearchBar from \"../components/SearchBar\";\r\nimport SliceOptions from \"../components/SliceOptions\";\r\nimport Slice from \"../components/Slice\";\r\nimport GlossaryOverlay from \"../components/GlossaryOverlay\";\r\nimport CompareSearchScreen from \"../components/CompareSearchOverlay\";\r\nimport LoaderOverlay from \"../components/LoaderOverlay\";\r\n\r\n//import utility functions\r\nimport {\r\n    filterStats,\r\n    calculateStats,\r\n    constructChartInput,\r\n    ageRangesString,\r\n    changeTemplate,\r\n    changeSelectedCompetitions,\r\n    changePAdjTypes,\r\n    changeLabelType,\r\n    toggleCreditsPosition,\r\n    exportChart,\r\n    toggleGlossaryOverlay,\r\n    toggleCompareSearchOverlay\r\n} from \"../utilities/SliceUtilities\"\r\n\r\n//initialize helpers\r\nconst dateFormat = require('dateformat');\r\nconst cookies = new Cookies();\r\n\r\n\r\n/**\r\n * Compare page component\r\n */\r\nclass Compare extends Component {\r\n\r\n    //class variable to track if the component is mounted\r\n    _isMounted = false;\r\n\r\n    /**\r\n     * Constructor\r\n     * @param props\r\n     */\r\n    constructor(props){\r\n\r\n        super(props);\r\n\r\n        //bind utility function to this context\r\n        this.filterStats = filterStats.bind(this);\r\n        this.calculateStats = calculateStats.bind(this);\r\n        this.constructChartInput = constructChartInput.bind(this);\r\n        this.ageRangesString = ageRangesString.bind(this);\r\n        this.changeTemplate = changeTemplate.bind(this);\r\n        this.changeSelectedCompetitions = changeSelectedCompetitions.bind(this);\r\n        this.changePAdjTypes = changePAdjTypes.bind(this);\r\n        this.changeLabelType = changeLabelType.bind(this);\r\n        this.toggleCreditsPosition = toggleCreditsPosition.bind(this);\r\n        this.exportChart = exportChart.bind(this);\r\n        this.toggleGlossaryOverlay = toggleGlossaryOverlay.bind(this);\r\n        this.toggleCompareSearchOverlay = toggleCompareSearchOverlay.bind(this);\r\n\r\n        //device and browser info\r\n        this.isMobile = this.props.isMobile;\r\n        this.isSafari = this.props.isSafari;\r\n\r\n        //cookies\r\n        let pAdjTypesCookie = cookies.get('pAdjTypes');\r\n        let labelTypeCookie = cookies.get('labelType');\r\n        let creditsPositionCookie = cookies.get('creditsPosition');\r\n\r\n        //retrieve player codes from the URL\r\n        let codes = this.props.match.params.codes.split(\"_\");\r\n\r\n        //modify them if they are identical (comparing a player to themselves). This is done so the objects holding\r\n        //the data for the 2 instances of the player can have unique keys\r\n        if (codes[0] === codes[1]) {\r\n            codes[0] = codes[0] + \"|1\";\r\n            codes[1] = codes[1] + \"|2\";\r\n        }\r\n\r\n        this.state = {\r\n            isLoading: true,\r\n            error: null,\r\n            showGlossaryOverlay: false,\r\n            showCompareSearchOverlay: false,\r\n            showExportLoaderOverlay: false,\r\n            renderForExport: false,\r\n            percentileArrays: this.props.percentileArrays,\r\n            statsByPosition: {},\r\n            statsReference: {},\r\n            codes: codes,\r\n            names: {},\r\n            urls: {},\r\n            ages: {},\r\n            clubs: {},\r\n            percentileEntries: {},\r\n            stats: {},\r\n            isGK: null,\r\n            isOutfieldGK: {},\r\n            outfieldGKStats: {},\r\n            standardStats: {},\r\n            lastUpdated: null,\r\n            template: null,\r\n            competitions: {},\r\n            selectedCompetitions: {},\r\n            pAdjTypes: pAdjTypesCookie === undefined ? { offensive: false, defensive: false } : pAdjTypesCookie,\r\n            labelType: labelTypeCookie === undefined ? \"raw\" : labelTypeCookie,\r\n            creditsPosition: creditsPositionCookie === undefined ? \"right\" : creditsPositionCookie,\r\n            isAnimated: true\r\n        };\r\n\r\n        this.getStats();\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * Called after component has mounted\r\n     */\r\n    componentDidMount() {\r\n        this._isMounted = true;\r\n    }\r\n\r\n\r\n    /**\r\n     * Called just before the component receives new props. This is done to ensure that new props trigger a re-render\r\n     * @param nextProps\r\n     * @param nextContext\r\n     */\r\n    //TODO: re-factor because componentWillReceiveProps has been deprecated\r\n    UNSAFE_componentWillReceiveProps(nextProps, nextContext) {\r\n\r\n        //retrieve player codes from the URL\r\n        let codes = nextProps.match.params.codes.split(\"_\");\r\n        //modify them if they are identical (comparing a player to themselves). This is done so the objects holding\r\n        //the data for the 2 iterations of the player can have unique keys\r\n        if (codes[0] === codes[1]) {\r\n            codes[0] = codes[0] + \"|1\";\r\n            codes[1] = codes[1] + \"|2\";\r\n        }\r\n\r\n        this.setState({\r\n            isLoading: true,\r\n            showCompareSearchOverlay: false,\r\n            codes: codes\r\n        }, () => {\r\n            this.getStats();\r\n        });\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * Function to send a post request to the server to retrieve the stats of the player\r\n     */\r\n    getStats = () => {\r\n\r\n        const codes = this.state.codes;\r\n\r\n        //fetch stats\r\n        fetch('/api/comparisonStats', {\r\n            method: 'post',\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify({\r\n                \"codes\": codes,\r\n                \"percentilesTimestamp\": this.state.percentileArrays['lastUpdated']\r\n            })\r\n        })\r\n        .then(res => {\r\n            if (res.ok) {\r\n                return res.json()\r\n            }\r\n            else {\r\n                throw new Error(\"Failed to fetch. This is likely due to a malformed URL. Please try searching for the player again.\")\r\n            }\r\n        })\r\n        .then(response => this.processStats(response))\r\n        .catch(error => {\r\n            console.log(error);\r\n            if (this._isMounted){\r\n                this.setState({\r\n                    error: error,\r\n                    isLoading: false\r\n                })\r\n            }\r\n        });\r\n\r\n    };\r\n\r\n\r\n    /**\r\n     * Function to process retrieved player stats and save to state\r\n     * @param {Object} response - object containing the players' metadata and stats, as well as new percentile arrays\r\n     * in the event that the server needs to update a client's percentile arrays.\r\n     */\r\n    processStats = (response) => {\r\n\r\n        let codes = this.state.codes;\r\n\r\n        //check if the stats object contains new percentile arrays\r\n        if (response.newPercentileArrays !== undefined){\r\n            //update percentile arrays in parent component as required\r\n            this.props.updatePercentileArrays(response.newPercentileArrays);\r\n        }\r\n\r\n        let playerData = response.data;\r\n\r\n        //process player position entry and set template. template is set to the most recent non-\"N/A\" position\r\n        //in the player's position entries\r\n        let template = \"N/A\";\r\n        for (let season in playerData[codes[0]].positions){\r\n            let position = playerData[codes[0]].positions[season][0];\r\n            if (position !== \"N/A\"){\r\n                template = position;\r\n            }\r\n        }\r\n\r\n        let names = {};\r\n        let urls = {};\r\n        let ages = {};\r\n        let clubs = {};\r\n        let percentileEntries = {};\r\n        let stats = {};\r\n        let isOutfieldGK = {};\r\n        let outfieldGKStats = {};\r\n        let standardStats = {};\r\n        let competitions = {};\r\n        let selectedCompetitions = {};\r\n\r\n        //retrieve the information for the 2 players and store in objects\r\n        for (let code in playerData){\r\n\r\n            names[code] = playerData[code].name;\r\n            urls[code] = \"https://www.fbref.com\" + playerData[code].fbrefURL;\r\n            ages[code] = playerData[code].age;\r\n            clubs[code] = playerData[code].clubs;\r\n            percentileEntries[code] = playerData[code].percentileEntries;\r\n\r\n            let hasOutfieldGKStats = playerData[code].outfieldGKStats !== null;\r\n\r\n            //set the initial stats set to GK stats if player 1 is a GK and player 2 is an outfield GK\r\n            stats[code] = (template === \"GK\" && hasOutfieldGKStats) ? playerData[code].outfieldGKStats : playerData[code].stats;\r\n            isOutfieldGK[code] = hasOutfieldGKStats;\r\n\r\n            outfieldGKStats[code] = playerData[code].outfieldGKStats;\r\n            standardStats[code] = playerData[code].stats;\r\n\r\n            let seasons = Object.keys(stats[code]);\r\n\r\n            competitions[code] = {};\r\n            selectedCompetitions[code] = {};\r\n\r\n            //retrieve player competitions. stored in an object where the keys are seasons and the values are arrays\r\n            //of the competitions for the season\r\n            for (let season in stats[code]){\r\n\r\n                competitions[code][season] = [];\r\n                selectedCompetitions[code][season] = [];\r\n\r\n                for (let competition in stats[code][season]){\r\n                    competitions[code][season].push(competition);\r\n                    //only 2 most recent season in selected competitions\r\n                    if (season === seasons[seasons.length - 1] || season === seasons[seasons.length - 2]){\r\n                        selectedCompetitions[code][season].push(competition);\r\n                    }\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n\r\n        if (this._isMounted){\r\n\r\n            this.setState({\r\n                isLoading: false,\r\n                names: JSON.parse(JSON.stringify(names)),\r\n                urls: JSON.parse(JSON.stringify(urls)),\r\n                ages: JSON.parse(JSON.stringify(ages)),\r\n                clubs: JSON.parse(JSON.stringify(clubs)),\r\n                percentileEntries: JSON.parse(JSON.stringify(percentileEntries)),\r\n                statsByPosition: response.statsByPosition,\r\n                statsReference: response.statsReference,\r\n                stats: JSON.parse(JSON.stringify(stats)),\r\n                isGK: template === \"GK\",\r\n                isOutfieldGK: JSON.parse(JSON.stringify(isOutfieldGK)),\r\n                outfieldGKStats: JSON.parse(JSON.stringify(outfieldGKStats)),\r\n                standardStats: JSON.parse(JSON.stringify(standardStats)),\r\n                lastUpdated: dateFormat(playerData[codes[0]].lastUpdated, \"dd/mm/yyyy, h:MM TT\", true),\r\n                template: template,\r\n                competitions: JSON.parse(JSON.stringify(competitions)),\r\n                selectedCompetitions: JSON.parse(JSON.stringify(selectedCompetitions))\r\n            });\r\n\r\n            document.title = `${names[codes[0]]} vs ${names[codes[1]]} | Football Slices`;\r\n\r\n            this.props.recordPageViewGA(window.location.pathname);\r\n        }\r\n\r\n    };\r\n\r\n\r\n    /**\r\n     * Called just before the component un-mounts\r\n     */\r\n    componentWillUnmount() {\r\n        this._isMounted = false;\r\n    }\r\n\r\n\r\n    /**\r\n     * render function\r\n     * @return {*} - JSX code for the compare page\r\n     */\r\n    render() {\r\n\r\n        let {\r\n            isLoading,\r\n            error,\r\n            showGlossaryOverlay,\r\n            showCompareSearchOverlay,\r\n            showExportLoaderOverlay,\r\n            renderForExport,\r\n            statsByPosition,\r\n            statsReference,\r\n            codes,\r\n            urls,\r\n            names,\r\n            ages,\r\n            clubs,\r\n            stats,\r\n            isGK,\r\n            isOutfieldGK,\r\n            lastUpdated,\r\n            competitions,\r\n            selectedCompetitions,\r\n            template,\r\n            pAdjTypes,\r\n            labelType,\r\n            creditsPosition,\r\n            isAnimated\r\n        } = this.state;\r\n\r\n        //display loading spinner while the server responds to POST request for the stats\r\n        if (isLoading) {\r\n            return (\r\n                <LoadingSpinner/>\r\n            )\r\n        }\r\n\r\n        //display the error message screen if an error is caught\r\n        else if (error !== null) {\r\n            return (\r\n                <div id=\"main2\">\r\n                    <SearchBar\r\n                        isMobile={this.isMobile}\r\n                        page=\"stats\"\r\n                        query={this.state.query}\r\n                    />\r\n                    <div className=\"screen\" id=\"error-screen\">\r\n                        <p>{error.message}</p>\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n\r\n        //build stats page otherwise\r\n        else {\r\n\r\n            //calculate stats and construct chart input\r\n            let filteredStats = {};\r\n            let series = [];\r\n\r\n            let statsKeys;\r\n\r\n            for (let i=0; i<codes.length; i++){\r\n\r\n                let code = codes[i];\r\n\r\n                filteredStats[code] = this.filterStats(stats[code], code);\r\n                let calculatedStats = this.calculateStats(filteredStats[code], code);\r\n\r\n                if (template !== null && template !== \"N/A\"){\r\n\r\n                    let chartInput = this.constructChartInput(\r\n                        statsByPosition,\r\n                        calculatedStats.statsPer90,\r\n                        calculatedStats.percentiles,\r\n                        code,\r\n                        names[codes[i]],\r\n                        filteredStats[code]['minutes'],\r\n                        true,\r\n                        i\r\n                    );\r\n\r\n                    series.push(chartInput);\r\n                    statsKeys = calculatedStats.statsKeys;\r\n                }\r\n\r\n            }\r\n\r\n            let code1 = codes[0];\r\n            let code2 = codes[1];\r\n\r\n            let exportSlice = null;\r\n            if (renderForExport) {\r\n                exportSlice =\r\n                <Slice\r\n                    isMobile={this.isMobile}\r\n                    isForExport={true}\r\n                    isForComparison={true}\r\n                    isAnimated={false}\r\n                    isAnimatedInitial={false}\r\n                    hasTooltip={false}\r\n                    creditsPosition={creditsPosition}\r\n                    url={\r\n                        [null, null]\r\n                    }\r\n                    lastUpdated={lastUpdated}\r\n                    template={template}\r\n                    labelType={labelType}\r\n                    names={\r\n                        [names[code1], names[code2]]\r\n                    }\r\n                    competitions={\r\n                        [competitions[code1], competitions[code2]]\r\n                    }\r\n                    selectedCompetitions={\r\n                        [selectedCompetitions[code1], selectedCompetitions[code2]]\r\n                    }\r\n                    ages={\r\n                        [ages[code1], ages[code2]]\r\n                    }\r\n                    minutes={\r\n                        [filteredStats[code1]['minutes'], filteredStats[code2]['minutes']]\r\n                    }\r\n                    statsKeys={statsKeys}\r\n                    statsByPosition={statsByPosition}\r\n                    statsReference={statsReference}\r\n                    series={series}\r\n                />\r\n            }\r\n\r\n            //return JSX code for the stats page\r\n            return (\r\n                <div id=\"main2\">\r\n                    <GlossaryOverlay\r\n                        display={showGlossaryOverlay}\r\n                        toggleGlossaryOverlay={this.toggleGlossaryOverlay}\r\n                    />\r\n                    <CompareSearchScreen\r\n                        isMobile={this.isMobile}\r\n                        display={showCompareSearchOverlay}\r\n                        currentPlayerCode={codes[0]}\r\n                        currentPlayerName={names[codes[0]]}\r\n                        toggleCompareSearchOverlay={this.toggleCompareSearchOverlay}\r\n                    />\r\n                    <LoaderOverlay\r\n                        display={showExportLoaderOverlay}\r\n                    />\r\n                    <SearchBar\r\n                        isMobile={this.isMobile}\r\n                        page=\"stats\"\r\n                    />\r\n                    <div className=\"screen2\" id=\"compare-screen\">\r\n                        <SliceOptions\r\n                            isMobile={this.isMobile}\r\n                            isForComparison={true}\r\n                            isGK={isGK}\r\n                            isOutfieldGK={isOutfieldGK[codes[0]]}\r\n                            codes={codes}\r\n                            names={names}\r\n                            template={template}\r\n                            competitions={competitions}\r\n                            clubs={clubs}\r\n                            selectedCompetitions={selectedCompetitions}\r\n                            pAdjTypes={pAdjTypes}\r\n                            labelType={labelType}\r\n                            changeTemplate={this.changeTemplate}\r\n                            changeSelectedCompetitions={this.changeSelectedCompetitions}\r\n                            changePAdjTypes={this.changePAdjTypes}\r\n                            changeLabelType={this.changeLabelType}\r\n                            toggleCreditsPosition={this.toggleCreditsPosition}\r\n                            exportChart={this.exportChart}\r\n                            toggleCompareSearchOverlay={this.toggleCompareSearchOverlay}\r\n                        />\r\n                        <Slice\r\n                            isMobile={this.isMobile}\r\n                            isForExport={false}\r\n                            isForComparison={true}\r\n                            isAnimated={isAnimated}\r\n                            isAnimatedInitial={true}\r\n                            hasTooltip={true}\r\n                            creditsPosition={creditsPosition}\r\n                            url={\r\n                                [urls[code1], urls[code2]]\r\n                            }\r\n                            lastUpdated={lastUpdated}\r\n                            template={template}\r\n                            labelType={labelType}\r\n                            names={\r\n                                [names[code1], names[code2]]\r\n                            }\r\n                            competitions={\r\n                                [competitions[code1], competitions[code2]]\r\n                            }\r\n                            selectedCompetitions={\r\n                                [selectedCompetitions[code1], selectedCompetitions[code2]]\r\n                            }\r\n                            ages={\r\n                                [ages[code1], ages[code2]]\r\n                            }\r\n                            minutes={\r\n                                [filteredStats[code1]['minutes'], filteredStats[code2]['minutes']]\r\n                            }\r\n                            statsKeys={statsKeys}\r\n                            statsByPosition={statsByPosition}\r\n                            statsReference={statsReference}\r\n                            series={series}\r\n                            toggleGlossaryOverlay={this.toggleGlossaryOverlay}\r\n                        />\r\n                    </div>\r\n                    {/*Second slice used for exports. Not displayed*/}\r\n                    {exportSlice}\r\n                </div>\r\n            );\r\n\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default Compare;\r\n","import React, { Component } from 'react';\r\n\r\n/**\r\n * 404 component\r\n */\r\nclass Error extends Component {\r\n\r\n    /**\r\n     * render function\r\n     * @return {*} - JSX code for the homepage\r\n     */\r\n    render() {\r\n\r\n        return (\r\n            <h1>404 - Page not found</h1>\r\n        )\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default Error;\r\n","import React, { Component } from 'react';\r\n\r\n\r\n/**\r\n * Component to render the explanation overlay\r\n */\r\nclass ExplanationOverlay extends Component {\r\n\r\n    constructor(props) {\r\n\r\n        super(props);\r\n        this.toggleExplanationOverlay = this.props.toggleExplanationOverlay;\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * render function\r\n     * displays the player comparison search screen\r\n     * @return {*} - JSX code for the searchbar and its container\r\n     */\r\n    render() {\r\n\r\n        //return JSX code for the explanation overlay\r\n        return (\r\n            <div className={`overlay ${this.props.display ? \"open\" : \"closed\"}`} id=\"explanation-overlay\">\r\n                <div className={'overlay-inner-container'} id={'explanation-container'}>\r\n                    <button className=\"close-overlay far fa-times-circle\" onClick={this.toggleExplanationOverlay}/>\r\n                    <div className=\"help-section-container\">\r\n                        <h2>Advanced Search</h2>\r\n                        <p>\r\n                            The advanced search page allows you to explore the entire Football Slices database using as\r\n                            many filters as you'd like. These include everything from player metadata such as ages\r\n                            and nationalities, to performance metrics like non-penalty expected goals and successful\r\n                            dribbles.\r\n                        </p>\r\n                        <p>\r\n                            <b>Please note that percentile ranks are always calculated against the complete top 5 league\r\n                            dataset for a position, regardless of which other filters are selected.</b> For example, if you\r\n                            select full-backs and set the age range to 16 - 24, the percentile ranks are still being calculated\r\n                            against full-backs of all ages, but the results will only show players who fall within the\r\n                            specified age range.\r\n                        </p>\r\n                    </div>\r\n                    <div className=\"help-section-container\" id=\"glossary-section-container\">\r\n                        <h2>Glossary</h2>\r\n                        <ul>\r\n                            <li>\r\n                                <span style={{color: '#f15c80', fontWeight: 'bold'}}>Non-Penalty Goal</span>&nbsp;\r\n                                A goal that did not stem directly from a penalty kick.\r\n                            </li>\r\n                            <li>\r\n                                <span style={{color: '#f15c80', fontWeight: 'bold'}}>Non-Penalty xG (Expected Goals)</span>&nbsp;\r\n                                Expected goals that did not stem directly from penalty kicks.*\r\n                            </li>\r\n                            <li>\r\n                                <span style={{color: '#f15c80', fontWeight: 'bold'}}>Non-Penalty xG/Shot</span>&nbsp;\r\n                                The average expected goal value of shots taken, excluding penalty kicks.\r\n                            </li>\r\n                            <li>\r\n                                <span style={{color: '#f15c80', fontWeight: 'bold'}}>Aerial Win</span>&nbsp;\r\n                                Winning the ball in a duel that was challenged in the air.\r\n                            </li>\r\n                            <li>\r\n                                <span style={{color: '#f15c80', fontWeight: 'bold'}}>Aerial Win %</span>&nbsp;\r\n                                The percentage of aerials duels contested that were won.\r\n                            </li>\r\n                            <li>\r\n                                <span style={{color: '#e4c000', fontWeight: 'bold'}}>Touch in Box</span>&nbsp;\r\n                                Having possession of the ball in the opposition's penalty area.\r\n                                (Note: Receiving a pass, then dribbling, then sending a pass counts as one touch)\r\n                            </li>\r\n                            <li>\r\n                                <span style={{color: '#e4c000', fontWeight: 'bold'}}>xA (Expected Assists)</span>&nbsp;\r\n                                Expected goals that resulted from a player's shot assists, including set pieces.*\r\n                            </li>\r\n                            <li>\r\n                                <span style={{color: '#e4c000', fontWeight: 'bold'}}>OP (Open Play) Shot-Creating Action</span>&nbsp;\r\n                                Excluding set pieces, one of the last two offensive actions that directly\r\n                                led to a shot; such as a pass, dribble or a drawn foul.\r\n                                (Note: A single player can receive credit for multiple actions and the shot-taker can also receive credit)\r\n                            </li>\r\n                            <li>\r\n                                <span style={{color: '#e4c000', fontWeight: 'bold'}}>Pass into Box</span>&nbsp;\r\n                                A completed pass that entered the opposition's penalty area, excluding set pieces.\r\n                            </li>\r\n                            <li>\r\n                                <span style={{color: '#e4c000', fontWeight: 'bold'}}>Pass into Final 1/3</span>&nbsp;\r\n                                A completed pass that entered the third of the pitch that is closest to the opposition's goal, excluding set pieces.\r\n                            </li>\r\n                            <li>\r\n                                <span style={{color: '#e4c000', fontWeight: 'bold'}}>Yards Progressed</span>&nbsp;\r\n                                Distance, in yards, that the ball was moved towards the oppositions's goal\r\n                                with passes and carries.\r\n                                (Note: Passes and carries away from the oppositions's goal are counted as zero progressive yards)\r\n                            </li>\r\n                            <li>\r\n                                <span style={{color: '#e4c000', fontWeight: 'bold'}}>Pass Completion %</span>&nbsp;\r\n                                The percentage of attempted passes that successfully found a teammate.\r\n                            </li>\r\n                            <li>\r\n                                <span style={{color: '#e4c000', fontWeight: 'bold'}}>Long Pass Completion %</span>&nbsp;\r\n                                The percentage of attempted passes of 25 yards or more that successfully found a teammate.\r\n                            </li>\r\n                            <li>\r\n                                <span style={{color: '#e4c000', fontWeight: 'bold'}}>Launched Pass Completion %</span>&nbsp;\r\n                                The percentage of attempted passes of 40 yards or more that successfully found a teammate, including goal kicks.\r\n                            </li>\r\n                            <li>\r\n                                <span style={{color: '#87e179', fontWeight: 'bold'}}>Successful Dribble</span>&nbsp;\r\n                                A successful attempt at taking on a player and making it past them whilst retaining possession.\r\n                            </li>\r\n                            <li>\r\n                                <span style={{color: '#87e179', fontWeight: 'bold'}}>Dribble Success %</span>&nbsp;\r\n                                The percentage of attempted dribbles that were successful.\r\n                            </li>\r\n                            <li>\r\n                                <span style={{color: '#87e179', fontWeight: 'bold'}}>Turnover</span>&nbsp;\r\n                                A miscontrol, or being tackled by an opponent and losing possession of the ball without attempting a dribble.\r\n                            </li>\r\n                            <li>\r\n                                <span style={{color: '#7db9f0', fontWeight: 'bold'}}>pAdj</span>&nbsp;\r\n                                Possession Adjusted (using the StatsBomb sigmoid function).**\r\n                            </li>\r\n                            <li>\r\n                                <span style={{color: '#7db9f0', fontWeight: 'bold'}}>Successful Pressure</span>&nbsp;\r\n                                A pressing action that led to the team regaining possession within the next 5 seconds.\r\n                            </li>\r\n                            <li>\r\n                                <span style={{color: '#7db9f0', fontWeight: 'bold'}}>Interception</span>&nbsp;\r\n                                A prevention of an opponent's pass from reaching another opponent by moving into the line of the pass.\r\n                            </li>\r\n                            <li>\r\n                                <span style={{color: '#7db9f0', fontWeight: 'bold'}}>Successful Tackle</span>&nbsp;\r\n                                A successful dispossession of an opponent (whether the tackler's team won possession of the ball or not).\r\n                            </li>\r\n                            <li>\r\n                                <span style={{color: '#7db9f0', fontWeight: 'bold'}}>Tackle/Dribbled Past %</span>&nbsp;\r\n                                The percentage of dribblers faced that were tackled.\r\n                            </li>\r\n                            <li>\r\n                                <span style={{color: '#7db9f0', fontWeight: 'bold'}}>Aerial Win</span>&nbsp;\r\n                                Winning the ball in a duel that was challenged in the air.\r\n                            </li>\r\n                            <li>\r\n                                <span style={{color: '#7db9f0', fontWeight: 'bold'}}>Aerial Win %</span>&nbsp;\r\n                                The percentage of aerials duels contested that were won.\r\n                            </li>\r\n                            <li>\r\n                                <span style={{color: '#7db9f0', fontWeight: 'bold'}}>Clearance</span>&nbsp;\r\n                                An action where a player kicked/headed the ball away from their own goal.\r\n                            </li>\r\n                            <li>\r\n                                <span style={{color: '#787ccd', fontWeight: 'bold'}}>GSAA (Goals Saved Above Average) %</span>&nbsp;\r\n                                (Post-Shot xG − Goals Conceded (excluding own goals)) ÷ Shots on Target Faced.***\r\n                            </li>\r\n                            <li>\r\n                                <span style={{color: '#787ccd', fontWeight: 'bold'}}>Cross Stopping %</span>&nbsp;\r\n                                The percentage of attempted crosses into the penalty area that were stopped by the goalkeeper.\r\n                            </li>\r\n                        </ul>\r\n                        <div id=\"glossary-links\">\r\n                                <span>\r\n                                    * <a href=\"https://fbref.com/en/expected-goals-model-explained/\" target=\"_blank\" rel=\"noopener noreferrer\">Expected goals/assists model explanation</a>\r\n                                </span>\r\n                            <span>\r\n                                    ** <a href=\"https://statsbomb.com/2014/06/introducing-possession-adjusted-player-stats/\" target=\"_blank\" rel=\"noopener noreferrer\">Possession adjustment explanation</a>\r\n                                </span>\r\n                            <span>\r\n                                    *** <a href=\"https://statsbomb.com/2018/12/introducing-goalkeeper-radars/\" target=\"_blank\" rel=\"noopener noreferrer\">GSAA % explanation</a>\r\n                                </span>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        );\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default (ExplanationOverlay);\r\n","import React, {Component} from 'react';\r\nimport withRouter from \"react-router-dom/es/withRouter\";\r\nimport {\r\n    withQueryParams,\r\n    JsonParam,\r\n} from 'use-query-params';\r\n\r\nimport Cookies from 'universal-cookie';\r\n\r\n//import lodash functions\r\nimport set from 'lodash.set';\r\nimport isEqual from 'lodash.isequal';\r\n\r\n//import custom components\r\nimport SearchBar from \"../components/SearchBar\";\r\nimport LoadingSpinner from \"../components/LoadingSpinner\";\r\nimport LoaderOverlay from \"../components/LoaderOverlay\";\r\nimport ExplanationOverlay from \"../components/ExplanationOverlay\";\r\nimport PlayerSearchResult from \"../components/PlayerSearchResult\";\r\n\r\n//import pre-made components\r\nimport Collapsible from 'react-collapsible';\r\nimport {Select, Slider, Tooltip} from 'antd';\r\nimport DataTable, { createTheme } from 'react-data-table-component';\r\n\r\n//import utility functions, constants\r\nimport {\r\n    getLeaguesDisplay,\r\n    getAllEntriesFromObject\r\n} from \"../utilities/SearchResultUtilities\"\r\nimport { ordinalSuffix } from \"../utilities/SliceUtilities\"\r\nimport dateFormat from \"dateformat\";\r\n\r\n//initialize constants\r\nconst Option = Select.Option;\r\nconst cookies = new Cookies();\r\n\r\nconst _ = require('lodash');\r\n\r\n\r\n/**\r\n * Advanced Search page component\r\n */\r\nclass AdvancedSearch extends Component {\r\n\r\n    //class variable to track if the component is mounted\r\n    _isMounted = false;\r\n\r\n    _firstSearchMade = false;\r\n    _referenceData = {};\r\n    _statsReferenceDataArraySorted = [];\r\n    _parametersOriginalState = {};\r\n\r\n    _baseColumns = [\r\n        {\r\n            name: 'Name',\r\n            selector: 'name',\r\n            style: {\r\n                fontSize: this.props.isMobile ? '3em' : '1.15em',\r\n                fontWeight: 'bold',\r\n                color: '#e75453'\r\n            },\r\n            minWidth: '250px',\r\n            sortable: true,\r\n            sortFunction: (rowA, rowB) =>\r\n                (rowA.name.normalize(\"NFD\")\r\n                    .replace(/[\\u0300-\\u036f]/g, \"\")\r\n                    .replace(\"Ø\", \"O\")\r\n                    .replace(\"ø\", \"o\"))\r\n                    .localeCompare((rowB.name.normalize(\"NFD\")\r\n                        .replace(/[\\u0300-\\u036f]/g, \"\")\r\n                        .replace(\"Ø\", \"O\")\r\n                        .replace(\"ø\", \"o\")))\r\n            ,\r\n            ignoreRowClick: true,\r\n            cell: row => {\r\n                return (\r\n                    <a\r\n                        className=\"table-link\"\r\n                        href={'/stats/' + row.code}\r\n                    >\r\n                        {row.name}\r\n                    </a>\r\n                );\r\n            }\r\n        },\r\n        {\r\n            name: 'Current Age',\r\n            selector: 'age',\r\n            sortable: true,\r\n            ignoreRowClick: true\r\n        },\r\n        {\r\n            name: 'Nationality',\r\n            selector: 'nationalities',\r\n            sortable: true,\r\n            ignoreRowClick: true\r\n        },\r\n        {\r\n            name: 'League(s)',\r\n            selector: 'leagues',\r\n            sortable: true,\r\n            ignoreRowClick: true\r\n        },\r\n        {\r\n            name: 'Club(s)',\r\n            selector: 'clubs',\r\n            sortable: true,\r\n            ignoreRowClick: true\r\n        },\r\n        {\r\n            name: 'Position(s)',\r\n            selector: 'positions',\r\n            sortable: true,\r\n            ignoreRowClick: true\r\n        }\r\n    ];\r\n\r\n    _customStyles = {\r\n        headCells: {\r\n            style: {\r\n                fontSize: '1em',\r\n                fontWeight: 'bold',\r\n                color: '#000000'\r\n            },\r\n        },\r\n    };\r\n\r\n    /**\r\n     * Constructor\r\n     * @param props\r\n     */\r\n    constructor(props){\r\n\r\n        super(props);\r\n\r\n        this.ordinalSuffix = ordinalSuffix.bind(this);\r\n\r\n        this.isMobile = this.props.isMobile;\r\n\r\n        let seasons = {\r\n            \"18-19\": \"18/19\",\r\n            \"19-20\": \"19/20\",\r\n            \"20-21\": \"20/21\"\r\n        };\r\n        let seasonOptions = [];\r\n\r\n        for (let season in seasons){\r\n            seasonOptions.push(\r\n                <Option\r\n                    key={season}\r\n                    value={season}\r\n                >\r\n                    {seasons[season]}\r\n                </Option>\r\n            )\r\n        }\r\n\r\n        let positions = {\r\n            \"FW\": \"Forward\",\r\n            \"AM\": \"Attacking Midfielder / Winger\",\r\n            \"CM\": \"Central / Defensive Midfielder\",\r\n            \"FB\": \"Full-back\",\r\n            \"CB\": \"Center-back\",\r\n            \"GK\": \"Goalkeeper\"\r\n        };\r\n        let positionsOptions = [];\r\n\r\n        for (let position in positions){\r\n            positionsOptions.push(\r\n                <Option\r\n                    key={position}\r\n                    value={position}\r\n                >\r\n                    {positions[position]}\r\n                </Option>\r\n            )\r\n        }\r\n\r\n        let leagues = {\r\n            \"_england\": \"Premier League\",\r\n            \"es\": \"La Liga\",\r\n            \"it\": \"Serie A\",\r\n            \"de\": \"Bundesliga\",\r\n            \"fr\": \"Ligue 1\"\r\n        };\r\n        let leaguesOptions = [];\r\n\r\n        for (let league in leagues){\r\n            leaguesOptions.push(\r\n                <Option\r\n                    key={league}\r\n                    value={league}\r\n                >\r\n                    {leagues[league]}\r\n                </Option>\r\n            )\r\n        }\r\n\r\n        let displayTypeCookie = cookies.get('displayType');\r\n\r\n        this.state = {\r\n\r\n            isLoading: true,\r\n            error: null,\r\n            showSearchLoaderOverlay: false,\r\n            showExplanationOverlay: false,\r\n\r\n            displayType: this.isMobile ? \"cards\" : displayTypeCookie || \"cards\",\r\n\r\n            filterOptions: {\r\n                seasons: seasonOptions,\r\n                ages: {},\r\n                nationalities: [],\r\n                leagues: leaguesOptions,\r\n                clubs: [],\r\n                positions: positionsOptions,\r\n                aggregateStats: [],\r\n                averageStats: [],\r\n                percentileRanks: []\r\n            },\r\n\r\n            parameters: {\r\n                season: \"20-21\",\r\n                includeEuropeanCompetitions: true,\r\n                ages: {},\r\n                nationalities: [],\r\n                leagues: [],\r\n                clubs: [],\r\n                positions: [],\r\n                aggregateStats: {},\r\n                averageStats: {},\r\n                percentileRanks: {}\r\n            },\r\n\r\n            tableColumns: _.cloneDeep(this._baseColumns),\r\n\r\n            searchResults: [],\r\n\r\n            searchResultsDisplay: null\r\n\r\n        };\r\n\r\n        createTheme('basic', {\r\n            background: {\r\n                default: '#fafbfc',\r\n            },\r\n            striped: {\r\n                default: '#f3f4f5',\r\n            }\r\n        });\r\n\r\n        this.getReferenceData();\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * Called after component has mounted\r\n     */\r\n    componentDidMount() {\r\n        this._isMounted = true;\r\n    }\r\n\r\n\r\n    /**\r\n     * Function to send a get request to the server to retrieve the reference data used to populate the select lists\r\n     */\r\n    getReferenceData = () => {\r\n\r\n        //retrieve search results\r\n        fetch('/api/referenceData', {\r\n            method: 'post',\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n        })\r\n        .then(res => {\r\n            if (res.ok) {\r\n                return res.json()\r\n            }\r\n            else {\r\n                throw new Error(\"Failed to fetch reference data. Please refresh the page and try again.\")\r\n            }\r\n        })\r\n        .then(referenceData => this.processReferenceData(referenceData))\r\n        .catch(error => {\r\n            if (this._isMounted){\r\n                this.setState({error, isLoading: false})\r\n            }\r\n        });\r\n\r\n    };\r\n\r\n\r\n    /**\r\n     * Function to process the reference data and save to state\r\n     * @param {Object} referenceData - object containing reference data\r\n     */\r\n    processReferenceData = (referenceData) => {\r\n\r\n        this._referenceData = referenceData;\r\n\r\n        let statsReferenceDataArray = [];\r\n        for (let stat in referenceData.statsReferenceData){\r\n            let temp = referenceData.statsReferenceData[stat];\r\n            temp.stat = stat;\r\n            statsReferenceDataArray.push(temp);\r\n        }\r\n\r\n        statsReferenceDataArray.sort((a, b) => a.displayOrder - b.displayOrder);\r\n\r\n        this._statsReferenceDataArraySorted = statsReferenceDataArray;\r\n\r\n        let filterOptions = this.state.filterOptions;\r\n        let parameters = this.state.parameters;\r\n        let queryParameters = this.props.query.parameters;\r\n\r\n        let ageReferenceData = referenceData.statsReferenceData[\"age\"];\r\n\r\n        filterOptions.ages = {\r\n            min: ageReferenceData.ranges.min,\r\n            max: ageReferenceData.ranges.max\r\n        };\r\n\r\n        parameters.ages = JSON.parse(JSON.stringify(filterOptions.ages));\r\n\r\n        let season = parameters.season;\r\n        let minutesReferenceData = referenceData.statsReferenceData[\"minutes\"];\r\n\r\n        parameters.aggregateStats.minutes = {\r\n            min: minutesReferenceData.ranges_agg[season].min,\r\n            max: minutesReferenceData.ranges_agg[season].max,\r\n        };\r\n\r\n        this._parametersOriginalState = JSON.parse(JSON.stringify(this.state.parameters));\r\n\r\n        if (queryParameters !== undefined){\r\n            parameters = JSON.parse(JSON.stringify(queryParameters));\r\n        }\r\n\r\n        let nationalitiesOptions = [];\r\n        for (let i=0; i<referenceData.countries.length; i++){\r\n\r\n            let country = referenceData.countries[i];\r\n\r\n            nationalitiesOptions.push(\r\n                <Option\r\n                    key={country.code.toLowerCase()}\r\n                    value={country.code.toLowerCase()}\r\n                >\r\n                    {country.name}\r\n                </Option>\r\n            )\r\n\r\n        }\r\n        filterOptions.nationalities = nationalitiesOptions;\r\n\r\n        let clubsOptions = [];\r\n        for (let i=0; i<referenceData.clubs.length; i++){\r\n\r\n            let club = referenceData.clubs[i];\r\n\r\n            clubsOptions.push(\r\n                <Option\r\n                    key={club.name}\r\n                    value={club.name}\r\n                >\r\n                    {club.name}\r\n                </Option>\r\n            )\r\n\r\n        }\r\n        filterOptions.clubs = clubsOptions;\r\n\r\n        let aggregateStatsOptions = [];\r\n        for (let i=0; i<statsReferenceDataArray.length; i++){\r\n\r\n            let statData = statsReferenceDataArray[i];\r\n            let stat = statData.stat;\r\n\r\n            if (!statData.types.includes(\"aggregate\") || stat === \"minutes\"){\r\n                continue;\r\n            }\r\n\r\n            aggregateStatsOptions.push(\r\n                <Option\r\n                    key={stat}\r\n                    value={stat}\r\n                >\r\n                    {`${statData.label}`}\r\n                </Option>\r\n            )\r\n\r\n        }\r\n        filterOptions.aggregateStats = aggregateStatsOptions;\r\n\r\n        let averageStatsOptions = [];\r\n        for (let i=0; i<statsReferenceDataArray.length; i++){\r\n\r\n            let statData = statsReferenceDataArray[i];\r\n            let stat = statData.stat;\r\n\r\n            if (!statData.types.includes(\"average\")){\r\n                continue;\r\n            }\r\n\r\n            averageStatsOptions.push(\r\n                <Option\r\n                    key={stat}\r\n                    value={stat}\r\n                >\r\n                    {`${statData.label} ${statData.suffix}`}\r\n                </Option>\r\n            )\r\n\r\n        }\r\n        filterOptions.averageStats = averageStatsOptions;\r\n\r\n        if (this._isMounted){\r\n\r\n            this.setState({\r\n                parameters: parameters,\r\n                filterOptions: filterOptions\r\n            });\r\n\r\n            if (parameters.positions.length === 1){\r\n                this.buildPercentileRankSelectList();\r\n            }\r\n\r\n            if (parameters.leagues.length > 0){\r\n                this.buildClubsSelectList();\r\n            }\r\n\r\n            let handleQueryParameters = queryParameters !== undefined && !isEqual(queryParameters, this._parametersOriginalState);\r\n\r\n            this.setState({\r\n                error: null,\r\n                isLoading: handleQueryParameters,\r\n            });\r\n\r\n            document.title = 'Advanced Search | Football Slices';\r\n\r\n            this.props.recordPageViewGA(window.location.pathname);\r\n\r\n            if (handleQueryParameters){\r\n                this.getSearchResults(true);\r\n            }\r\n\r\n        }\r\n\r\n    };\r\n\r\n\r\n    /**\r\n     * Function to send a post request to the server to retrieve the search results matching the query\r\n     */\r\n    getSearchResults = (fromQueryString = false) => {\r\n\r\n        this.setState({\r\n            showSearchLoaderOverlay: fromQueryString !== true,\r\n        });\r\n\r\n        //clear deep clone of parameters and clean it\r\n        let parameters = JSON.parse(JSON.stringify(this.state.parameters));\r\n\r\n        //delete percentile ranks parameters if not exactly 1 position is selected\r\n        if (parameters.positions.length !== 1){\r\n\r\n            for (let stat in parameters.percentileRanks){\r\n                delete parameters.percentileRanks[stat];\r\n            }\r\n\r\n        }\r\n\r\n        let season = parameters.season;\r\n\r\n        //because range slider min/max values are not true min/maxes, we set the min/max to -infinity/infinity\r\n        //if the slider is at the max allowed value\r\n        for (let stat in parameters.averageStats){\r\n\r\n            let statRanges = this._referenceData.statsReferenceData[stat].ranges[season];\r\n\r\n            if (parameters.averageStats[stat].min === statRanges.min){\r\n                parameters.averageStats[stat].min = null\r\n            }\r\n\r\n            if (parameters.averageStats[stat].max === statRanges.max){\r\n                parameters.averageStats[stat].max = null\r\n            }\r\n\r\n        }\r\n\r\n        //retrieve search results\r\n        fetch('/api/advancedSearch', {\r\n            method: 'post',\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify({\r\n                \"parameters\": parameters\r\n            })\r\n        })\r\n        .then(res => {\r\n            if (res.ok) {\r\n                return res.json()\r\n            }\r\n            else {\r\n               throw new Error(\"Failed to fetch search results. Please refresh the page and try again.\")\r\n            }\r\n        })\r\n        .then(searchResults => {\r\n            this._firstSearchMade = true;\r\n            this.processSearchResults(searchResults)\r\n        })\r\n        .catch(error => {\r\n            if (this._isMounted){\r\n                this.setState({error})\r\n            }\r\n        });\r\n\r\n    };\r\n\r\n\r\n    /**\r\n     * Function to process the search results and save to state\r\n     * @param {Object} searchResults - object containing search results\r\n     * parameters\r\n     */\r\n    processSearchResults = (searchResults) => {\r\n\r\n        let parameters = this.state.parameters;\r\n        let displayType = this.state.displayType;\r\n\r\n        let tableColumns;\r\n\r\n        if (displayType === \"table\"){\r\n\r\n            tableColumns = _.cloneDeep(this._baseColumns);\r\n\r\n            for (let stat in parameters.aggregateStats){\r\n\r\n                let statData = this._referenceData.statsReferenceData[stat];\r\n\r\n                tableColumns.push({\r\n                    name: `${statData.label}`,\r\n                    selector: `aggregate_${stat}`,\r\n                    sortable: true,\r\n                    ignoreRowClick: true,\r\n                    format: row => parseFloat(row[`aggregate_${stat}`])\r\n                })\r\n            }\r\n\r\n            for (let stat in parameters.averageStats){\r\n\r\n                let statData = this._referenceData.statsReferenceData[stat];\r\n\r\n                tableColumns.push({\r\n                    name: `${statData.label} ${statData.suffix}`,\r\n                    selector: `raw_${stat}`,\r\n                    sortable: true,\r\n                    ignoreRowClick: true,\r\n                    format: row => parseFloat(row[`raw_${stat}`])\r\n                })\r\n            }\r\n\r\n            if (parameters.positions.length === 1){\r\n                for (let stat in parameters.percentileRanks){\r\n\r\n                    let statData = this._referenceData.statsReferenceData[stat];\r\n\r\n                    tableColumns.push({\r\n                        name: `${statData.label} ${statData.suffix} (Percentile Rank)`,\r\n                        selector: `percentile_${stat}`,\r\n                        sortable: true,\r\n                        ignoreRowClick: true,\r\n                        sortFunction: (rowA, rowB) => { return parseFloat(rowA[`percentile_${stat}`]) - parseFloat(rowB[`percentile_${stat}`]) },\r\n                        format: row => this.ordinalSuffix(row[`percentile_${stat}`]) + \" percentile\"\r\n                    })\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n        if (this._isMounted){\r\n\r\n            this.setState({\r\n                searchResults: [],\r\n                searchResultsDisplay: null\r\n            }, () => {\r\n                this.setState({\r\n                    error: null,\r\n                    isLoading: false,\r\n                    showSearchLoaderOverlay: false,\r\n                    tableColumns: tableColumns,\r\n                    searchResults: searchResults\r\n                }, () => {\r\n                    this.buildSearchResultsDisplay();\r\n                });\r\n            });\r\n\r\n        }\r\n\r\n    };\r\n\r\n\r\n    toggleExplanationOverlay = () => {\r\n\r\n        let currentState = this.state.showExplanationOverlay;\r\n\r\n        this.setState({\r\n            showExplanationOverlay: !currentState\r\n        });\r\n\r\n    };\r\n\r\n\r\n    handleTableButtonClick = () => {\r\n\r\n        this.setState({\r\n            displayType: \"table\"\r\n        }, () => {\r\n            this.processSearchResults(this.state.searchResults);\r\n        });\r\n\r\n        cookies.set('displayType', \"table\", {path: '/'});\r\n\r\n    };\r\n\r\n\r\n    handleCardsButtonClick = () => {\r\n\r\n        this.setState({\r\n            displayType: \"cards\"\r\n        }, () => {\r\n            this.processSearchResults(this.state.searchResults);\r\n        });\r\n\r\n        cookies.set('displayType', \"cards\", {path: '/'});\r\n\r\n    };\r\n\r\n\r\n    buildSearchResultsDisplay = () => {\r\n\r\n        let season = this.state.parameters.season;\r\n        let searchResults = this.state.searchResults;\r\n\r\n        let displayType = this.state.displayType;\r\n        let tableColumns = this.state.tableColumns;\r\n\r\n        let searchResultsDisplay;\r\n\r\n        if (displayType === \"cards\"){\r\n\r\n            let playerCards = [];\r\n\r\n            for (let i=0; i<searchResults.length; i++){\r\n\r\n                let current = searchResults[i];\r\n\r\n                playerCards.push(\r\n                    <PlayerSearchResult\r\n                        isMobile={this.isMobile}\r\n                        page=\"search\"\r\n                        code={current.code}\r\n                        name={current.name}\r\n                        age={current.age}\r\n                        season={season}\r\n                        clubs={current.clubs}\r\n                        nationalities={current.nationalities}\r\n                        countryCodes={current.countryCodes}\r\n                        positions={current.positions}\r\n                        key={i}\r\n                    />\r\n                );\r\n\r\n            }\r\n\r\n            searchResultsDisplay =\r\n                <div id=\"player-search-results\">\r\n                    {playerCards}\r\n                </div>;\r\n\r\n        }\r\n        else if (displayType === \"table\"){\r\n\r\n            let tableRows = [];\r\n\r\n            for (let i=0; i<searchResults.length; i++){\r\n\r\n                let current = searchResults[i];\r\n                let row = {};\r\n\r\n                for (let key in current){\r\n\r\n                    if (Array.isArray(current[key])){\r\n                        row[key] = current[key].join(\", \");\r\n                    }\r\n                    else if (typeof current[key] === 'object'){\r\n\r\n                        if (season !== null){\r\n\r\n                            if (key === \"leagues\"){\r\n                                row[key] = getLeaguesDisplay(current[key][season])\r\n                            }\r\n                            else {\r\n                                row[key] = current[key][season].join(\", \");\r\n                                if (row[key] === \"N/A\"){\r\n                                    row[key] = \"-\";\r\n                                }\r\n                            }\r\n\r\n                        }\r\n\r\n                        else {\r\n                            row[key] = getAllEntriesFromObject(current[key]).join(\", \");\r\n                        }\r\n\r\n                    }\r\n                    else {\r\n                        row[key] = current[key];\r\n                    }\r\n\r\n                }\r\n\r\n                tableRows.push(row);\r\n\r\n            }\r\n\r\n            if (tableRows.length > 0){\r\n\r\n                searchResultsDisplay =\r\n                    <div id=\"player-search-results-table\">\r\n                        <DataTable\r\n                            title={\"\"}\r\n                            columns={tableColumns}\r\n                            data={tableRows}\r\n                            theme={\"basic\"}\r\n                            customStyles={this._customStyles}\r\n                            striped={false}\r\n                            //highlightOnHover={true}\r\n                            //pointerOnHover={true}\r\n                            pagination={true}\r\n                            paginationPerPage={30}\r\n                            fixedHeader={true} //causes mis-aligned header bug by adding permanent scrollbar\r\n                            allowOverflow={true}\r\n                            overflowY={true}\r\n                            overflowX={true}\r\n                            defaultSortAsc={false}\r\n                        />\r\n                    </div>;\r\n\r\n            }\r\n\r\n        }\r\n\r\n        this.setState({\r\n            searchResultsDisplay: searchResultsDisplay\r\n        })\r\n\r\n    };\r\n\r\n\r\n    handleSingleSelectChange = (key, value) => {\r\n\r\n        let parameters = this.state.parameters;\r\n\r\n        let oldValue = parameters[key];\r\n\r\n        parameters[key] = value;\r\n\r\n        //changing the season changes the min/max values on the sliders so we update accordingly\r\n        if (key === \"season\"){\r\n\r\n            let season = parameters.season;\r\n\r\n            //if current max/min is greater/less than new max/min\r\n            //or if current max/min is equal to slider max/min\r\n            //update raw stat slider\r\n            for (let stat in parameters.averageStats){\r\n\r\n                let statData = this._referenceData.statsReferenceData[stat];\r\n\r\n                if (\r\n                    parameters.averageStats[stat].max > statData.ranges[season].max ||\r\n                    parameters.averageStats[stat].max === statData.ranges[oldValue].max\r\n                ){\r\n                    parameters.averageStats[stat].max = statData.ranges[season].max;\r\n                }\r\n\r\n                if (parameters.averageStats[stat].min < statData.ranges[season].min ||\r\n                    parameters.averageStats[stat].min === statData.ranges[oldValue].min\r\n                ){\r\n                    parameters.averageStats[stat].min = statData.ranges[season].min;\r\n                }\r\n\r\n            }\r\n\r\n            //same as above but for aggregate stats\r\n            for (let stat in parameters.aggregateStats){\r\n\r\n                let statData = this._referenceData.statsReferenceData[stat];\r\n\r\n                if (\r\n                    parameters.aggregateStats[stat].max > statData.ranges_agg[season].max ||\r\n                    parameters.aggregateStats[stat].max === statData.ranges_agg[oldValue].max\r\n                ){\r\n                    parameters.aggregateStats[stat].max = statData.ranges_agg[season].max;\r\n                }\r\n\r\n                if (parameters.aggregateStats[stat].min < statData.ranges_agg[season].min ||\r\n                    parameters.aggregateStats[stat].min === statData.ranges_agg[oldValue].min\r\n                ){\r\n                    parameters.aggregateStats[stat].min = statData.ranges_agg[season].min;\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n\r\n        this.setState({\r\n            parameters: parameters\r\n        });\r\n\r\n        this.props.setQuery({\r\n            parameters: parameters\r\n        }, 'replaceIn');\r\n\r\n        if (key === \"season\" && this._firstSearchMade && this.state.searchResults.length > 0){\r\n            this.getSearchResults();\r\n        }\r\n\r\n    };\r\n\r\n\r\n    handleIncludeEuropeanCompetitionsClick = () => {\r\n\r\n        let parameters = this.state.parameters;\r\n\r\n        parameters.includeEuropeanCompetitions = !parameters.includeEuropeanCompetitions;\r\n\r\n        this.setState({\r\n            parameters: parameters\r\n        });\r\n\r\n        this.props.setQuery({\r\n            parameters: parameters\r\n        }, 'replaceIn');\r\n\r\n        if (this._firstSearchMade && this.state.searchResults.length > 0){\r\n            this.getSearchResults();\r\n        }\r\n\r\n    };\r\n\r\n\r\n    handleRangeSliderChange = (key, values) => {\r\n\r\n        let parameters = this.state.parameters;\r\n\r\n        set(parameters, `${key}.min`, values[0]);\r\n        set(parameters, `${key}.max`, values[1]);\r\n\r\n        this.setState({\r\n            parameters: parameters\r\n        });\r\n\r\n        this.props.setQuery({\r\n            parameters: parameters\r\n        }, 'replaceIn');\r\n\r\n    };\r\n\r\n\r\n    handleSelectListAdd = (key, value) => {\r\n\r\n        let parameters = this.state.parameters;\r\n\r\n        parameters[`${key}`].push(value);\r\n\r\n        this.setState({\r\n            parameters: parameters\r\n        });\r\n\r\n        this.props.setQuery({\r\n            parameters: parameters\r\n        }, 'replaceIn');\r\n\r\n        if (key === \"positions\"){\r\n            this.buildPercentileRankSelectList();\r\n        }\r\n        else if (key === \"leagues\"){\r\n            this.buildClubsSelectList();\r\n        }\r\n\r\n    };\r\n\r\n\r\n    handleSelectListRemove = (key, value) => {\r\n\r\n        let parameters = this.state.parameters;\r\n\r\n        let index = parameters[`${key}`].indexOf(value);\r\n        if (index > -1) {\r\n            parameters[`${key}`].splice(index, 1);\r\n        }\r\n\r\n        this.setState({\r\n            parameters: parameters\r\n        });\r\n\r\n        this.props.setQuery({\r\n            parameters: parameters\r\n        }, 'replaceIn');\r\n\r\n        if (key === \"positions\"){\r\n            this.buildPercentileRankSelectList()\r\n        }\r\n        else if (key === \"leagues\"){\r\n            this.buildClubsSelectList();\r\n        }\r\n\r\n    };\r\n\r\n\r\n    handleSelectListClear = (key) => {\r\n\r\n        let parameters = this.state.parameters;\r\n\r\n        parameters[key] = [];\r\n\r\n        this.setState({\r\n            parameters: parameters\r\n        });\r\n\r\n        this.props.setQuery({\r\n            parameters: parameters\r\n        }, 'replaceIn');\r\n\r\n        if (key === \"positions\"){\r\n            this.buildPercentileRankSelectList()\r\n        }\r\n        else if (key === \"leagues\"){\r\n            this.buildClubsSelectList();\r\n        }\r\n\r\n    };\r\n\r\n\r\n    buildPercentileRankSelectList = () => {\r\n\r\n        let filterOptions = this.state.filterOptions;\r\n        let parameters = this.state.parameters;\r\n\r\n        if (parameters.positions.length !== 1){\r\n\r\n            filterOptions.percentileRanks = [];\r\n\r\n            this.setState({\r\n                filterOptions: filterOptions\r\n            });\r\n\r\n        }\r\n        else {\r\n\r\n            let percentileRankOptions = [];\r\n\r\n            let position = parameters.positions[0];\r\n\r\n            for (let i=0; i<this._statsReferenceDataArraySorted.length; i++){\r\n\r\n                let stat = this._statsReferenceDataArraySorted[i].stat;\r\n\r\n                let statData = this._referenceData.statsReferenceData[stat];\r\n\r\n                if (!this._referenceData.statsByPosition[position].includes(stat)){\r\n\r\n                    if (parameters.percentileRanks.hasOwnProperty(stat)){\r\n                        delete parameters.percentileRanks[stat];\r\n                    }\r\n\r\n                    continue;\r\n                }\r\n\r\n                percentileRankOptions.push(\r\n                    <Option\r\n                        key={stat}\r\n                        value={stat}\r\n                    >\r\n                        {`${statData.label} ${statData.suffix}`}\r\n                    </Option>\r\n                )\r\n\r\n            }\r\n\r\n            filterOptions.percentileRanks = percentileRankOptions;\r\n\r\n            this.setState({\r\n                filterOptions: filterOptions,\r\n                parameters: parameters\r\n            });\r\n\r\n            this.props.setQuery({\r\n                parameters: parameters\r\n            }, 'replaceIn');\r\n\r\n        }\r\n\r\n    };\r\n\r\n\r\n    buildClubsSelectList = () => {\r\n\r\n        let parameters = this.state.parameters;\r\n        let filterOptions = this.state.filterOptions;\r\n\r\n        let selectedLeagues = parameters.leagues;\r\n\r\n        let clubsReferenceData = this._referenceData.clubs;\r\n\r\n        let eligibleClubs;\r\n\r\n        if (selectedLeagues.length === 0){\r\n            eligibleClubs = clubsReferenceData\r\n                .map(x => x.name);\r\n        }\r\n        else {\r\n            eligibleClubs = clubsReferenceData\r\n                .filter(x => selectedLeagues.includes(x.countryCode))\r\n                .map(x => x.name);\r\n        }\r\n\r\n        let clubsOptions = [];\r\n        for (let i=0; i<clubsReferenceData.length; i++){\r\n\r\n            let club = clubsReferenceData[i];\r\n\r\n            if (!eligibleClubs.includes(club.name)){\r\n                continue;\r\n            }\r\n\r\n            clubsOptions.push(\r\n                <Option\r\n                    key={club.name}\r\n                    value={club.name}\r\n                >\r\n                    {club.name}\r\n                </Option>\r\n            )\r\n\r\n        }\r\n        filterOptions.clubs = clubsOptions;\r\n\r\n        parameters.clubs = parameters.clubs.filter(x => eligibleClubs.includes(x));\r\n\r\n        this.setState({\r\n            filterOptions: filterOptions,\r\n            parameters: parameters\r\n        });\r\n\r\n        this.props.setQuery({\r\n            parameters: parameters\r\n        }, 'replaceIn');\r\n\r\n    };\r\n\r\n\r\n    handleLookupStatSelectListAdd = (parametersKey, stat) => {\r\n\r\n        let parameters = this.state.parameters;\r\n\r\n        let season = parameters.season;\r\n        let referenceData = this._referenceData.statsReferenceData[stat];\r\n\r\n        let rangesKey = parametersKey === \"averageStats\" ? \"ranges\" : \"ranges_agg\";\r\n\r\n        let min = parametersKey === \"percentileRanks\" ? 0 : referenceData[rangesKey][season].min;\r\n        let max = parametersKey === \"percentileRanks\" ? 100 : referenceData[rangesKey][season].max;\r\n\r\n        parameters[`${parametersKey}`][stat] = {\r\n            min: min,\r\n            max: max,\r\n        };\r\n\r\n        this.setState({\r\n            parameters: parameters\r\n        });\r\n\r\n        this.props.setQuery({\r\n            parameters: parameters\r\n        }, 'replaceIn');\r\n\r\n    };\r\n\r\n\r\n    handleLookupStatSelectListRemove = (parametersKey, stat) => {\r\n\r\n        let parameters = this.state.parameters;\r\n\r\n        delete parameters[parametersKey][stat];\r\n\r\n        this.setState({\r\n            parameters: parameters\r\n        });\r\n\r\n        this.props.setQuery({\r\n            parameters: parameters\r\n        }, 'replaceIn');\r\n\r\n    };\r\n\r\n\r\n    handleLookupStatsSelectListClear = (key) => {\r\n\r\n        let parameters = this.state.parameters;\r\n\r\n        for (let stat in parameters[key]){\r\n            if (stat !== \"minutes\"){\r\n                delete parameters[key][stat];\r\n            }\r\n        }\r\n\r\n        this.setState({\r\n            parameters: parameters\r\n        });\r\n\r\n        this.props.setQuery({\r\n            parameters: parameters\r\n        }, 'replaceIn');\r\n\r\n    };\r\n\r\n\r\n    resetParameters = () => {\r\n\r\n        let parametersOriginalState = JSON.parse(JSON.stringify(this._parametersOriginalState));\r\n\r\n        this.setState({\r\n            parameters: parametersOriginalState,\r\n            searchResults: [],\r\n            searchResultsDisplay: null\r\n        }, () => {\r\n\r\n            this._firstSearchMade = false;\r\n\r\n            this.props.setQuery({\r\n                parameters: parametersOriginalState\r\n            }, 'replaceIn');\r\n\r\n            this.buildClubsSelectList();\r\n\r\n        });\r\n\r\n    };\r\n\r\n\r\n    /**\r\n     * Called just before the component un-mounts\r\n     */\r\n    componentWillUnmount() {\r\n        this._isMounted = false;\r\n    }\r\n\r\n\r\n    tooltipFormatter = (value, min, max) => {\r\n\r\n        if (value === min)\r\n            return \"min\";\r\n\r\n        else if (value === max)\r\n            return \"max\";\r\n\r\n        else\r\n            return value;\r\n\r\n    };\r\n\r\n\r\n\r\n    /**\r\n     * render function\r\n     * @return {*} - JSX code for the search page\r\n     */\r\n    render() {\r\n\r\n        let {\r\n            isLoading,\r\n            error,\r\n            showSearchLoaderOverlay,\r\n            showExplanationOverlay,\r\n            filterOptions,\r\n            parameters,\r\n            searchResults,\r\n            displayType,\r\n            searchResultsDisplay\r\n        } = this.state;\r\n\r\n        //display loading spinner while the server responds to POST request for the reference data\r\n        if (isLoading) {\r\n            return (\r\n                <LoadingSpinner/>\r\n            )\r\n        }\r\n\r\n        //display the error message screen if an error is caught\r\n        else if (error !== null) {\r\n            return (\r\n                <div id=\"main\">\r\n                    <SearchBar\r\n                        isMobile={this.isMobile}\r\n                        page=\"search\"\r\n                        query={this.state.query}\r\n                    />\r\n                    <div className=\"screen\" id=\"error-screen\">\r\n                        <p>{error.message}</p>\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n\r\n        //build search page otherwise\r\n        else {\r\n\r\n            let season = parameters.season;\r\n\r\n            let aggregateStatSliders = [];\r\n            for (let stat in parameters.aggregateStats){\r\n\r\n                if (stat === \"minutes\"){\r\n                    continue;\r\n                }\r\n\r\n                let statData = this._referenceData.statsReferenceData[stat];\r\n\r\n                aggregateStatSliders.push(\r\n                    <h4 key={statData.key}>{`${statData.label}`}</h4>\r\n                );\r\n\r\n                aggregateStatSliders.push(\r\n                    <Slider\r\n                        key={`aggregateStatSlider-${stat}`}\r\n                        range={true}\r\n                        value={[parameters.aggregateStats[stat].min, parameters.aggregateStats[stat].max]}\r\n                        min={statData.ranges_agg[season].min}\r\n                        max={statData.ranges_agg[season].max + 0.0001}\r\n                        step={statData.step_agg}\r\n                        onChange={(values) => this.handleRangeSliderChange(`aggregateStats.${stat}`, values)}\r\n                    />\r\n                );\r\n\r\n            }\r\n\r\n\r\n            let averageStatsSliders = [];\r\n            for (let stat in parameters.averageStats){\r\n\r\n                let statData = this._referenceData.statsReferenceData[stat];\r\n\r\n                averageStatsSliders.push(\r\n                    <h4 key={statData.key}>{`${statData.label} ${statData.suffix}`}</h4>\r\n                );\r\n\r\n                averageStatsSliders.push(\r\n                    <Slider\r\n                        key={`averageStatslider-${stat}`}\r\n                        range={true}\r\n                        value={[parameters.averageStats[stat].min, parameters.averageStats[stat].max]}\r\n                        min={statData.ranges[season].min}\r\n                        max={statData.ranges[season].max + 0.0001}\r\n                        step={statData.step}\r\n                        onChange={(values) => this.handleRangeSliderChange(`averageStats.${stat}`, values)}\r\n                        tipFormatter={value => {return this.tooltipFormatter(value, statData.ranges[season].min, statData.ranges[season].max)}}\r\n                    />\r\n                );\r\n\r\n            }\r\n\r\n            let percentileRanksSliders = [];\r\n            for (let stat in parameters.percentileRanks){\r\n\r\n                let statData = this._referenceData.statsReferenceData[stat];\r\n\r\n                percentileRanksSliders.push(\r\n                    <h4 key={statData.key}>{`${statData.label} ${statData.suffix}`}</h4>\r\n                );\r\n\r\n                percentileRanksSliders.push(\r\n                    <Slider\r\n                        key={`percentileRanksSlider-${stat}`}\r\n                        disabled={parameters.positions.length !== 1}\r\n                        range={true}\r\n                        value={[parameters.percentileRanks[stat].min, parameters.percentileRanks[stat].max]}\r\n                        min={0}\r\n                        max={season === null ? 0 : 100}\r\n                        step={5}\r\n                        onChange={(values) => this.handleRangeSliderChange(`percentileRanks.${stat}`, values)}\r\n                    />\r\n                );\r\n\r\n            }\r\n\r\n            let minutesReferenceData = this._referenceData.statsReferenceData[\"minutes\"];\r\n\r\n            //return JSX code for the search page\r\n            return (\r\n                <div id=\"main\">\r\n                    <LoaderOverlay\r\n                        display={showSearchLoaderOverlay}\r\n                    />\r\n                    <ExplanationOverlay\r\n                        display={showExplanationOverlay}\r\n                        toggleExplanationOverlay={this.toggleExplanationOverlay}\r\n                    />\r\n                    <SearchBar\r\n                        isMobile={this.isMobile}\r\n                        page=\"search\"\r\n                        query={this.state.query}\r\n                    />\r\n                    <div className=\"screen\" id=\"search-screen\">\r\n                        <div className=\"filter\" id=\"advanced-search-filters\">\r\n                            <div className=\"filter-inputs search-filter-inputs\" id=\"advanced-search-filter-inputs\">\r\n                                <button className=\"fas fa-question-circle explanation-button\" onClick={this.toggleExplanationOverlay}/>\r\n                                <h4 style={{'display': this.isMobile ? \"none\" : \"block\"}}>Results Display</h4>\r\n                                <div style={{'display': this.isMobile ? \"none\" : \"block\"}} id=\"display-type-buttons-container\">\r\n                                    <button\r\n                                        className={`fas fa-th display-type-button ${displayType === \"cards\" ? \"selected\" : null}`}\r\n                                        onClick={this.handleCardsButtonClick}\r\n                                    />\r\n                                    │\r\n                                    <button\r\n                                        className={`fas fa-table display-type-button ${displayType === \"table\" ? \"selected\" : null}`}\r\n                                        onClick={this.handleTableButtonClick}\r\n                                    />\r\n                                </div>\r\n                                <h4>Season</h4>\r\n                                <Select\r\n                                    value={parameters.season}\r\n                                    placeholder={\"Select a season\"}\r\n                                    style={{ width: '100%' }}\r\n                                    onChange={(val) => this.handleSingleSelectChange(\"season\", val)}\r\n                                >\r\n                                    {filterOptions.seasons}\r\n                                </Select>\r\n                                <label\r\n                                    className={`${parameters.includeEuropeanCompetitions ? \"selected-label\" : null} selectable-label`}\r\n                                    key={'includeEuropeanCompetitionsCheckbox'}\r\n                                >\r\n                                    <input className=\"\"\r\n                                           type=\"checkbox\"\r\n                                           value={\"Include European Competitions\"}\r\n                                           onChange={this.handleIncludeEuropeanCompetitionsClick}\r\n                                           checked={parameters.includeEuropeanCompetitions}\r\n                                    /> <b>Include CL/EL Stats?</b>\r\n                                </label>\r\n                                <Collapsible\r\n                                    open={!this.isMobile}\r\n                                    trigger=\"Metadata\"\r\n                                    className=\"filter-headers\"\r\n                                    transitionTime={200}\r\n                                    transitionCloseTime={200}\r\n                                >\r\n                                    <h4>Current Age</h4>\r\n                                    <Slider\r\n                                        value={[parameters.ages.min, parameters.ages.max]}\r\n                                        range={true}\r\n                                        defaultValue={[filterOptions.ages.min, filterOptions.ages.max]}\r\n                                        min={filterOptions.ages.min}\r\n                                        max={filterOptions.ages.max}\r\n                                        onChange={(values) => this.handleRangeSliderChange(\"ages\", values)}\r\n                                    />\r\n                                    <h4>Minutes</h4>\r\n                                    <Slider\r\n                                        key={`averageStatslider-minutes`}\r\n                                        range={true}\r\n                                        value={[parameters.aggregateStats[\"minutes\"].min, parameters.aggregateStats[\"minutes\"].max]}\r\n                                        min={minutesReferenceData.ranges_agg[season].min}\r\n                                        max={minutesReferenceData.ranges_agg[season].max + 0.0001}\r\n                                        step={minutesReferenceData.step_agg}\r\n                                        onChange={(values) => this.handleRangeSliderChange(`aggregateStats.minutes`, values)}\r\n                                    />\r\n                                    <h4>Nationalities</h4>\r\n                                    <Select\r\n                                        value={parameters.nationalities.map(x => x)}\r\n                                        placeholder={\"Select nationalities\"}\r\n                                        style={{ width: '100%' }}\r\n                                        mode={\"multiple\"}\r\n                                        allowClear={true}\r\n                                        onSelect={(val) => this.handleSelectListAdd(\"nationalities\", val)}\r\n                                        onDeselect={(val) => this.handleSelectListRemove(\"nationalities\", val)}\r\n                                        onClear={() => this.handleSelectListClear(\"nationalities\")}\r\n                                        filterOption={(input, option) =>\r\n                                            option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                                        }\r\n                                    >\r\n                                        {filterOptions.nationalities}\r\n                                    </Select>\r\n                                    <h4>Leagues</h4>\r\n                                    <Tooltip\r\n                                        title={\"Select a season to use this filter\"}\r\n                                        overlayClassName={parameters.season !== null ? \"hideTooltip\" : null}\r\n                                    >\r\n                                        <Select\r\n                                            value={parameters.leagues.map(x => x)}\r\n                                            placeholder={\"Select leagues\"}\r\n                                            style={{ width: '100%' }}\r\n                                            mode={\"multiple\"}\r\n                                            allowClear={true}\r\n                                            onSelect={(val) => this.handleSelectListAdd(\"leagues\", val)}\r\n                                            onDeselect={(val) => this.handleSelectListRemove(\"leagues\", val)}\r\n                                            onClear={() => this.handleSelectListClear(\"leagues\")}\r\n                                            filterOption={(input, option) =>\r\n                                                option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                                            }\r\n                                        >\r\n                                            {filterOptions.leagues}\r\n                                        </Select>\r\n                                    </Tooltip>\r\n                                    <h4>Clubs</h4>\r\n                                    <Tooltip\r\n                                        title={\"Select a season to use this filter\"}\r\n                                        overlayClassName={parameters.season !== null ? \"hideTooltip\" : null}\r\n                                    >\r\n                                        <Select\r\n                                            value={parameters.clubs.map(x => x)}\r\n                                            placeholder={\"Select clubs\"}\r\n                                            style={{ width: '100%' }}\r\n                                            disabled={parameters.season === null}\r\n                                            mode={\"multiple\"}\r\n                                            allowClear={true}\r\n                                            onSelect={(val) => this.handleSelectListAdd(\"clubs\", val)}\r\n                                            onDeselect={(val) => this.handleSelectListRemove(\"clubs\", val)}\r\n                                            onClear={() => this.handleSelectListClear(\"clubs\")}\r\n                                            filterOption={(input, option) =>\r\n                                                option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                                            }\r\n                                        >\r\n                                            {filterOptions.clubs}\r\n                                        </Select>\r\n                                    </Tooltip>\r\n                                    <h4>Positions</h4>\r\n                                    <Tooltip\r\n                                        title={\"Select a season to use this filter\"}\r\n                                        overlayClassName={parameters.season !== null ? \"hideTooltip\" : null}\r\n                                    >\r\n                                        <Select\r\n                                            value={parameters.positions.map(x => x)}\r\n                                            placeholder={\"Select positions\"}\r\n                                            style={{ width: '100%' }}\r\n                                            disabled={parameters.season === null}\r\n                                            mode={\"multiple\"}\r\n                                            allowClear={true}\r\n                                            onSelect={(val) => this.handleSelectListAdd(\"positions\", val)}\r\n                                            onDeselect={(val) => this.handleSelectListRemove(\"positions\", val)}\r\n                                            onClear={() => this.handleSelectListClear(\"positions\")}\r\n                                            filterOption={(input, option) =>\r\n                                                option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                                            }\r\n                                        >\r\n                                            {filterOptions.positions}\r\n                                        </Select>\r\n                                    </Tooltip>\r\n                                </Collapsible>\r\n                                <Collapsible\r\n                                    open={!this.isMobile}\r\n                                    trigger=\"Totals\"\r\n                                    className=\"filter-headers\"\r\n                                    transitionTime={200}\r\n                                    transitionCloseTime={200}\r\n                                >\r\n                                    <Tooltip\r\n                                        title={\"Select a season to use this filter\"}\r\n                                        overlayClassName={parameters.season !== null ? \"hideTooltip\" : null}\r\n                                    >\r\n                                        <Select\r\n                                            value={Object.keys(parameters.aggregateStats).filter(i => i !== \"minutes\")}\r\n                                            placeholder={\"Select stats to add range sliders\"}\r\n                                            style={{ width: '100%' }}\r\n                                            disabled={parameters.season === null}\r\n                                            mode={\"multiple\"}\r\n                                            allowClear={true}\r\n                                            onSelect={(val) => this.handleLookupStatSelectListAdd(\"aggregateStats\", val)}\r\n                                            onDeselect={(val) => this.handleLookupStatSelectListRemove(\"aggregateStats\", val)}\r\n                                            onClear={() => this.handleLookupStatsSelectListClear(\"aggregateStats\")}\r\n                                            filterOption={(input, option) =>\r\n                                                option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                                            }\r\n                                        >\r\n                                            {filterOptions.aggregateStats}\r\n                                        </Select>\r\n                                    </Tooltip>\r\n                                    {aggregateStatSliders}\r\n                                </Collapsible>\r\n                                <Collapsible\r\n                                    open={!this.isMobile}\r\n                                    trigger=\"Averages\"\r\n                                    className=\"filter-headers\"\r\n                                    transitionTime={200}\r\n                                    transitionCloseTime={200}\r\n                                >\r\n                                    <Tooltip\r\n                                        title={\"Select a season to use this filter\"}\r\n                                        overlayClassName={parameters.season !== null ? \"hideTooltip\" : null}\r\n                                    >\r\n                                        <Select\r\n                                            value={Object.keys(parameters.averageStats)}\r\n                                            placeholder={\"Select stats to add range sliders\"}\r\n                                            style={{ width: '100%' }}\r\n                                            disabled={parameters.season === null}\r\n                                            mode={\"multiple\"}\r\n                                            allowClear={true}\r\n                                            onSelect={(val) => this.handleLookupStatSelectListAdd(\"averageStats\", val)}\r\n                                            onDeselect={(val) => this.handleLookupStatSelectListRemove(\"averageStats\", val)}\r\n                                            onClear={() => this.handleLookupStatsSelectListClear(\"averageStats\")}\r\n                                            filterOption={(input, option) =>\r\n                                                option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                                            }\r\n                                        >\r\n                                            {filterOptions.averageStats}\r\n                                        </Select>\r\n                                    </Tooltip>\r\n                                    {averageStatsSliders}\r\n                                </Collapsible>\r\n                                <Collapsible\r\n                                    open={!this.isMobile}\r\n                                    trigger=\"Percentile Ranks\"\r\n                                    className=\"filter-headers\"\r\n                                    transitionTime={200}\r\n                                    transitionCloseTime={200}\r\n                                >\r\n                                    <Tooltip\r\n                                        title={parameters.season === null ? \"Select a season to use this filter\" : \"Select exactly one position to use this filter\"}\r\n                                        overlayClassName={parameters.season !== null && parameters.positions.length === 1 ? \"hideTooltip\" : null}\r\n                                    >\r\n                                        <Select\r\n                                            value={Object.keys(parameters.percentileRanks)}\r\n                                            placeholder={\"Select stats to add range sliders\"}\r\n                                            style={{ width: '100%' }}\r\n                                            disabled={parameters.season === null || parameters.positions.length !== 1}\r\n                                            mode={\"multiple\"}\r\n                                            allowClear={true}\r\n                                            onSelect={(val) => this.handleLookupStatSelectListAdd(\"percentileRanks\", val)}\r\n                                            onDeselect={(val) => this.handleLookupStatSelectListRemove(\"percentileRanks\", val)}\r\n                                            onClear={() => this.handleLookupStatsSelectListClear(\"percentileRanks\")}\r\n                                            filterOption={(input, option) =>\r\n                                                option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                                            }\r\n                                        >\r\n                                            {filterOptions.percentileRanks}\r\n                                        </Select>\r\n                                    </Tooltip>\r\n                                    {percentileRanksSliders}\r\n                                </Collapsible>\r\n                            </div>\r\n                            <div className=\"filter-buttons\" id=\"advanced-search-filter-buttons\">\r\n                                <div className=\"filter-button\">\r\n                                    <button id=\"reset-filters-button\" type=\"button\" onClick={this.resetParameters}>Reset</button>\r\n                                </div>\r\n                                <div className=\"filter-button\">\r\n                                    <button id=\"search-button\" type=\"button\" onClick={this.getSearchResults}>Search</button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className={`result ${displayType === \"cards\" ? \"scrollable\" : null}`} id=\"search-results\">\r\n                            {\r\n                                searchResults.length > 0 ?\r\n                                <p style={{marginLeft: '0px', lineHeight: '1.3'}}>\r\n                                    Season: {parameters.season.replace(\"-\", \"/\")} | {parameters.includeEuropeanCompetitions ? 'League + CL/EL Stats' : 'League Stats Only'}\r\n                                    <br/>\r\n                                    Data Sources: FBref.com & StatsBomb | Last Updated: {dateFormat(searchResults[0].lastUpdated, \"dd/mm/yyyy, h:MM TT\", true)} UTC\r\n                                </p> :\r\n                                null\r\n                            }\r\n                            {searchResults.length === 0 && this._firstSearchMade ? <p>No results found</p> : null}\r\n                            {searchResultsDisplay}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default withQueryParams({\r\n    parameters: JsonParam\r\n}, withRouter(AdvancedSearch));\r\n\r\n","import React, { Component } from 'react';\r\nimport { withRouter, Route, Switch } from 'react-router-dom';\r\nimport { createBrowserHistory } from 'history'\r\nimport ReactGA from 'react-ga';\r\nimport {isMobileOnly, isSafari} from 'react-device-detect';\r\n\r\n//import pages\r\nimport Home from './pages/Home';\r\nimport Search from './pages/Search';\r\nimport Stats from './pages/Stats';\r\nimport Compare from './pages/Compare';\r\nimport Error from './pages/Error';\r\nimport AdvancedSearch from \"./pages/AdvancedSearch\";\r\n\r\n//import stylesheets, including mobile stylesheet if it is a mobile device\r\nrequire('./stylesheets/App.css');\r\nif (isMobileOnly){\r\n    import('./stylesheets/Mobile.css')\r\n    .then( () => {\r\n    });\r\n}\r\n\r\n//initialize Google Analytics\r\nReactGA.initialize('UA-179497563-1');\r\n\r\nconst history = createBrowserHistory();\r\nhistory.listen((location, action) => {\r\n    if (location.action === \"POP\" && location.location.pathname === \"/advancedSearch\"){\r\n        window.location.reload(false);\r\n    }\r\n});\r\n\r\n\r\n/**\r\n * Main app component. Handles routing, and the retrieval of percentile arrays.\r\n */\r\nclass App extends Component {\r\n\r\n\r\n    /**\r\n     * Constructor\r\n     * @param props\r\n     */\r\n    constructor(props) {\r\n\r\n        super(props);\r\n\r\n        let percentileArrays = JSON.parse(localStorage.getItem('percentileArrays'));\r\n\r\n        if (percentileArrays === null){\r\n            percentileArrays = {\r\n                lastUpdated: null\r\n            }\r\n        }\r\n\r\n        this.state = {\r\n            isLoading: true,\r\n            percentileArrays: percentileArrays,\r\n        };\r\n\r\n        this.getPercentileArrays();\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * Function to send a POST request to the server to retrieve the percentile arrays\r\n     */\r\n    getPercentileArrays = () => {\r\n\r\n        //retrieve percentile arrays and set isLoading to false\r\n        fetch('/api/percentiles', {\r\n            method: 'post',\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify({\r\n                \"percentilesTimestamp\": this.state.percentileArrays['lastUpdated']\r\n            })\r\n        })\r\n        .then(res => {\r\n            return res.json()\r\n        })\r\n        .then(percentileArrays => {\r\n            if (percentileArrays === null){\r\n                this.setState({isLoading: false})\r\n            }\r\n            else {\r\n                localStorage.setItem('percentileArrays', JSON.stringify(percentileArrays));\r\n                this.setState({percentileArrays: percentileArrays, isLoading: false})\r\n            }\r\n        })\r\n        .catch();\r\n\r\n    };\r\n\r\n\r\n    /**\r\n     * Function to record a Google Analytics page view\r\n     * Passed to page components as a prop, and called on page load\r\n     * @param {string} location - the URL of the page for which the view is being recorded\r\n     */\r\n    recordPageViewGA = (location) => {\r\n\r\n        ReactGA.pageview(location);\r\n\r\n    };\r\n\r\n\r\n    /**\r\n     * Function to update percentile arrays (called from Stats and Compare pages)\r\n     * @param {Object} newPercentileArrays - the object representing the new percentile arrays\r\n     */\r\n    updatePercentileArrays = (newPercentileArrays) => {\r\n\r\n        localStorage.setItem('percentileArrays', JSON.stringify(newPercentileArrays));\r\n\r\n        this.setState({\r\n            percentileArrays: newPercentileArrays\r\n        })\r\n\r\n    };\r\n\r\n\r\n    /**\r\n     * render function\r\n     * @return {*} - JSX code for the website routing\r\n     */\r\n    render() {\r\n\r\n        let { isLoading } = this.state;\r\n\r\n        //display loading message while server responds to POST request for the percentile arrays\r\n        if (isLoading) {\r\n            return (\r\n                <div id=\"main\">\r\n                    <div className=\"screen\" id=\"loading-screen\">\r\n                        <p>Connecting...</p>\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n\r\n        //return routing code otherwise\r\n        else {\r\n\r\n            return (\r\n                <Switch>\r\n                    <Route exact path='/' render={(props) =>\r\n                        <Home\r\n                            {...props}\r\n                            isMobile={isMobileOnly}\r\n                            recordPageViewGA={this.recordPageViewGA}\r\n                        />}\r\n                    />\r\n                    <Route exact path='/search/:query/:searchByClub?' render={(props) =>\r\n                        <Search\r\n                            {...props}\r\n                            isMobile={isMobileOnly}\r\n                            recordPageViewGA={this.recordPageViewGA}\r\n                        />}\r\n                    />\r\n                    <Route exact path='/advancedSearch' render={(props) =>\r\n                        <AdvancedSearch\r\n                            {...props}\r\n                            isMobile={isMobileOnly}\r\n                            recordPageViewGA={this.recordPageViewGA}\r\n                        />}\r\n                    />\r\n                    <Route exact path='/stats/:code' render={(props) =>\r\n                        <Stats\r\n                            {...props}\r\n                            isMobile={isMobileOnly}\r\n                            isSafari={isSafari}\r\n                            recordPageViewGA={this.recordPageViewGA}\r\n                            percentileArrays={this.state.percentileArrays}\r\n                            updatePercentileArrays={this.updatePercentileArrays}\r\n                        />}\r\n                    />\r\n                    <Route exact path='/compare/:codes' render={(props) =>\r\n                        <Compare\r\n                            {...props}\r\n                            isMobile={isMobileOnly}\r\n                            isSafari={isSafari}\r\n                            recordPageViewGA={this.recordPageViewGA}\r\n                            percentileArrays={this.state.percentileArrays}\r\n                            updatePercentileArrays={this.updatePercentileArrays}\r\n                        />}\r\n                    />\r\n                    <Route component={Error}/>\r\n                </Switch>\r\n            );\r\n\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default withRouter(App);\r\n","import React from 'react';\r\nimport { render } from 'react-dom';\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\nimport './index.less';\r\nimport App from './App/App';\r\n\r\nimport { QueryParamProvider } from 'use-query-params';\r\n\r\nrender((\r\n    <BrowserRouter>\r\n        <QueryParamProvider\r\n        >\r\n            <App />\r\n        </QueryParamProvider>\r\n    </BrowserRouter>\r\n), document.getElementById('root'));\r\n"],"sourceRoot":""}